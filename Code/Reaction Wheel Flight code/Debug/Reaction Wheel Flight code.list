
Reaction Wheel Flight code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005c30  08005c30  00015c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e38  08005e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e38  08005e38  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e38  08005e38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  20000070  08005eb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08005eb0  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f262  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e5  00000000  00000000  0002f2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000317e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000325f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b704  00000000  00000000  00033310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109e1  00000000  00000000  0004ea14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5f4  00000000  00000000  0005f3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee9e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043bc  00000000  00000000  000eea3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c14 	.word	0x08005c14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005c14 	.word	0x08005c14

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2uiz>:
 8000bb4:	004a      	lsls	r2, r1, #1
 8000bb6:	d211      	bcs.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d211      	bcs.n	8000be2 <__aeabi_d2uiz+0x2e>
 8000bbe:	d50d      	bpl.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d40e      	bmi.n	8000be8 <__aeabi_d2uiz+0x34>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d102      	bne.n	8000bee <__aeabi_d2uiz+0x3a>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_d2f>:
 8000bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bfc:	bf24      	itt	cs
 8000bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_d2f+0x30>
 8000c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c28:	d121      	bne.n	8000c6e <__aeabi_d2f+0x7a>
 8000c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2e:	bfbc      	itt	lt
 8000c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	4770      	bxlt	lr
 8000c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3e:	f1c2 0218 	rsb	r2, r2, #24
 8000c42:	f1c2 0c20 	rsb	ip, r2, #32
 8000c46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4e:	bf18      	it	ne
 8000c50:	f040 0001 	orrne.w	r0, r0, #1
 8000c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c60:	ea40 000c 	orr.w	r0, r0, ip
 8000c64:	fa23 f302 	lsr.w	r3, r3, r2
 8000c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c6c:	e7cc      	b.n	8000c08 <__aeabi_d2f+0x14>
 8000c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c72:	d107      	bne.n	8000c84 <__aeabi_d2f+0x90>
 8000c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c78:	bf1e      	ittt	ne
 8000c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c82:	4770      	bxne	lr
 8000c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_frsub>:
 8000c94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	e002      	b.n	8000ca0 <__addsf3>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fsub>:
 8000c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca0 <__addsf3>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	bf1f      	itttt	ne
 8000ca4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca8:	ea92 0f03 	teqne	r2, r3
 8000cac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb4:	d06a      	beq.n	8000d8c <__addsf3+0xec>
 8000cb6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cbe:	bfc1      	itttt	gt
 8000cc0:	18d2      	addgt	r2, r2, r3
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	4048      	eorgt	r0, r1
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	bf88      	it	hi
 8000cd0:	4770      	bxhi	lr
 8000cd2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cde:	bf18      	it	ne
 8000ce0:	4240      	negne	r0, r0
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4249      	negne	r1, r1
 8000cf2:	ea92 0f03 	teq	r2, r3
 8000cf6:	d03f      	beq.n	8000d78 <__addsf3+0xd8>
 8000cf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cfc:	fa41 fc03 	asr.w	ip, r1, r3
 8000d00:	eb10 000c 	adds.w	r0, r0, ip
 8000d04:	f1c3 0320 	rsb	r3, r3, #32
 8000d08:	fa01 f103 	lsl.w	r1, r1, r3
 8000d0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__addsf3+0x78>
 8000d12:	4249      	negs	r1, r1
 8000d14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d1c:	d313      	bcc.n	8000d46 <__addsf3+0xa6>
 8000d1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d22:	d306      	bcc.n	8000d32 <__addsf3+0x92>
 8000d24:	0840      	lsrs	r0, r0, #1
 8000d26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2a:	f102 0201 	add.w	r2, r2, #1
 8000d2e:	2afe      	cmp	r2, #254	; 0xfe
 8000d30:	d251      	bcs.n	8000dd6 <__addsf3+0x136>
 8000d32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	ea40 0003 	orr.w	r0, r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	0049      	lsls	r1, r1, #1
 8000d48:	eb40 0000 	adc.w	r0, r0, r0
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d54:	d2ed      	bcs.n	8000d32 <__addsf3+0x92>
 8000d56:	fab0 fc80 	clz	ip, r0
 8000d5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d66:	bfaa      	itet	ge
 8000d68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d6c:	4252      	neglt	r2, r2
 8000d6e:	4318      	orrge	r0, r3
 8000d70:	bfbc      	itt	lt
 8000d72:	40d0      	lsrlt	r0, r2
 8000d74:	4318      	orrlt	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	f092 0f00 	teq	r2, #0
 8000d7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d80:	bf06      	itte	eq
 8000d82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d86:	3201      	addeq	r2, #1
 8000d88:	3b01      	subne	r3, #1
 8000d8a:	e7b5      	b.n	8000cf8 <__addsf3+0x58>
 8000d8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d94:	bf18      	it	ne
 8000d96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9a:	d021      	beq.n	8000de0 <__addsf3+0x140>
 8000d9c:	ea92 0f03 	teq	r2, r3
 8000da0:	d004      	beq.n	8000dac <__addsf3+0x10c>
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	bf08      	it	eq
 8000da8:	4608      	moveq	r0, r1
 8000daa:	4770      	bx	lr
 8000dac:	ea90 0f01 	teq	r0, r1
 8000db0:	bf1c      	itt	ne
 8000db2:	2000      	movne	r0, #0
 8000db4:	4770      	bxne	lr
 8000db6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dba:	d104      	bne.n	8000dc6 <__addsf3+0x126>
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	bf28      	it	cs
 8000dc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dca:	bf3c      	itt	cc
 8000dcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd0:	4770      	bxcc	lr
 8000dd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de4:	bf16      	itet	ne
 8000de6:	4608      	movne	r0, r1
 8000de8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dec:	4601      	movne	r1, r0
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	bf06      	itte	eq
 8000df2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df6:	ea90 0f01 	teqeq	r0, r1
 8000dfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_ui2f>:
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e004      	b.n	8000e10 <__aeabi_i2f+0x8>
 8000e06:	bf00      	nop

08000e08 <__aeabi_i2f>:
 8000e08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	bf48      	it	mi
 8000e0e:	4240      	negmi	r0, r0
 8000e10:	ea5f 0c00 	movs.w	ip, r0
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	e01c      	b.n	8000e5e <__aeabi_l2f+0x2a>

08000e24 <__aeabi_ul2f>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e00a      	b.n	8000e48 <__aeabi_l2f+0x14>
 8000e32:	bf00      	nop

08000e34 <__aeabi_l2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__aeabi_l2f+0x14>
 8000e42:	4240      	negs	r0, r0
 8000e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e48:	ea5f 0c01 	movs.w	ip, r1
 8000e4c:	bf02      	ittt	eq
 8000e4e:	4684      	moveq	ip, r0
 8000e50:	4601      	moveq	r1, r0
 8000e52:	2000      	moveq	r0, #0
 8000e54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e58:	bf08      	it	eq
 8000e5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e62:	fabc f28c 	clz	r2, ip
 8000e66:	3a08      	subs	r2, #8
 8000e68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e6c:	db10      	blt.n	8000e90 <__aeabi_l2f+0x5c>
 8000e6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e72:	4463      	add	r3, ip
 8000e74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f102 0220 	add.w	r2, r2, #32
 8000e94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e98:	f1c2 0220 	rsb	r2, r2, #32
 8000e9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea4:	eb43 0002 	adc.w	r0, r3, r2
 8000ea8:	bf08      	it	eq
 8000eaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eae:	4770      	bx	lr

08000eb0 <__gesf2>:
 8000eb0:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb4:	e006      	b.n	8000ec4 <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__lesf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	e002      	b.n	8000ec4 <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__cmpsf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ecc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed4:	bf18      	it	ne
 8000ed6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eda:	d011      	beq.n	8000f00 <__cmpsf2+0x40>
 8000edc:	b001      	add	sp, #4
 8000ede:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ee2:	bf18      	it	ne
 8000ee4:	ea90 0f01 	teqne	r0, r1
 8000ee8:	bf58      	it	pl
 8000eea:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eee:	bf88      	it	hi
 8000ef0:	17c8      	asrhi	r0, r1, #31
 8000ef2:	bf38      	it	cc
 8000ef4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef8:	bf18      	it	ne
 8000efa:	f040 0001 	orrne.w	r0, r0, #1
 8000efe:	4770      	bx	lr
 8000f00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f04:	d102      	bne.n	8000f0c <__cmpsf2+0x4c>
 8000f06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f0a:	d105      	bne.n	8000f18 <__cmpsf2+0x58>
 8000f0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f10:	d1e4      	bne.n	8000edc <__cmpsf2+0x1c>
 8000f12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f16:	d0e1      	beq.n	8000edc <__cmpsf2+0x1c>
 8000f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__aeabi_cfrcmple>:
 8000f20:	4684      	mov	ip, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4661      	mov	r1, ip
 8000f26:	e7ff      	b.n	8000f28 <__aeabi_cfcmpeq>

08000f28 <__aeabi_cfcmpeq>:
 8000f28:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f2a:	f7ff ffc9 	bl	8000ec0 <__cmpsf2>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	bf48      	it	mi
 8000f32:	f110 0f00 	cmnmi.w	r0, #0
 8000f36:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f38 <__aeabi_fcmpeq>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff fff4 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f40:	bf0c      	ite	eq
 8000f42:	2001      	moveq	r0, #1
 8000f44:	2000      	movne	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmplt>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffea 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f54:	bf34      	ite	cc
 8000f56:	2001      	movcc	r0, #1
 8000f58:	2000      	movcs	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmple>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffe0 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpge>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffd2 	bl	8000f20 <__aeabi_cfrcmple>
 8000f7c:	bf94      	ite	ls
 8000f7e:	2001      	movls	r0, #1
 8000f80:	2000      	movhi	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmpgt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffc8 	bl	8000f20 <__aeabi_cfrcmple>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_f2uiz>:
 8000f9c:	0042      	lsls	r2, r0, #1
 8000f9e:	d20e      	bcs.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa4:	d30b      	bcc.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fae:	d409      	bmi.n	8000fc4 <__aeabi_f2uiz+0x28>
 8000fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2uiz+0x32>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d102      	bne.n	8000fd4 <__aeabi_f2uiz+0x38>
 8000fce:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd2:	4770      	bx	lr
 8000fd4:	f04f 0000 	mov.w	r0, #0
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <Strip_Set_Timer>:
 */

#include "led_strip.h"

void Strip_Set_Timer(TIM_HandleTypeDef* timer)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	Set_LED_Timer(timer);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f915 	bl	8001214 <Set_LED_Timer>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <Strip_Progress_Bar_Single_Color>:

void Strip_Progress_Bar_Single_Color(uint8_t num_filled, enum COLOR color)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71bb      	strb	r3, [r7, #6]
	Clear_All_LED();
 8001002:	f000 fad1 	bl	80015a8 <Clear_All_LED>
	if(num_filled > 5) num_filled = 5;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b05      	cmp	r3, #5
 800100a:	d901      	bls.n	8001010 <Strip_Progress_Bar_Single_Color+0x1e>
 800100c:	2305      	movs	r3, #5
 800100e:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < num_filled; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e008      	b.n	8001028 <Strip_Progress_Bar_Single_Color+0x36>
		Set_LED_From_Color_Name(i, color);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	79ba      	ldrb	r2, [r7, #6]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fa98 	bl	8001552 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < num_filled; i++) {
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3f2      	bcc.n	8001016 <Strip_Progress_Bar_Single_Color+0x24>
	}
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <Strip_Clear>:

void Strip_Clear()
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
	Clear_All_LED();
 800103e:	f000 fab3 	bl	80015a8 <Clear_All_LED>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}

08001046 <Strip_Send>:

void Strip_Send()
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
	WS2813_Send();
 800104a:	f000 f9a5 	bl	8001398 <WS2813_Send>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZN20Reversable_PWM_MotorC1EP17TIM_HandleTypeDefP11TIM_TypeDeftfffff>:
 *      Author: kking
 */

#include "reversable_pwm_motor.h"

Reversable_PWM_Motor::Reversable_PWM_Motor(TIM_HandleTypeDef* timer, TIM_TypeDef* timer_address, uint16_t channel, float deadzone_min, float deadzone_max, float arming_dc, float min_duty_cycle, float max_duty_cycle)
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	807b      	strh	r3, [r7, #2]
  timer_address(timer_address),
  channel(channel),
  min_forward_dc(0),
  max_forward_dc(0),
  min_reverse_dc(0),
  max_reverse_dc(0)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a3a      	ldr	r2, [r7, #32]
 800108c:	619a      	str	r2, [r3, #24]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	887a      	ldrh	r2, [r7, #2]
 80010be:	869a      	strh	r2, [r3, #52]	; 0x34
{
	//HAL_TIM_PWM_Start(this->timer, this->channel);

	neutral_point = 0.5 * (deadzone_min + deadzone_max);
 80010c0:	69f9      	ldr	r1, [r7, #28]
 80010c2:	69b8      	ldr	r0, [r7, #24]
 80010c4:	f7ff fdec 	bl	8000ca0 <__addsf3>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f83e 	bl	8000150 <__aeabi_fmul>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	615a      	str	r2, [r3, #20]

	min_forward_dc = deadzone_max; //Slowest forward speed
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	61da      	str	r2, [r3, #28]
	max_forward_dc = max_duty_cycle; //Fastest forward speed
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010e6:	621a      	str	r2, [r3, #32]

	min_reverse_dc = min_duty_cycle; //Fastest reverse speed
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
	max_reverse_dc = deadzone_min; //Slowest reverse speed
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <_ZN20Reversable_PWM_Motor3armEv>:

void Reversable_PWM_Motor::arm()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110c:	f000 ff38 	bl	8001f80 <HAL_Delay>
	current_value = arming_dc;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699a      	ldr	r2, [r3, #24]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	609a      	str	r2, [r3, #8]
	current_pwm_value = current_value * 65535;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	490d      	ldr	r1, [pc, #52]	; (8001154 <_ZN20Reversable_PWM_Motor3armEv+0x54>)
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f816 	bl	8000150 <__aeabi_fmul>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff38 	bl	8000f9c <__aeabi_f2uiz>
 800112c:	4602      	mov	r2, r0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	605a      	str	r2, [r3, #4]
	timer_address->CCR2 = current_pwm_value;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6852      	ldr	r2, [r2, #4]
 800113a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 800113c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001140:	f000 ff1e 	bl	8001f80 <HAL_Delay>
	has_armed = true;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	477fff00 	.word	0x477fff00

08001158 <_ZN20Reversable_PWM_Motor8setSpeedEbf>:

//True for speed is clockwise
void Reversable_PWM_Motor::setSpeed(bool clockwise, float speed)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	460b      	mov	r3, r1
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	72fb      	strb	r3, [r7, #11]
	if(!clockwise) speed *= -1; //-1 for reverse
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <_ZN20Reversable_PWM_Motor8setSpeedEbf+0x22>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001178:	607b      	str	r3, [r7, #4]

	if(clockwise)
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <_ZN20Reversable_PWM_Motor8setSpeedEbf+0x5c>
	{
		current_value = ((max_forward_dc - min_forward_dc) * speed) + min_forward_dc;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	4619      	mov	r1, r3
 800118a:	4610      	mov	r0, r2
 800118c:	f7ff fd86 	bl	8000c9c <__aeabi_fsub>
 8001190:	4603      	mov	r3, r0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f7fe ffdb 	bl	8000150 <__aeabi_fmul>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4610      	mov	r0, r2
 80011a6:	f7ff fd7b 	bl	8000ca0 <__addsf3>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	e017      	b.n	80011e4 <_ZN20Reversable_PWM_Motor8setSpeedEbf+0x8c>
	}
	else
	{
		current_value = max_reverse_dc - ((max_reverse_dc - min_reverse_dc) * speed);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4610      	mov	r0, r2
 80011c4:	f7ff fd6a 	bl	8000c9c <__aeabi_fsub>
 80011c8:	4603      	mov	r3, r0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7fe ffbf 	bl	8000150 <__aeabi_fmul>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	4620      	mov	r0, r4
 80011d8:	f7ff fd60 	bl	8000c9c <__aeabi_fsub>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	609a      	str	r2, [r3, #8]
	}

	current_pwm_value = current_value * 65535;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4909      	ldr	r1, [pc, #36]	; (8001210 <_ZN20Reversable_PWM_Motor8setSpeedEbf+0xb8>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7fe ffb0 	bl	8000150 <__aeabi_fmul>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fed2 	bl	8000f9c <__aeabi_f2uiz>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	605a      	str	r2, [r3, #4]
	timer_address->CCR2 = current_pwm_value;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	6852      	ldr	r2, [r2, #4]
 8001206:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	477fff00 	.word	0x477fff00

08001214 <Set_LED_Timer>:
*/

struct WS2813B_Config ws_config;

void Set_LED_Timer(TIM_HandleTypeDef* timer)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	ws_config.timer = timer;
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <Set_LED_Timer+0x18>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000008c 	.word	0x2000008c

08001230 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]
	ws_config.LED_Data[LEDnum][0] = LEDnum;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	b2d9      	uxtb	r1, r3
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <Set_LED+0x58>)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	711a      	strb	r2, [r3, #4]
	ws_config.LED_Data[LEDnum][1] = Green;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	b2d9      	uxtb	r1, r3
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <Set_LED+0x58>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	460a      	mov	r2, r1
 800125c:	715a      	strb	r2, [r3, #5]
	ws_config.LED_Data[LEDnum][2] = Red;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	b2d9      	uxtb	r1, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <Set_LED+0x58>)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	460a      	mov	r2, r1
 800126c:	719a      	strb	r2, [r3, #6]
	ws_config.LED_Data[LEDnum][3] = Blue;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2d9      	uxtb	r1, r3
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <Set_LED+0x58>)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	460a      	mov	r2, r1
 800127c:	71da      	strb	r2, [r3, #7]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	2000008c 	.word	0x2000008c
 800128c:	00000000 	.word	0x00000000

08001290 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b2d      	cmp	r3, #45	; 0x2d
 800129c:	dd01      	ble.n	80012a2 <Set_Brightness+0x12>
 800129e:	232d      	movs	r3, #45	; 0x2d
 80012a0:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e065      	b.n	8001374 <Set_Brightness+0xe4>
	{
		ws_config.LED_Mod[i][0] = ws_config.LED_Data[i][0];
 80012a8:	4a39      	ldr	r2, [pc, #228]	; (8001390 <Set_Brightness+0x100>)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	7919      	ldrb	r1, [r3, #4]
 80012b2:	4a37      	ldr	r2, [pc, #220]	; (8001390 <Set_Brightness+0x100>)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	330a      	adds	r3, #10
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	460a      	mov	r2, r1
 80012be:	711a      	strb	r2, [r3, #4]
		for (int j=1; j<4; j++)
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	e050      	b.n	8001368 <Set_Brightness+0xd8>
		{
			float angle = 90-brightness;  // in degrees
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd9b 	bl	8000e08 <__aeabi_i2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff f952 	bl	8000580 <__aeabi_f2d>
 80012dc:	a32a      	add	r3, pc, #168	; (adr r3, 8001388 <Set_Brightness+0xf8>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f9a5 	bl	8000630 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <Set_Brightness+0x104>)
 80012f4:	f7ff fac6 	bl	8000884 <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc78 	bl	8000bf4 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	60fb      	str	r3, [r7, #12]
			ws_config.LED_Mod[i][j] = (ws_config.LED_Data[i][j])/(tan(angle));
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <Set_Brightness+0x100>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	441a      	add	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4413      	add	r3, r2
 8001314:	3304      	adds	r3, #4
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f91f 	bl	800055c <__aeabi_i2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff f92c 	bl	8000580 <__aeabi_f2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f003 f960 	bl	80045f4 <tan>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7ff faa2 	bl	8000884 <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc34 	bl	8000bb4 <__aeabi_d2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	b2d9      	uxtb	r1, r3
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <Set_Brightness+0x100>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	441a      	add	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4413      	add	r3, r2
 800135c:	332c      	adds	r3, #44	; 0x2c
 800135e:	460a      	mov	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b03      	cmp	r3, #3
 800136c:	ddab      	ble.n	80012c6 <Set_Brightness+0x36>
	for (int i=0; i<MAX_LED; i++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b09      	cmp	r3, #9
 8001378:	dd96      	ble.n	80012a8 <Set_Brightness+0x18>
		}
	}

#endif

}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	53c8d4f1 	.word	0x53c8d4f1
 800138c:	400921fb 	.word	0x400921fb
 8001390:	2000008c 	.word	0x2000008c
 8001394:	40668000 	.word	0x40668000

08001398 <WS2813_Send>:

void WS2813_Send ()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	e03d      	b.n	8001424 <WS2813_Send+0x8c>
	{
#if USE_BRIGHTNESS
		color = ((ws_config.LED_Mod[i][1]<<16) | (ws_config.LED_Mod[i][2]<<8) | (ws_config.LED_Mod[i][3]));
 80013a8:	4a34      	ldr	r2, [pc, #208]	; (800147c <WS2813_Send+0xe4>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	4931      	ldr	r1, [pc, #196]	; (800147c <WS2813_Send+0xe4>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	431a      	orrs	r2, r3
 80013c6:	492d      	ldr	r1, [pc, #180]	; (800147c <WS2813_Send+0xe4>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80013d2:	4313      	orrs	r3, r2
 80013d4:	607b      	str	r3, [r7, #4]
#else
		color = ((ws_config.LED_Data[i][1]<<16) | (ws_config.LED_Data[i][2]<<8) | (ws_config.LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80013d6:	2317      	movs	r3, #23
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	e01d      	b.n	8001418 <WS2813_Send+0x80>
		{
			if (color&(1<<i))
 80013dc:	2201      	movs	r2, #1
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <WS2813_Send+0x66>
			{
				ws_config.pwmData[indx] = 48;  // 75% of 64
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <WS2813_Send+0xe4>)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3328      	adds	r3, #40	; 0x28
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	2230      	movs	r2, #48	; 0x30
 80013fa:	809a      	strh	r2, [r3, #4]
 80013fc:	e006      	b.n	800140c <WS2813_Send+0x74>
			}

			else ws_config.pwmData[indx] = 20;  // ~30% of 64
 80013fe:	4a1f      	ldr	r2, [pc, #124]	; (800147c <WS2813_Send+0xe4>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3328      	adds	r3, #40	; 0x28
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	2214      	movs	r2, #20
 800140a:	809a      	strh	r2, [r3, #4]

			indx++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3b01      	subs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	dade      	bge.n	80013dc <WS2813_Send+0x44>
	for (int i= 0; i<MAX_LED; i++)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	3301      	adds	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b09      	cmp	r3, #9
 8001428:	ddbe      	ble.n	80013a8 <WS2813_Send+0x10>
		}

	}

	//May need to be changed
	for (int i=0; i<50; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	e00c      	b.n	800144a <WS2813_Send+0xb2>
	{
		ws_config.pwmData[indx] = 0;
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <WS2813_Send+0xe4>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3328      	adds	r3, #40	; 0x28
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	2200      	movs	r2, #0
 800143c:	809a      	strh	r2, [r3, #4]
		indx++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b31      	cmp	r3, #49	; 0x31
 800144e:	ddef      	ble.n	8001430 <WS2813_Send+0x98>
	}

	HAL_TIM_PWM_Start_DMA(ws_config.timer, TIM_CHANNEL_1, (uint32_t *)ws_config.pwmData, indx);
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <WS2813_Send+0xe4>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <WS2813_Send+0xe8>)
 800145a:	2100      	movs	r1, #0
 800145c:	f002 f894 	bl	8003588 <HAL_TIM_PWM_Start_DMA>
	while (!ws_config.datasentflag){};
 8001460:	bf00      	nop
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <WS2813_Send+0xe4>)
 8001464:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0fa      	beq.n	8001462 <WS2813_Send+0xca>
	ws_config.datasentflag = 0;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <WS2813_Send+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000008c 	.word	0x2000008c
 8001480:	200000e0 	.word	0x200000e0

08001484 <Color_To_RGB>:

void Color_To_RGB(struct RGB* rgb, enum COLOR color)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
	if(color == GREEN) {
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d108      	bne.n	80014a8 <Color_To_RGB+0x24>
		rgb->r = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	22ff      	movs	r2, #255	; 0xff
 80014a0:	705a      	strb	r2, [r3, #1]
		rgb->b = 20;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2214      	movs	r2, #20
 80014a6:	709a      	strb	r2, [r3, #2]
	}

	if(color == YELLOW) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <Color_To_RGB+0x3c>
		rgb->r = 255;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	22ff      	movs	r2, #255	; 0xff
 80014b2:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	22ff      	movs	r2, #255	; 0xff
 80014b8:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	709a      	strb	r2, [r3, #2]
	}

	if(color == RED) {
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d108      	bne.n	80014d8 <Color_To_RGB+0x54>
		rgb->r = 255;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	709a      	strb	r2, [r3, #2]
	}

	if(color == PURPLE) {
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d108      	bne.n	80014f0 <Color_To_RGB+0x6c>
		rgb->r = 255;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	705a      	strb	r2, [r3, #1]
		rgb->b = 255;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	22ff      	movs	r2, #255	; 0xff
 80014ee:	709a      	strb	r2, [r3, #2]
	}

	if(color == SKYBLUE) {
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d108      	bne.n	8001508 <Color_To_RGB+0x84>
		rgb->r = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
		rgb->g = 255;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	22ff      	movs	r2, #255	; 0xff
 8001500:	705a      	strb	r2, [r3, #1]
		rgb->b = 200;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	22c8      	movs	r2, #200	; 0xc8
 8001506:	709a      	strb	r2, [r3, #2]
	}

	if(color == CLEAR) {
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d108      	bne.n	8001520 <Color_To_RGB+0x9c>
		rgb->r = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
		rgb->g = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	705a      	strb	r2, [r3, #1]
		rgb->b = 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	709a      	strb	r2, [r3, #2]
	}
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <Set_LED_From_RGB>:

void Set_LED_From_RGB(int LEDnum, struct RGB* rgb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
	Set_LED(LEDnum, rgb->r, rgb->g, rgb->b);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	461a      	mov	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fe73 	bl	8001230 <Set_LED>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <Set_LED_From_Color_Name>:

void Set_LED_From_Color_Name(int LEDnum, enum COLOR color)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	70fb      	strb	r3, [r7, #3]
	struct RGB rgb;
	Color_To_RGB(&rgb, color);
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff8c 	bl	8001484 <Color_To_RGB>
	Set_LED_From_RGB(LEDnum, &rgb);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffd9 	bl	800152a <Set_LED_From_RGB>
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(ws_config.timer, TIM_CHANNEL_1);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f002 f99c 	bl	80038cc <HAL_TIM_PWM_Stop_DMA>
	ws_config.datasentflag=1;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000008c 	.word	0x2000008c

080015a8 <Clear_All_LED>:

void Clear_All_LED()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	e007      	b.n	80015c4 <Clear_All_LED+0x1c>
	{
		Set_LED_From_Color_Name(i, CLEAR);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2105      	movs	r1, #5
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ffca 	bl	8001552 <Set_LED_From_Color_Name>
	for(uint8_t i = 0; i < MAX_LED; i++)
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	3301      	adds	r3, #1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	d9f4      	bls.n	80015b4 <Clear_All_LED+0xc>
	}
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	0000      	movs	r0, r0
	...

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015de:	f000 fc6d 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e2:	f000 f87d 	bl	80016e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e6:	f000 fa3d 	bl	8001a64 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80015ea:	f000 fa15 	bl	8001a18 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 80015ee:	f000 f8f7 	bl	80017e0 <_ZL12MX_TIM2_Initv>
  MX_I2C1_Init();
 80015f2:	f000 f8c1 	bl	8001778 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80015f6:	f000 f981 	bl	80018fc <_ZL12MX_TIM3_Initv>
	0.067,         // Deadzone min duty cycle
	0.0724,        // Deadzone max duty cycle
	0.07,          // Arming duty cycle
	0.06,          // Minimum duty cycle
	0.08           // Maximum duty cycle
  );
 80015fa:	2038      	movs	r0, #56	; 0x38
 80015fc:	f002 ff9a 	bl	8004534 <_Znwj>
 8001600:	4603      	mov	r3, r0
 8001602:	461c      	mov	r4, r3
 8001604:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <main+0xe8>)
 8001606:	9304      	str	r3, [sp, #16]
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <main+0xec>)
 800160a:	9303      	str	r3, [sp, #12]
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <main+0xf0>)
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <main+0xf4>)
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <main+0xf8>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2304      	movs	r3, #4
 800161a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161e:	492d      	ldr	r1, [pc, #180]	; (80016d4 <main+0xfc>)
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fd16 	bl	8001052 <_ZN20Reversable_PWM_MotorC1EP17TIM_HandleTypeDefP11TIM_TypeDeftfffff>
 8001626:	60bc      	str	r4, [r7, #8]

  motor->arm();
 8001628:	68b8      	ldr	r0, [r7, #8]
 800162a:	f7ff fd69 	bl	8001100 <_ZN20Reversable_PWM_Motor3armEv>
  Strip_Set_Timer(&htim3);
 800162e:	482a      	ldr	r0, [pc, #168]	; (80016d8 <main+0x100>)
 8001630:	f7ff fcd4 	bl	8000fdc <Strip_Set_Timer>
  Strip_Clear();
 8001634:	f7ff fd01 	bl	800103a <Strip_Clear>
  Set_Brightness(20);
 8001638:	2014      	movs	r0, #20
 800163a:	f7ff fe29 	bl	8001290 <Set_Brightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Strip_Progress_Bar_Single_Color(9, PURPLE);
 800163e:	2103      	movs	r1, #3
 8001640:	2009      	movs	r0, #9
 8001642:	f7ff fcd6 	bl	8000ff2 <Strip_Progress_Bar_Single_Color>
	Strip_Send();
 8001646:	f7ff fcfe 	bl	8001046 <Strip_Send>
	  float i = 0.2 * sin(HAL_GetTick() / 2000.0);
 800164a:	f000 fc8f 	bl	8001f6c <HAL_GetTick>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff73 	bl	800053c <__aeabi_ui2d>
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <main+0x104>)
 800165c:	f7ff f912 	bl	8000884 <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f002 ff7e 	bl	8004568 <sin>
 800166c:	a312      	add	r3, pc, #72	; (adr r3, 80016b8 <main+0xe0>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ffdd 	bl	8000630 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff fab9 	bl	8000bf4 <__aeabi_d2f>
 8001682:	4603      	mov	r3, r0
 8001684:	607b      	str	r3, [r7, #4]
	  //if(i <= 0.2 && i >= -0.2) i = 0.0;
	  bool dir = true;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
	  if(i < 0.0) dir = false;
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fc5c 	bl	8000f4c <__aeabi_fcmplt>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <main+0xc6>
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
	  motor->setSpeed(dir, i);
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4619      	mov	r1, r3
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f7ff fd57 	bl	8001158 <_ZN20Reversable_PWM_Motor8setSpeedEbf>
	  HAL_Delay(10);
 80016aa:	200a      	movs	r0, #10
 80016ac:	f000 fc68 	bl	8001f80 <HAL_Delay>
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
  }
 80016b0:	e7c5      	b.n	800163e <main+0x66>
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	9999999a 	.word	0x9999999a
 80016bc:	3fc99999 	.word	0x3fc99999
 80016c0:	3da3d70a 	.word	0x3da3d70a
 80016c4:	3d75c28f 	.word	0x3d75c28f
 80016c8:	3d8f5c29 	.word	0x3d8f5c29
 80016cc:	3d944674 	.word	0x3d944674
 80016d0:	3d89374c 	.word	0x3d89374c
 80016d4:	2000037c 	.word	0x2000037c
 80016d8:	200003c4 	.word	0x200003c4
 80016dc:	409f4000 	.word	0x409f4000

080016e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	; 0x40
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	2228      	movs	r2, #40	; 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 f992 	bl	8005a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001702:	2302      	movs	r3, #2
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001706:	2301      	movs	r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800170a:	2310      	movs	r3, #16
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170e:	2302      	movs	r3, #2
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001716:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fa8d 	bl	8002c40 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8001736:	f000 f9b7 	bl	8001aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173a:	230f      	movs	r3, #15
 800173c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173e:	2302      	movs	r3, #2
 8001740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2102      	movs	r1, #2
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fcf5 	bl	8003144 <HAL_RCC_ClockConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800176a:	f000 f99d 	bl	8001aa8 <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3740      	adds	r7, #64	; 0x40
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <_ZL12MX_I2C1_Initv+0x60>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001784:	4a15      	ldr	r2, [pc, #84]	; (80017dc <_ZL12MX_I2C1_Initv+0x64>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b4:	4807      	ldr	r0, [pc, #28]	; (80017d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80017b6:	f001 f8ff 	bl	80029b8 <HAL_I2C_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf14      	ite	ne
 80017c0:	2301      	movne	r3, #1
 80017c2:	2300      	moveq	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80017ca:	f000 f96d 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000328 	.word	0x20000328
 80017d8:	40005400 	.word	0x40005400
 80017dc:	000186a0 	.word	0x000186a0

080017e0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 800181a:	2214      	movs	r2, #20
 800181c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 8001826:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800182a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001838:	482f      	ldr	r0, [pc, #188]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 800183a:	f001 fdfd 	bl	8003438 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800184e:	f000 f92b 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185c:	4619      	mov	r1, r3
 800185e:	4826      	ldr	r0, [pc, #152]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 8001860:	f002 f9bc 	bl	8003bdc <HAL_TIM_ConfigClockSource>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001874:	f000 f918 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001878:	481f      	ldr	r0, [pc, #124]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 800187a:	f001 fe2c 	bl	80034d6 <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800188e:	f000 f90b 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	4619      	mov	r1, r3
 80018a0:	4815      	ldr	r0, [pc, #84]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 80018a2:	f002 fde9 	bl	8004478 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf14      	ite	ne
 80018ac:	2301      	movne	r3, #1
 80018ae:	2300      	moveq	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80018b6:	f000 f8f7 	bl	8001aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ba:	2360      	movs	r3, #96	; 0x60
 80018bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2204      	movs	r2, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 80018d2:	f002 f8c1 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 80018e6:	f000 f8df 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <_ZL12MX_TIM2_Initv+0x118>)
 80018ec:	f000 f9d6 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000037c 	.word	0x2000037c

080018fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	; 0x38
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 800192e:	4a39      	ldr	r2, [pc, #228]	; (8001a14 <_ZL12MX_TIM3_Initv+0x118>)
 8001930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64-1;
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 8001940:	223f      	movs	r2, #63	; 0x3f
 8001942:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001950:	482f      	ldr	r0, [pc, #188]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 8001952:	f001 fd71 	bl	8003438 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001966:	f000 f89f 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001974:	4619      	mov	r1, r3
 8001976:	4826      	ldr	r0, [pc, #152]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 8001978:	f002 f930 	bl	8003bdc <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800198c:	f000 f88c 	bl	8001aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001990:	481f      	ldr	r0, [pc, #124]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 8001992:	f001 fda0 	bl	80034d6 <HAL_TIM_PWM_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80019a6:	f000 f87f 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	4619      	mov	r1, r3
 80019b8:	4815      	ldr	r0, [pc, #84]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 80019ba:	f002 fd5d 	bl	8004478 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 80019ce:	f000 f86b 	bl	8001aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d2:	2360      	movs	r3, #96	; 0x60
 80019d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 80019ea:	f002 f835 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80019fe:	f000 f853 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <_ZL12MX_TIM3_Initv+0x114>)
 8001a04:	f000 f94a 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	; 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200003c4 	.word	0x200003c4
 8001a14:	40000400 	.word	0x40000400

08001a18 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_ZL11MX_DMA_Initv+0x48>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <_ZL11MX_DMA_Initv+0x48>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6153      	str	r3, [r2, #20]
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <_ZL11MX_DMA_Initv+0x48>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2010      	movs	r0, #16
 8001a3c:	f000 fb9b 	bl	8002176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a40:	2010      	movs	r0, #16
 8001a42:	f000 fbb4 	bl	80021ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2011      	movs	r0, #17
 8001a4c:	f000 fb93 	bl	8002176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a50:	2011      	movs	r0, #17
 8001a52:	f000 fbac 	bl	80021ae <HAL_NVIC_EnableIRQ>

}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <_ZL12MX_GPIO_Initv+0x40>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <_ZL12MX_GPIO_Initv+0x40>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <_ZL12MX_GPIO_Initv+0x40>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_ZL12MX_GPIO_Initv+0x40>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <_ZL12MX_GPIO_Initv+0x40>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <_ZL12MX_GPIO_Initv+0x40>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <Error_Handler+0x8>
	...

08001ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_MspInit+0x40>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_MspInit+0x40>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6193      	str	r3, [r2, #24]
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_MspInit+0x40>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_MspInit+0x40>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_MspInit+0x40>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_MspInit+0x40>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <HAL_I2C_MspInit+0x70>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d123      	bne.n	8001b60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_I2C_MspInit+0x74>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_I2C_MspInit+0x74>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_I2C_MspInit+0x74>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b30:	23c0      	movs	r3, #192	; 0xc0
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b34:	2312      	movs	r3, #18
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4619      	mov	r1, r3
 8001b42:	480b      	ldr	r0, [pc, #44]	; (8001b70 <HAL_I2C_MspInit+0x78>)
 8001b44:	f000 fdb4 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_I2C_MspInit+0x74>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_I2C_MspInit+0x74>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_I2C_MspInit+0x74>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010c00 	.word	0x40010c00

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b84:	d13a      	bne.n	8001bfc <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_TIM_Base_MspInit+0x110>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	; (8001c84 <HAL_TIM_Base_MspInit+0x110>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_TIM_Base_MspInit+0x110>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <HAL_TIM_Base_MspInit+0x118>)
 8001ba2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001bd2:	482d      	ldr	r0, [pc, #180]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bd4:	f000 fb06 	bl	80021e4 <HAL_DMA_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001bde:	f7ff ff63 	bl	8001aa8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf4:	4a24      	ldr	r2, [pc, #144]	; (8001c88 <HAL_TIM_Base_MspInit+0x114>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bfa:	e03e      	b.n	8001c7a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d139      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_TIM_Base_MspInit+0x110>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <HAL_TIM_Base_MspInit+0x110>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_TIM_Base_MspInit+0x110>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c20:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_TIM_Base_MspInit+0x124>)
 8001c22:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c26:	2210      	movs	r2, #16
 8001c28:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c44:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001c52:	4810      	ldr	r0, [pc, #64]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c54:	f000 fac6 	bl	80021e4 <HAL_DMA_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 8001c5e:	f7ff ff23 	bl	8001aa8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	2000040c 	.word	0x2000040c
 8001c8c:	40020080 	.word	0x40020080
 8001c90:	40000400 	.word	0x40000400
 8001c94:	20000450 	.word	0x20000450
 8001c98:	4002006c 	.word	0x4002006c

08001c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d118      	bne.n	8001cee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_TIM_MspPostInit+0x94>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_TIM_MspPostInit+0x94>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_TIM_MspPostInit+0x94>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4813      	ldr	r0, [pc, #76]	; (8001d34 <HAL_TIM_MspPostInit+0x98>)
 8001ce8:	f000 fce2 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cec:	e01c      	b.n	8001d28 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <HAL_TIM_MspPostInit+0x9c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d117      	bne.n	8001d28 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_TIM_MspPostInit+0x94>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <HAL_TIM_MspPostInit+0x94>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_TIM_MspPostInit+0x94>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	4804      	ldr	r0, [pc, #16]	; (8001d34 <HAL_TIM_MspPostInit+0x98>)
 8001d24:	f000 fcc4 	bl	80026b0 <HAL_GPIO_Init>
}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010800 	.word	0x40010800
 8001d38:	40000400 	.word	0x40000400

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f8e1 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <DMA1_Channel6_IRQHandler+0x10>)
 8001d92:	f000 fb59 	bl	8002448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000450 	.word	0x20000450

08001da0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <DMA1_Channel7_IRQHandler+0x10>)
 8001da6:	f000 fb4f 	bl	8002448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000040c 	.word	0x2000040c

08001db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <_kill>:

int _kill(int pid, int sig)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dcc:	f003 fdf2 	bl	80059b4 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2216      	movs	r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_exit>:

void _exit (int status)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dea:	f04f 31ff 	mov.w	r1, #4294967295
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffe7 	bl	8001dc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001df4:	e7fe      	b.n	8001df4 <_exit+0x12>
	...

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f003 fdc4 	bl	80059b4 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20005000 	.word	0x20005000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	20000494 	.word	0x20000494
 8001e60:	200004b0 	.word	0x200004b0

08001e64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e70:	f7ff fff8 	bl	8001e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e76:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e78:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e8c:	4c09      	ldr	r4, [pc, #36]	; (8001eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f003 fd91 	bl	80059c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9e:	f7ff fb9b 	bl	80015d8 <main>
  bx lr
 8001ea2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001eac:	08005e40 	.word	0x08005e40
  ldr r2, =_sbss
 8001eb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001eb4:	200004b0 	.word	0x200004b0

08001eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC1_2_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_Init+0x28>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_Init+0x28>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f947 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f000 f808 	bl	8001ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed8:	f7ff fdec 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x54>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x58>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f95f 	bl	80021ca <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f000 f927 	bl	8002176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x5c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_IncTick+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_IncTick+0x20>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20000498 	.word	0x20000498

08001f6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_GetTick+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000498 	.word	0x20000498

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffe0 	bl	8001f6c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4906      	ldr	r1, [pc, #24]	; (8002060 <__NVIC_EnableIRQ+0x34>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f7ff ff90 	bl	8002064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff2d 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002188:	f7ff ff42 	bl	8002010 <__NVIC_GetPriorityGrouping>
 800218c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff90 	bl	80020b8 <NVIC_EncodePriority>
 8002198:	4602      	mov	r2, r0
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff5f 	bl	8002064 <__NVIC_SetPriority>
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff35 	bl	800202c <__NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffa2 	bl	800211c <SysTick_Config>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e043      	b.n	8002282 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_DMA_Init+0xa8>)
 8002202:	4413      	add	r3, r2
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_DMA_Init+0xac>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	009a      	lsls	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_DMA_Init+0xb0>)
 8002216:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800222e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002232:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	bffdfff8 	.word	0xbffdfff8
 8002290:	cccccccd 	.word	0xcccccccd
 8002294:	40020000 	.word	0x40020000

08002298 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Start_IT+0x20>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e04b      	b.n	8002350 <HAL_DMA_Start_IT+0xb8>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d13a      	bne.n	8002342 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f9af 	bl	8002654 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 020e 	orr.w	r2, r2, #14
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00f      	b.n	8002330 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0204 	bic.w	r2, r2, #4
 800231e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 020a 	orr.w	r2, r2, #10
 800232e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e005      	b.n	800234e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d005      	beq.n	800237c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2204      	movs	r2, #4
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e051      	b.n	8002420 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 020e 	bic.w	r2, r2, #14
 800238a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_DMA_Abort_IT+0xd4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d029      	beq.n	80023fa <HAL_DMA_Abort_IT+0xa2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <HAL_DMA_Abort_IT+0xd8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d022      	beq.n	80023f6 <HAL_DMA_Abort_IT+0x9e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <HAL_DMA_Abort_IT+0xdc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01a      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x98>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_DMA_Abort_IT+0xe0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d012      	beq.n	80023ea <HAL_DMA_Abort_IT+0x92>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_DMA_Abort_IT+0xe4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00a      	beq.n	80023e4 <HAL_DMA_Abort_IT+0x8c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <HAL_DMA_Abort_IT+0xe8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d102      	bne.n	80023de <HAL_DMA_Abort_IT+0x86>
 80023d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023dc:	e00e      	b.n	80023fc <HAL_DMA_Abort_IT+0xa4>
 80023de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e2:	e00b      	b.n	80023fc <HAL_DMA_Abort_IT+0xa4>
 80023e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e8:	e008      	b.n	80023fc <HAL_DMA_Abort_IT+0xa4>
 80023ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ee:	e005      	b.n	80023fc <HAL_DMA_Abort_IT+0xa4>
 80023f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f4:	e002      	b.n	80023fc <HAL_DMA_Abort_IT+0xa4>
 80023f6:	2310      	movs	r3, #16
 80023f8:	e000      	b.n	80023fc <HAL_DMA_Abort_IT+0xa4>
 80023fa:	2301      	movs	r3, #1
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_DMA_Abort_IT+0xec>)
 80023fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
    } 
  }
  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020008 	.word	0x40020008
 8002430:	4002001c 	.word	0x4002001c
 8002434:	40020030 	.word	0x40020030
 8002438:	40020044 	.word	0x40020044
 800243c:	40020058 	.word	0x40020058
 8002440:	4002006c 	.word	0x4002006c
 8002444:	40020000 	.word	0x40020000

08002448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2204      	movs	r2, #4
 8002466:	409a      	lsls	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04f      	beq.n	8002510 <HAL_DMA_IRQHandler+0xc8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d04a      	beq.n	8002510 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0204 	bic.w	r2, r2, #4
 8002496:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a66      	ldr	r2, [pc, #408]	; (8002638 <HAL_DMA_IRQHandler+0x1f0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d029      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xae>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_DMA_IRQHandler+0x1f4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <HAL_DMA_IRQHandler+0xaa>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a63      	ldr	r2, [pc, #396]	; (8002640 <HAL_DMA_IRQHandler+0x1f8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01a      	beq.n	80024ec <HAL_DMA_IRQHandler+0xa4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a62      	ldr	r2, [pc, #392]	; (8002644 <HAL_DMA_IRQHandler+0x1fc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d012      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x9e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a60      	ldr	r2, [pc, #384]	; (8002648 <HAL_DMA_IRQHandler+0x200>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x98>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a5f      	ldr	r2, [pc, #380]	; (800264c <HAL_DMA_IRQHandler+0x204>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <HAL_DMA_IRQHandler+0x92>
 80024d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024d8:	e00e      	b.n	80024f8 <HAL_DMA_IRQHandler+0xb0>
 80024da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024de:	e00b      	b.n	80024f8 <HAL_DMA_IRQHandler+0xb0>
 80024e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024e4:	e008      	b.n	80024f8 <HAL_DMA_IRQHandler+0xb0>
 80024e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ea:	e005      	b.n	80024f8 <HAL_DMA_IRQHandler+0xb0>
 80024ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f0:	e002      	b.n	80024f8 <HAL_DMA_IRQHandler+0xb0>
 80024f2:	2340      	movs	r3, #64	; 0x40
 80024f4:	e000      	b.n	80024f8 <HAL_DMA_IRQHandler+0xb0>
 80024f6:	2304      	movs	r3, #4
 80024f8:	4a55      	ldr	r2, [pc, #340]	; (8002650 <HAL_DMA_IRQHandler+0x208>)
 80024fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8094 	beq.w	800262e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800250e:	e08e      	b.n	800262e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2202      	movs	r2, #2
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d056      	beq.n	80025ce <HAL_DMA_IRQHandler+0x186>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d051      	beq.n	80025ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 020a 	bic.w	r2, r2, #10
 8002546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a38      	ldr	r2, [pc, #224]	; (8002638 <HAL_DMA_IRQHandler+0x1f0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d029      	beq.n	80025ae <HAL_DMA_IRQHandler+0x166>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a37      	ldr	r2, [pc, #220]	; (800263c <HAL_DMA_IRQHandler+0x1f4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d022      	beq.n	80025aa <HAL_DMA_IRQHandler+0x162>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a35      	ldr	r2, [pc, #212]	; (8002640 <HAL_DMA_IRQHandler+0x1f8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01a      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x15c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <HAL_DMA_IRQHandler+0x1fc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d012      	beq.n	800259e <HAL_DMA_IRQHandler+0x156>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a32      	ldr	r2, [pc, #200]	; (8002648 <HAL_DMA_IRQHandler+0x200>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00a      	beq.n	8002598 <HAL_DMA_IRQHandler+0x150>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a31      	ldr	r2, [pc, #196]	; (800264c <HAL_DMA_IRQHandler+0x204>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d102      	bne.n	8002592 <HAL_DMA_IRQHandler+0x14a>
 800258c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002590:	e00e      	b.n	80025b0 <HAL_DMA_IRQHandler+0x168>
 8002592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002596:	e00b      	b.n	80025b0 <HAL_DMA_IRQHandler+0x168>
 8002598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259c:	e008      	b.n	80025b0 <HAL_DMA_IRQHandler+0x168>
 800259e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a2:	e005      	b.n	80025b0 <HAL_DMA_IRQHandler+0x168>
 80025a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a8:	e002      	b.n	80025b0 <HAL_DMA_IRQHandler+0x168>
 80025aa:	2320      	movs	r3, #32
 80025ac:	e000      	b.n	80025b0 <HAL_DMA_IRQHandler+0x168>
 80025ae:	2302      	movs	r3, #2
 80025b0:	4a27      	ldr	r2, [pc, #156]	; (8002650 <HAL_DMA_IRQHandler+0x208>)
 80025b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d034      	beq.n	800262e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025cc:	e02f      	b.n	800262e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2208      	movs	r2, #8
 80025d4:	409a      	lsls	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d028      	beq.n	8002630 <HAL_DMA_IRQHandler+0x1e8>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d023      	beq.n	8002630 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 020e 	bic.w	r2, r2, #14
 80025f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f202 	lsl.w	r2, r1, r2
 8002606:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
    }
  }
  return;
 800262e:	bf00      	nop
 8002630:	bf00      	nop
}
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40020008 	.word	0x40020008
 800263c:	4002001c 	.word	0x4002001c
 8002640:	40020030 	.word	0x40020030
 8002644:	40020044 	.word	0x40020044
 8002648:	40020058 	.word	0x40020058
 800264c:	4002006c 	.word	0x4002006c
 8002650:	40020000 	.word	0x40020000

08002654 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b10      	cmp	r3, #16
 8002680:	d108      	bne.n	8002694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002692:	e007      	b.n	80026a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b08b      	sub	sp, #44	; 0x2c
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c2:	e169      	b.n	8002998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026c4:	2201      	movs	r2, #1
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 8158 	bne.w	8002992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a9a      	ldr	r2, [pc, #616]	; (8002950 <HAL_GPIO_Init+0x2a0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d05e      	beq.n	80027aa <HAL_GPIO_Init+0xfa>
 80026ec:	4a98      	ldr	r2, [pc, #608]	; (8002950 <HAL_GPIO_Init+0x2a0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d875      	bhi.n	80027de <HAL_GPIO_Init+0x12e>
 80026f2:	4a98      	ldr	r2, [pc, #608]	; (8002954 <HAL_GPIO_Init+0x2a4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d058      	beq.n	80027aa <HAL_GPIO_Init+0xfa>
 80026f8:	4a96      	ldr	r2, [pc, #600]	; (8002954 <HAL_GPIO_Init+0x2a4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d86f      	bhi.n	80027de <HAL_GPIO_Init+0x12e>
 80026fe:	4a96      	ldr	r2, [pc, #600]	; (8002958 <HAL_GPIO_Init+0x2a8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d052      	beq.n	80027aa <HAL_GPIO_Init+0xfa>
 8002704:	4a94      	ldr	r2, [pc, #592]	; (8002958 <HAL_GPIO_Init+0x2a8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d869      	bhi.n	80027de <HAL_GPIO_Init+0x12e>
 800270a:	4a94      	ldr	r2, [pc, #592]	; (800295c <HAL_GPIO_Init+0x2ac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d04c      	beq.n	80027aa <HAL_GPIO_Init+0xfa>
 8002710:	4a92      	ldr	r2, [pc, #584]	; (800295c <HAL_GPIO_Init+0x2ac>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d863      	bhi.n	80027de <HAL_GPIO_Init+0x12e>
 8002716:	4a92      	ldr	r2, [pc, #584]	; (8002960 <HAL_GPIO_Init+0x2b0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d046      	beq.n	80027aa <HAL_GPIO_Init+0xfa>
 800271c:	4a90      	ldr	r2, [pc, #576]	; (8002960 <HAL_GPIO_Init+0x2b0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d85d      	bhi.n	80027de <HAL_GPIO_Init+0x12e>
 8002722:	2b12      	cmp	r3, #18
 8002724:	d82a      	bhi.n	800277c <HAL_GPIO_Init+0xcc>
 8002726:	2b12      	cmp	r3, #18
 8002728:	d859      	bhi.n	80027de <HAL_GPIO_Init+0x12e>
 800272a:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <HAL_GPIO_Init+0x80>)
 800272c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002730:	080027ab 	.word	0x080027ab
 8002734:	08002785 	.word	0x08002785
 8002738:	08002797 	.word	0x08002797
 800273c:	080027d9 	.word	0x080027d9
 8002740:	080027df 	.word	0x080027df
 8002744:	080027df 	.word	0x080027df
 8002748:	080027df 	.word	0x080027df
 800274c:	080027df 	.word	0x080027df
 8002750:	080027df 	.word	0x080027df
 8002754:	080027df 	.word	0x080027df
 8002758:	080027df 	.word	0x080027df
 800275c:	080027df 	.word	0x080027df
 8002760:	080027df 	.word	0x080027df
 8002764:	080027df 	.word	0x080027df
 8002768:	080027df 	.word	0x080027df
 800276c:	080027df 	.word	0x080027df
 8002770:	080027df 	.word	0x080027df
 8002774:	0800278d 	.word	0x0800278d
 8002778:	080027a1 	.word	0x080027a1
 800277c:	4a79      	ldr	r2, [pc, #484]	; (8002964 <HAL_GPIO_Init+0x2b4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002782:	e02c      	b.n	80027de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	623b      	str	r3, [r7, #32]
          break;
 800278a:	e029      	b.n	80027e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	3304      	adds	r3, #4
 8002792:	623b      	str	r3, [r7, #32]
          break;
 8002794:	e024      	b.n	80027e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	3308      	adds	r3, #8
 800279c:	623b      	str	r3, [r7, #32]
          break;
 800279e:	e01f      	b.n	80027e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	330c      	adds	r3, #12
 80027a6:	623b      	str	r3, [r7, #32]
          break;
 80027a8:	e01a      	b.n	80027e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027b2:	2304      	movs	r3, #4
 80027b4:	623b      	str	r3, [r7, #32]
          break;
 80027b6:	e013      	b.n	80027e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c0:	2308      	movs	r3, #8
 80027c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	611a      	str	r2, [r3, #16]
          break;
 80027ca:	e009      	b.n	80027e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027cc:	2308      	movs	r3, #8
 80027ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	615a      	str	r2, [r3, #20]
          break;
 80027d6:	e003      	b.n	80027e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
          break;
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x130>
          break;
 80027de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2bff      	cmp	r3, #255	; 0xff
 80027e4:	d801      	bhi.n	80027ea <HAL_GPIO_Init+0x13a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	e001      	b.n	80027ee <HAL_GPIO_Init+0x13e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2bff      	cmp	r3, #255	; 0xff
 80027f4:	d802      	bhi.n	80027fc <HAL_GPIO_Init+0x14c>
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	e002      	b.n	8002802 <HAL_GPIO_Init+0x152>
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	3b08      	subs	r3, #8
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	210f      	movs	r1, #15
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	401a      	ands	r2, r3
 8002814:	6a39      	ldr	r1, [r7, #32]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	431a      	orrs	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80b1 	beq.w	8002992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002830:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <HAL_GPIO_Init+0x2b8>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_GPIO_Init+0x2b8>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6193      	str	r3, [r2, #24]
 800283c:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_GPIO_Init+0x2b8>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002848:	4a48      	ldr	r2, [pc, #288]	; (800296c <HAL_GPIO_Init+0x2bc>)
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	3302      	adds	r3, #2
 8002850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	220f      	movs	r2, #15
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a40      	ldr	r2, [pc, #256]	; (8002970 <HAL_GPIO_Init+0x2c0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_GPIO_Init+0x1ec>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3f      	ldr	r2, [pc, #252]	; (8002974 <HAL_GPIO_Init+0x2c4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00d      	beq.n	8002898 <HAL_GPIO_Init+0x1e8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a3e      	ldr	r2, [pc, #248]	; (8002978 <HAL_GPIO_Init+0x2c8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <HAL_GPIO_Init+0x1e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3d      	ldr	r2, [pc, #244]	; (800297c <HAL_GPIO_Init+0x2cc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_GPIO_Init+0x1e0>
 800288c:	2303      	movs	r3, #3
 800288e:	e006      	b.n	800289e <HAL_GPIO_Init+0x1ee>
 8002890:	2304      	movs	r3, #4
 8002892:	e004      	b.n	800289e <HAL_GPIO_Init+0x1ee>
 8002894:	2302      	movs	r3, #2
 8002896:	e002      	b.n	800289e <HAL_GPIO_Init+0x1ee>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_GPIO_Init+0x1ee>
 800289c:	2300      	movs	r3, #0
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	f002 0203 	and.w	r2, r2, #3
 80028a4:	0092      	lsls	r2, r2, #2
 80028a6:	4093      	lsls	r3, r2
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ae:	492f      	ldr	r1, [pc, #188]	; (800296c <HAL_GPIO_Init+0x2bc>)
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	492c      	ldr	r1, [pc, #176]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	43db      	mvns	r3, r3
 80028de:	4928      	ldr	r1, [pc, #160]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60cb      	str	r3, [r1, #12]
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	43db      	mvns	r3, r3
 8002906:	491e      	ldr	r1, [pc, #120]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 8002908:	4013      	ands	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4918      	ldr	r1, [pc, #96]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e006      	b.n	8002934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	43db      	mvns	r3, r3
 800292e:	4914      	ldr	r1, [pc, #80]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 8002930:	4013      	ands	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d021      	beq.n	8002984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e021      	b.n	8002992 <HAL_GPIO_Init+0x2e2>
 800294e:	bf00      	nop
 8002950:	10320000 	.word	0x10320000
 8002954:	10310000 	.word	0x10310000
 8002958:	10220000 	.word	0x10220000
 800295c:	10210000 	.word	0x10210000
 8002960:	10120000 	.word	0x10120000
 8002964:	10110000 	.word	0x10110000
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000
 8002970:	40010800 	.word	0x40010800
 8002974:	40010c00 	.word	0x40010c00
 8002978:	40011000 	.word	0x40011000
 800297c:	40011400 	.word	0x40011400
 8002980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_GPIO_Init+0x304>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	43db      	mvns	r3, r3
 800298c:	4909      	ldr	r1, [pc, #36]	; (80029b4 <HAL_GPIO_Init+0x304>)
 800298e:	4013      	ands	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	3301      	adds	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f47f ae8e 	bne.w	80026c4 <HAL_GPIO_Init+0x14>
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	372c      	adds	r7, #44	; 0x2c
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e12b      	b.n	8002c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff f88a 	bl	8001af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f000 fcda 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8002a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a81      	ldr	r2, [pc, #516]	; (8002c2c <HAL_I2C_Init+0x274>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d807      	bhi.n	8002a3c <HAL_I2C_Init+0x84>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a80      	ldr	r2, [pc, #512]	; (8002c30 <HAL_I2C_Init+0x278>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bf94      	ite	ls
 8002a34:	2301      	movls	r3, #1
 8002a36:	2300      	movhi	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e006      	b.n	8002a4a <HAL_I2C_Init+0x92>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a7d      	ldr	r2, [pc, #500]	; (8002c34 <HAL_I2C_Init+0x27c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0e7      	b.n	8002c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a78      	ldr	r2, [pc, #480]	; (8002c38 <HAL_I2C_Init+0x280>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0c9b      	lsrs	r3, r3, #18
 8002a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_I2C_Init+0x274>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d802      	bhi.n	8002a8c <HAL_I2C_Init+0xd4>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	e009      	b.n	8002aa0 <HAL_I2C_Init+0xe8>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	4a69      	ldr	r2, [pc, #420]	; (8002c3c <HAL_I2C_Init+0x284>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	495c      	ldr	r1, [pc, #368]	; (8002c2c <HAL_I2C_Init+0x274>)
 8002abc:	428b      	cmp	r3, r1
 8002abe:	d819      	bhi.n	8002af4 <HAL_I2C_Init+0x13c>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e59      	subs	r1, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_I2C_Init+0x138>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e59      	subs	r1, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aee:	e051      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e04f      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d111      	bne.n	8002b20 <HAL_I2C_Init+0x168>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1e58      	subs	r0, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e012      	b.n	8002b46 <HAL_I2C_Init+0x18e>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e58      	subs	r0, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	0099      	lsls	r1, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x196>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e022      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10e      	bne.n	8002b74 <HAL_I2C_Init+0x1bc>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e58      	subs	r0, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6859      	ldr	r1, [r3, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	440b      	add	r3, r1
 8002b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b72:	e00f      	b.n	8002b94 <HAL_I2C_Init+0x1dc>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e58      	subs	r0, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	0099      	lsls	r1, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	6809      	ldr	r1, [r1, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6911      	ldr	r1, [r2, #16]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68d2      	ldr	r2, [r2, #12]
 8002bce:	4311      	orrs	r1, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	000186a0 	.word	0x000186a0
 8002c30:	001e847f 	.word	0x001e847f
 8002c34:	003d08ff 	.word	0x003d08ff
 8002c38:	431bde83 	.word	0x431bde83
 8002c3c:	10624dd3 	.word	0x10624dd3

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e272      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8087 	beq.w	8002d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c60:	4b92      	ldr	r3, [pc, #584]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d00c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c6c:	4b8f      	ldr	r3, [pc, #572]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d112      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5e>
 8002c78:	4b8c      	ldr	r3, [pc, #560]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d10b      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c86:	4b89      	ldr	r3, [pc, #548]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d06c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x12c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d168      	bne.n	8002d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e24c      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x76>
 8002ca8:	4b80      	ldr	r3, [pc, #512]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7f      	ldr	r2, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	e02e      	b.n	8002d14 <HAL_RCC_OscConfig+0xd4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x98>
 8002cbe:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7a      	ldr	r2, [pc, #488]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b78      	ldr	r3, [pc, #480]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a77      	ldr	r2, [pc, #476]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e01d      	b.n	8002d14 <HAL_RCC_OscConfig+0xd4>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0xbc>
 8002ce2:	4b72      	ldr	r3, [pc, #456]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a71      	ldr	r2, [pc, #452]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6e      	ldr	r2, [pc, #440]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xd4>
 8002cfc:	4b6b      	ldr	r3, [pc, #428]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b68      	ldr	r3, [pc, #416]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a67      	ldr	r2, [pc, #412]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7ff f926 	bl	8001f6c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff f922 	bl	8001f6c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e200      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0xe4>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7ff f912 	bl	8001f6c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7ff f90e 	bl	8001f6c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1ec      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x10c>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d063      	beq.n	8002e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7a:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x18c>
 8002d92:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d116      	bne.n	8002dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x176>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e1c0      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4939      	ldr	r1, [pc, #228]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	e03a      	b.n	8002e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7ff f8c7 	bl	8001f6c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7ff f8c3 	bl	8001f6c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e1a1      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4927      	ldr	r1, [pc, #156]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e015      	b.n	8002e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7ff f8a6 	bl	8001f6c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7ff f8a2 	bl	8001f6c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e180      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d03a      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d019      	beq.n	8002e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_RCC_OscConfig+0x274>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7ff f886 	bl	8001f6c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7ff f882 	bl	8001f6c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e160      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f000 faba 	bl	80033fc <RCC_Delay>
 8002e88:	e01c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7ff f86c 	bl	8001f6c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e96:	e00f      	b.n	8002eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e98:	f7ff f868 	bl	8001f6c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d908      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e146      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	42420000 	.word	0x42420000
 8002eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	4b92      	ldr	r3, [pc, #584]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e9      	bne.n	8002e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a6 	beq.w	800301e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed6:	4b8b      	ldr	r3, [pc, #556]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a87      	ldr	r2, [pc, #540]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	61d3      	str	r3, [r2, #28]
 8002eee:	4b85      	ldr	r3, [pc, #532]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efe:	4b82      	ldr	r3, [pc, #520]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7e      	ldr	r2, [pc, #504]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f16:	f7ff f829 	bl	8001f6c <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7ff f825 	bl	8001f6c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b64      	cmp	r3, #100	; 0x64
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e103      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b75      	ldr	r3, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x312>
 8002f44:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a6e      	ldr	r2, [pc, #440]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6213      	str	r3, [r2, #32]
 8002f50:	e02d      	b.n	8002fae <HAL_RCC_OscConfig+0x36e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x334>
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4a69      	ldr	r2, [pc, #420]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6213      	str	r3, [r2, #32]
 8002f66:	4b67      	ldr	r3, [pc, #412]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a66      	ldr	r2, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	e01c      	b.n	8002fae <HAL_RCC_OscConfig+0x36e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d10c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x356>
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a60      	ldr	r2, [pc, #384]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	6213      	str	r3, [r2, #32]
 8002f88:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a5d      	ldr	r2, [pc, #372]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	e00b      	b.n	8002fae <HAL_RCC_OscConfig+0x36e>
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a5a      	ldr	r2, [pc, #360]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	4b58      	ldr	r3, [pc, #352]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a57      	ldr	r2, [pc, #348]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d015      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe ffd9 	bl	8001f6c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe ffd5 	bl	8001f6c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0b1      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ee      	beq.n	8002fbe <HAL_RCC_OscConfig+0x37e>
 8002fe0:	e014      	b.n	800300c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe ffc3 	bl	8001f6c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe ffbf 	bl	8001f6c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e09b      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ee      	bne.n	8002fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d105      	bne.n	800301e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003012:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4a3b      	ldr	r2, [pc, #236]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8087 	beq.w	8003136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d061      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d146      	bne.n	80030ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <HAL_RCC_OscConfig+0x4cc>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe ff93 	bl	8001f6c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe ff8f 	bl	8001f6c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e06d      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d108      	bne.n	8003084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4921      	ldr	r1, [pc, #132]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003084:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a19      	ldr	r1, [r3, #32]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	430b      	orrs	r3, r1
 8003096:	491b      	ldr	r1, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x4cc>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fe ff63 	bl	8001f6c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe ff5f 	bl	8001f6c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e03d      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x46a>
 80030c8:	e035      	b.n	8003136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_RCC_OscConfig+0x4cc>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe ff4c 	bl	8001f6c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe ff48 	bl	8001f6c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e026      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x498>
 80030f6:	e01e      	b.n	8003136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e019      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
 8003104:	40021000 	.word	0x40021000
 8003108:	40007000 	.word	0x40007000
 800310c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_OscConfig+0x500>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	429a      	cmp	r2, r3
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0d0      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d910      	bls.n	8003188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	4965      	ldr	r1, [pc, #404]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0b8      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a0:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	494d      	ldr	r1, [pc, #308]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d040      	beq.n	8003264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d115      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e07f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e073      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06b      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4936      	ldr	r1, [pc, #216]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003234:	f7fe fe9a 	bl	8001f6c <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe fe96 	bl	8001f6c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e053      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d210      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 0207 	bic.w	r2, r3, #7
 800327a:	4922      	ldr	r1, [pc, #136]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e032      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4916      	ldr	r1, [pc, #88]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032d2:	f000 f821 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490a      	ldr	r1, [pc, #40]	; (800330c <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1cc>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fdf8 	bl	8001ee8 <HAL_InitTick>

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40022000 	.word	0x40022000
 8003308:	40021000 	.word	0x40021000
 800330c:	08005c30 	.word	0x08005c30
 8003310:	20000000 	.word	0x20000000
 8003314:	20000004 	.word	0x20000004

08003318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d002      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x30>
 8003342:	2b08      	cmp	r3, #8
 8003344:	d003      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x36>
 8003346:	e027      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800334a:	613b      	str	r3, [r7, #16]
      break;
 800334c:	e027      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	0c9b      	lsrs	r3, r3, #18
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0c5b      	lsrs	r3, r3, #17
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800337a:	fb03 f202 	mul.w	r2, r3, r2
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e004      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	613b      	str	r3, [r7, #16]
      break;
 8003396:	e002      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800339a:	613b      	str	r3, [r7, #16]
      break;
 800339c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339e:	693b      	ldr	r3, [r7, #16]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	007a1200 	.word	0x007a1200
 80033b4:	08005c48 	.word	0x08005c48
 80033b8:	08005c58 	.word	0x08005c58
 80033bc:	003d0900 	.word	0x003d0900

080033c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c4:	4b02      	ldr	r3, [pc, #8]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	20000000 	.word	0x20000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff2 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	08005c40 	.word	0x08005c40

080033fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <RCC_Delay+0x34>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <RCC_Delay+0x38>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0a5b      	lsrs	r3, r3, #9
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003418:	bf00      	nop
  }
  while (Delay --);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	60fa      	str	r2, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <RCC_Delay+0x1c>
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	20000000 	.word	0x20000000
 8003434:	10624dd3 	.word	0x10624dd3

08003438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e041      	b.n	80034ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe fb88 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fd5a 	bl	8003f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e041      	b.n	800356c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f839 	bl	8003574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f000 fd0b 	bl	8003f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
	...

08003588 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e022      	b.n	80035fa <HAL_TIM_PWM_Start_DMA+0x72>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d109      	bne.n	80035ce <HAL_TIM_PWM_Start_DMA+0x46>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e015      	b.n	80035fa <HAL_TIM_PWM_Start_DMA+0x72>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d109      	bne.n	80035e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e008      	b.n	80035fa <HAL_TIM_PWM_Start_DMA+0x72>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	e153      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_TIM_PWM_Start_DMA+0x94>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e022      	b.n	8003662 <HAL_TIM_PWM_Start_DMA+0xda>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d109      	bne.n	8003636 <HAL_TIM_PWM_Start_DMA+0xae>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	e015      	b.n	8003662 <HAL_TIM_PWM_Start_DMA+0xda>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d109      	bne.n	8003650 <HAL_TIM_PWM_Start_DMA+0xc8>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e008      	b.n	8003662 <HAL_TIM_PWM_Start_DMA+0xda>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d024      	beq.n	80036b0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_TIM_PWM_Start_DMA+0xea>
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e119      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start_DMA+0xfe>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003684:	e016      	b.n	80036b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <HAL_TIM_PWM_Start_DMA+0x10e>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003694:	e00e      	b.n	80036b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_PWM_Start_DMA+0x11e>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	e006      	b.n	80036b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ae:	e001      	b.n	80036b4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0fa      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	f200 80ae 	bhi.w	8003818 <HAL_TIM_PWM_Start_DMA+0x290>
 80036bc:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	08003819 	.word	0x08003819
 80036cc:	08003819 	.word	0x08003819
 80036d0:	08003819 	.word	0x08003819
 80036d4:	08003741 	.word	0x08003741
 80036d8:	08003819 	.word	0x08003819
 80036dc:	08003819 	.word	0x08003819
 80036e0:	08003819 	.word	0x08003819
 80036e4:	08003789 	.word	0x08003789
 80036e8:	08003819 	.word	0x08003819
 80036ec:	08003819 	.word	0x08003819
 80036f0:	08003819 	.word	0x08003819
 80036f4:	080037d1 	.word	0x080037d1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	4a6d      	ldr	r2, [pc, #436]	; (80038b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	4a6c      	ldr	r2, [pc, #432]	; (80038b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	4a6b      	ldr	r2, [pc, #428]	; (80038bc <HAL_TIM_PWM_Start_DMA+0x334>)
 800370e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3334      	adds	r3, #52	; 0x34
 800371c:	461a      	mov	r2, r3
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	f7fe fdba 	bl	8002298 <HAL_DMA_Start_IT>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0bd      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	60da      	str	r2, [r3, #12]
      break;
 800373e:	e06e      	b.n	800381e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	4a5b      	ldr	r2, [pc, #364]	; (80038b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	4a5a      	ldr	r2, [pc, #360]	; (80038b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	4a59      	ldr	r2, [pc, #356]	; (80038bc <HAL_TIM_PWM_Start_DMA+0x334>)
 8003756:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3338      	adds	r3, #56	; 0x38
 8003764:	461a      	mov	r2, r3
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	f7fe fd96 	bl	8002298 <HAL_DMA_Start_IT>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e099      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003784:	60da      	str	r2, [r3, #12]
      break;
 8003786:	e04a      	b.n	800381e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a47      	ldr	r2, [pc, #284]	; (80038bc <HAL_TIM_PWM_Start_DMA+0x334>)
 800379e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	333c      	adds	r3, #60	; 0x3c
 80037ac:	461a      	mov	r2, r3
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	f7fe fd72 	bl	8002298 <HAL_DMA_Start_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e075      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037cc:	60da      	str	r2, [r3, #12]
      break;
 80037ce:	e026      	b.n	800381e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	4a37      	ldr	r2, [pc, #220]	; (80038b4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a36      	ldr	r2, [pc, #216]	; (80038b8 <HAL_TIM_PWM_Start_DMA+0x330>)
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	4a35      	ldr	r2, [pc, #212]	; (80038bc <HAL_TIM_PWM_Start_DMA+0x334>)
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3340      	adds	r3, #64	; 0x40
 80037f4:	461a      	mov	r2, r3
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	f7fe fd4e 	bl	8002298 <HAL_DMA_Start_IT>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e051      	b.n	80038aa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003814:	60da      	str	r2, [r3, #12]
      break;
 8003816:	e002      	b.n	800381e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
      break;
 800381c:	bf00      	nop
  }

  if (status == HAL_OK)
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d141      	bne.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fdff 	bl	8004430 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d107      	bne.n	800384c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d009      	beq.n	8003874 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d111      	bne.n	8003898 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d010      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	e007      	b.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	08003e21 	.word	0x08003e21
 80038b8:	08003ec9 	.word	0x08003ec9
 80038bc:	08003d8f 	.word	0x08003d8f
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800

080038cc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d855      	bhi.n	800398c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	0800398d 	.word	0x0800398d
 80038f0:	0800398d 	.word	0x0800398d
 80038f4:	0800398d 	.word	0x0800398d
 80038f8:	08003939 	.word	0x08003939
 80038fc:	0800398d 	.word	0x0800398d
 8003900:	0800398d 	.word	0x0800398d
 8003904:	0800398d 	.word	0x0800398d
 8003908:	08003955 	.word	0x08003955
 800390c:	0800398d 	.word	0x0800398d
 8003910:	0800398d 	.word	0x0800398d
 8003914:	0800398d 	.word	0x0800398d
 8003918:	08003971 	.word	0x08003971
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800392a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fd11 	bl	8002358 <HAL_DMA_Abort_IT>
      break;
 8003936:	e02c      	b.n	8003992 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fd03 	bl	8002358 <HAL_DMA_Abort_IT>
      break;
 8003952:	e01e      	b.n	8003992 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003962:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fcf5 	bl	8002358 <HAL_DMA_Abort_IT>
      break;
 800396e:	e010      	b.n	8003992 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800397e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fce7 	bl	8002358 <HAL_DMA_Abort_IT>
      break;
 800398a:	e002      	b.n	8003992 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	bf00      	nop
  }

  if (status == HAL_OK)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d157      	bne.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	6839      	ldr	r1, [r7, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fd45 	bl	8004430 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d117      	bne.n	80039e0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a1a      	ldr	r2, [r3, #32]
 80039b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10f      	bne.n	80039e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	f240 4344 	movw	r3, #1092	; 0x444
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a1a      	ldr	r2, [r3, #32]
 80039e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <HAL_TIM_PWM_Stop_DMA+0x144>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	f240 4344 	movw	r3, #1092	; 0x444
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a1e:	e013      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d104      	bne.n	8003a30 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a2e:	e00b      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d104      	bne.n	8003a40 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3e:	e003      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00

08003a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0ae      	b.n	8003bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	f200 809f 	bhi.w	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003bc5 	.word	0x08003bc5
 8003a94:	08003bc5 	.word	0x08003bc5
 8003a98:	08003bc5 	.word	0x08003bc5
 8003a9c:	08003b01 	.word	0x08003b01
 8003aa0:	08003bc5 	.word	0x08003bc5
 8003aa4:	08003bc5 	.word	0x08003bc5
 8003aa8:	08003bc5 	.word	0x08003bc5
 8003aac:	08003b43 	.word	0x08003b43
 8003ab0:	08003bc5 	.word	0x08003bc5
 8003ab4:	08003bc5 	.word	0x08003bc5
 8003ab8:	08003bc5 	.word	0x08003bc5
 8003abc:	08003b83 	.word	0x08003b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa94 	bl	8003ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0208 	orr.w	r2, r2, #8
 8003ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]
      break;
 8003afe:	e064      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fada 	bl	80040c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	619a      	str	r2, [r3, #24]
      break;
 8003b40:	e043      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fb23 	bl	8004194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0208 	orr.w	r2, r2, #8
 8003b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0204 	bic.w	r2, r2, #4
 8003b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
      break;
 8003b80:	e023      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fb6d 	bl	8004268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	021a      	lsls	r2, r3, #8
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	61da      	str	r2, [r3, #28]
      break;
 8003bc2:	e002      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0b4      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x186>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d03e      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	f200 8087 	bhi.w	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	f000 8086 	beq.w	8003d4e <HAL_TIM_ConfigClockSource+0x172>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d87f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b70      	cmp	r3, #112	; 0x70
 8003c4a:	d01a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xa6>
 8003c4c:	2b70      	cmp	r3, #112	; 0x70
 8003c4e:	d87b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d050      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c54:	2b60      	cmp	r3, #96	; 0x60
 8003c56:	d877      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b50      	cmp	r3, #80	; 0x50
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c5c:	2b50      	cmp	r3, #80	; 0x50
 8003c5e:	d873      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d058      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x13a>
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d86f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d064      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	2b30      	cmp	r3, #48	; 0x30
 8003c6e:	d86b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d060      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d867      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d05a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c80:	e062      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6899      	ldr	r1, [r3, #8]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f000 fbae 	bl	80043f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
      break;
 8003cae:	e04f      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f000 fb97 	bl	80043f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd2:	609a      	str	r2, [r3, #8]
      break;
 8003cd4:	e03c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 fb0e 	bl	8004304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2150      	movs	r1, #80	; 0x50
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fb65 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e02c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 fb2c 	bl	8004360 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2160      	movs	r1, #96	; 0x60
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fb55 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003d14:	e01c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 faee 	bl	8004304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fb45 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f000 fb3c 	bl	80043be <TIM_ITRx_SetConfig>
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d107      	bne.n	8003db6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db4:	e02a      	b.n	8003e0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dce:	e01d      	b.n	8003e0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d107      	bne.n	8003dea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	e010      	b.n	8003e0c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d107      	bne.n	8003e04 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2208      	movs	r2, #8
 8003df8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e02:	e003      	b.n	8003e0c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff ffb5 	bl	8003d7c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d10b      	bne.n	8003e50 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d136      	bne.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e4e:	e031      	b.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d10b      	bne.n	8003e72 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d125      	bne.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	e020      	b.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d10b      	bne.n	8003e94 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d114      	bne.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e92:	e00f      	b.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d10a      	bne.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7fd fb63 	bl	8001580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d103      	bne.n	8003ee8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	771a      	strb	r2, [r3, #28]
 8003ee6:	e019      	b.n	8003f1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d103      	bne.n	8003efa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	771a      	strb	r2, [r3, #28]
 8003ef8:	e010      	b.n	8003f1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d103      	bne.n	8003f0c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2204      	movs	r2, #4
 8003f08:	771a      	strb	r2, [r3, #28]
 8003f0a:	e007      	b.n	8003f1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d102      	bne.n	8003f1c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff ff24 	bl	8003d6a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <TIM_Base_SetConfig+0xb8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0x30>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0x30>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a26      	ldr	r2, [pc, #152]	; (8003fec <TIM_Base_SetConfig+0xbc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x30>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a25      	ldr	r2, [pc, #148]	; (8003ff0 <TIM_Base_SetConfig+0xc0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <TIM_Base_SetConfig+0xb8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_Base_SetConfig+0x62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d007      	beq.n	8003f92 <TIM_Base_SetConfig+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <TIM_Base_SetConfig+0xbc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_Base_SetConfig+0x62>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <TIM_Base_SetConfig+0xc0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d108      	bne.n	8003fa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <TIM_Base_SetConfig+0xb8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	615a      	str	r2, [r3, #20]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800

08003ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f023 0201 	bic.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0302 	bic.w	r3, r3, #2
 800403c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <TIM_OC1_SetConfig+0xc8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10c      	bne.n	800406a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0308 	bic.w	r3, r3, #8
 8004056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a13      	ldr	r2, [pc, #76]	; (80040bc <TIM_OC1_SetConfig+0xc8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d111      	bne.n	8004096 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00

080040c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f023 0210 	bic.w	r2, r3, #16
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0320 	bic.w	r3, r3, #32
 800410a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <TIM_OC2_SetConfig+0xd0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10d      	bne.n	800413c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a14      	ldr	r2, [pc, #80]	; (8004190 <TIM_OC2_SetConfig+0xd0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d113      	bne.n	800416c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800414a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	40012c00 	.word	0x40012c00

08004194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <TIM_OC3_SetConfig+0xd0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10d      	bne.n	800420e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <TIM_OC3_SetConfig+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d113      	bne.n	800423e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40012c00 	.word	0x40012c00

08004268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <TIM_OC4_SetConfig+0x98>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d109      	bne.n	80042dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00

08004304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 030a 	bic.w	r3, r3, #10
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0210 	bic.w	r2, r3, #16
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	031b      	lsls	r3, r3, #12
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800439c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	f043 0307 	orr.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b087      	sub	sp, #28
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800440c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	021a      	lsls	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	431a      	orrs	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4313      	orrs	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	609a      	str	r2, [r3, #8]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2201      	movs	r2, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	43db      	mvns	r3, r3
 8004452:	401a      	ands	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800448c:	2302      	movs	r3, #2
 800448e:	e046      	b.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d009      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a12      	ldr	r2, [pc, #72]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a10      	ldr	r2, [pc, #64]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10c      	bne.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4313      	orrs	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800

08004534 <_Znwj>:
 8004534:	2801      	cmp	r0, #1
 8004536:	bf38      	it	cc
 8004538:	2001      	movcc	r0, #1
 800453a:	b510      	push	{r4, lr}
 800453c:	4604      	mov	r4, r0
 800453e:	4620      	mov	r0, r4
 8004540:	f001 fa62 	bl	8005a08 <malloc>
 8004544:	b930      	cbnz	r0, 8004554 <_Znwj+0x20>
 8004546:	f000 f807 	bl	8004558 <_ZSt15get_new_handlerv>
 800454a:	b908      	cbnz	r0, 8004550 <_Znwj+0x1c>
 800454c:	f001 fa2a 	bl	80059a4 <abort>
 8004550:	4780      	blx	r0
 8004552:	e7f4      	b.n	800453e <_Znwj+0xa>
 8004554:	bd10      	pop	{r4, pc}
	...

08004558 <_ZSt15get_new_handlerv>:
 8004558:	4b02      	ldr	r3, [pc, #8]	; (8004564 <_ZSt15get_new_handlerv+0xc>)
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	f3bf 8f5b 	dmb	ish
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000049c 	.word	0x2000049c

08004568 <sin>:
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	4a20      	ldr	r2, [pc, #128]	; (80045ec <sin+0x84>)
 800456c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004570:	4293      	cmp	r3, r2
 8004572:	b087      	sub	sp, #28
 8004574:	dc06      	bgt.n	8004584 <sin+0x1c>
 8004576:	2300      	movs	r3, #0
 8004578:	2200      	movs	r2, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	f000 fe5b 	bl	8005238 <__kernel_sin>
 8004582:	e006      	b.n	8004592 <sin+0x2a>
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <sin+0x88>)
 8004586:	4293      	cmp	r3, r2
 8004588:	dd05      	ble.n	8004596 <sin+0x2e>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	f7fb fe97 	bl	80002c0 <__aeabi_dsub>
 8004592:	b007      	add	sp, #28
 8004594:	bd30      	pop	{r4, r5, pc}
 8004596:	aa02      	add	r2, sp, #8
 8004598:	f000 f856 	bl	8004648 <__ieee754_rem_pio2>
 800459c:	f000 0003 	and.w	r0, r0, #3
 80045a0:	2801      	cmp	r0, #1
 80045a2:	d009      	beq.n	80045b8 <sin+0x50>
 80045a4:	2802      	cmp	r0, #2
 80045a6:	d00e      	beq.n	80045c6 <sin+0x5e>
 80045a8:	b9c0      	cbnz	r0, 80045dc <sin+0x74>
 80045aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ae:	2301      	movs	r3, #1
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045b6:	e7e2      	b.n	800457e <sin+0x16>
 80045b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c0:	f000 fa3a 	bl	8004a38 <__kernel_cos>
 80045c4:	e7e5      	b.n	8004592 <sin+0x2a>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045d2:	f000 fe31 	bl	8005238 <__kernel_sin>
 80045d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80045da:	e7da      	b.n	8004592 <sin+0x2a>
 80045dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045e4:	f000 fa28 	bl	8004a38 <__kernel_cos>
 80045e8:	e7f5      	b.n	80045d6 <sin+0x6e>
 80045ea:	bf00      	nop
 80045ec:	3fe921fb 	.word	0x3fe921fb
 80045f0:	7fefffff 	.word	0x7fefffff

080045f4 <tan>:
 80045f4:	b530      	push	{r4, r5, lr}
 80045f6:	4a12      	ldr	r2, [pc, #72]	; (8004640 <tan+0x4c>)
 80045f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045fc:	4293      	cmp	r3, r2
 80045fe:	b087      	sub	sp, #28
 8004600:	dc06      	bgt.n	8004610 <tan+0x1c>
 8004602:	2301      	movs	r3, #1
 8004604:	2200      	movs	r2, #0
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2300      	movs	r3, #0
 800460a:	f000 fecd 	bl	80053a8 <__kernel_tan>
 800460e:	e006      	b.n	800461e <tan+0x2a>
 8004610:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <tan+0x50>)
 8004612:	4293      	cmp	r3, r2
 8004614:	dd05      	ble.n	8004622 <tan+0x2e>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	f7fb fe51 	bl	80002c0 <__aeabi_dsub>
 800461e:	b007      	add	sp, #28
 8004620:	bd30      	pop	{r4, r5, pc}
 8004622:	aa02      	add	r2, sp, #8
 8004624:	f000 f810 	bl	8004648 <__ieee754_rem_pio2>
 8004628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800462c:	0040      	lsls	r0, r0, #1
 800462e:	f000 0002 	and.w	r0, r0, #2
 8004632:	f1c0 0001 	rsb	r0, r0, #1
 8004636:	9000      	str	r0, [sp, #0]
 8004638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800463c:	e7e5      	b.n	800460a <tan+0x16>
 800463e:	bf00      	nop
 8004640:	3fe921fb 	.word	0x3fe921fb
 8004644:	7fefffff 	.word	0x7fefffff

08004648 <__ieee754_rem_pio2>:
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	4614      	mov	r4, r2
 800464e:	4ac4      	ldr	r2, [pc, #784]	; (8004960 <__ieee754_rem_pio2+0x318>)
 8004650:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004654:	b08d      	sub	sp, #52	; 0x34
 8004656:	4592      	cmp	sl, r2
 8004658:	9104      	str	r1, [sp, #16]
 800465a:	dc07      	bgt.n	800466c <__ieee754_rem_pio2+0x24>
 800465c:	2200      	movs	r2, #0
 800465e:	2300      	movs	r3, #0
 8004660:	e9c4 0100 	strd	r0, r1, [r4]
 8004664:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004668:	2500      	movs	r5, #0
 800466a:	e024      	b.n	80046b6 <__ieee754_rem_pio2+0x6e>
 800466c:	4abd      	ldr	r2, [pc, #756]	; (8004964 <__ieee754_rem_pio2+0x31c>)
 800466e:	4592      	cmp	sl, r2
 8004670:	dc72      	bgt.n	8004758 <__ieee754_rem_pio2+0x110>
 8004672:	9b04      	ldr	r3, [sp, #16]
 8004674:	4dbc      	ldr	r5, [pc, #752]	; (8004968 <__ieee754_rem_pio2+0x320>)
 8004676:	2b00      	cmp	r3, #0
 8004678:	a3ab      	add	r3, pc, #684	; (adr r3, 8004928 <__ieee754_rem_pio2+0x2e0>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	dd36      	ble.n	80046ee <__ieee754_rem_pio2+0xa6>
 8004680:	f7fb fe1e 	bl	80002c0 <__aeabi_dsub>
 8004684:	45aa      	cmp	sl, r5
 8004686:	4606      	mov	r6, r0
 8004688:	460f      	mov	r7, r1
 800468a:	d018      	beq.n	80046be <__ieee754_rem_pio2+0x76>
 800468c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004930 <__ieee754_rem_pio2+0x2e8>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb fe15 	bl	80002c0 <__aeabi_dsub>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4630      	mov	r0, r6
 800469c:	e9c4 2300 	strd	r2, r3, [r4]
 80046a0:	4639      	mov	r1, r7
 80046a2:	f7fb fe0d 	bl	80002c0 <__aeabi_dsub>
 80046a6:	a3a2      	add	r3, pc, #648	; (adr r3, 8004930 <__ieee754_rem_pio2+0x2e8>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb fe08 	bl	80002c0 <__aeabi_dsub>
 80046b0:	2501      	movs	r5, #1
 80046b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046b6:	4628      	mov	r0, r5
 80046b8:	b00d      	add	sp, #52	; 0x34
 80046ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046be:	a39e      	add	r3, pc, #632	; (adr r3, 8004938 <__ieee754_rem_pio2+0x2f0>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb fdfc 	bl	80002c0 <__aeabi_dsub>
 80046c8:	a39d      	add	r3, pc, #628	; (adr r3, 8004940 <__ieee754_rem_pio2+0x2f8>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	4606      	mov	r6, r0
 80046d0:	460f      	mov	r7, r1
 80046d2:	f7fb fdf5 	bl	80002c0 <__aeabi_dsub>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4630      	mov	r0, r6
 80046dc:	e9c4 2300 	strd	r2, r3, [r4]
 80046e0:	4639      	mov	r1, r7
 80046e2:	f7fb fded 	bl	80002c0 <__aeabi_dsub>
 80046e6:	a396      	add	r3, pc, #600	; (adr r3, 8004940 <__ieee754_rem_pio2+0x2f8>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	e7de      	b.n	80046ac <__ieee754_rem_pio2+0x64>
 80046ee:	f7fb fde9 	bl	80002c4 <__adddf3>
 80046f2:	45aa      	cmp	sl, r5
 80046f4:	4606      	mov	r6, r0
 80046f6:	460f      	mov	r7, r1
 80046f8:	d016      	beq.n	8004728 <__ieee754_rem_pio2+0xe0>
 80046fa:	a38d      	add	r3, pc, #564	; (adr r3, 8004930 <__ieee754_rem_pio2+0x2e8>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fb fde0 	bl	80002c4 <__adddf3>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4630      	mov	r0, r6
 800470a:	e9c4 2300 	strd	r2, r3, [r4]
 800470e:	4639      	mov	r1, r7
 8004710:	f7fb fdd6 	bl	80002c0 <__aeabi_dsub>
 8004714:	a386      	add	r3, pc, #536	; (adr r3, 8004930 <__ieee754_rem_pio2+0x2e8>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f7fb fdd3 	bl	80002c4 <__adddf3>
 800471e:	f04f 35ff 	mov.w	r5, #4294967295
 8004722:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004726:	e7c6      	b.n	80046b6 <__ieee754_rem_pio2+0x6e>
 8004728:	a383      	add	r3, pc, #524	; (adr r3, 8004938 <__ieee754_rem_pio2+0x2f0>)
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f7fb fdc9 	bl	80002c4 <__adddf3>
 8004732:	a383      	add	r3, pc, #524	; (adr r3, 8004940 <__ieee754_rem_pio2+0x2f8>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	4606      	mov	r6, r0
 800473a:	460f      	mov	r7, r1
 800473c:	f7fb fdc2 	bl	80002c4 <__adddf3>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4630      	mov	r0, r6
 8004746:	e9c4 2300 	strd	r2, r3, [r4]
 800474a:	4639      	mov	r1, r7
 800474c:	f7fb fdb8 	bl	80002c0 <__aeabi_dsub>
 8004750:	a37b      	add	r3, pc, #492	; (adr r3, 8004940 <__ieee754_rem_pio2+0x2f8>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	e7e0      	b.n	800471a <__ieee754_rem_pio2+0xd2>
 8004758:	4a84      	ldr	r2, [pc, #528]	; (800496c <__ieee754_rem_pio2+0x324>)
 800475a:	4592      	cmp	sl, r2
 800475c:	f300 80d5 	bgt.w	800490a <__ieee754_rem_pio2+0x2c2>
 8004760:	f001 f81e 	bl	80057a0 <fabs>
 8004764:	a378      	add	r3, pc, #480	; (adr r3, 8004948 <__ieee754_rem_pio2+0x300>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	4606      	mov	r6, r0
 800476c:	460f      	mov	r7, r1
 800476e:	f7fb ff5f 	bl	8000630 <__aeabi_dmul>
 8004772:	2200      	movs	r2, #0
 8004774:	4b7e      	ldr	r3, [pc, #504]	; (8004970 <__ieee754_rem_pio2+0x328>)
 8004776:	f7fb fda5 	bl	80002c4 <__adddf3>
 800477a:	f7fc f9f3 	bl	8000b64 <__aeabi_d2iz>
 800477e:	4605      	mov	r5, r0
 8004780:	f7fb feec 	bl	800055c <__aeabi_i2d>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800478c:	a366      	add	r3, pc, #408	; (adr r3, 8004928 <__ieee754_rem_pio2+0x2e0>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb ff4d 	bl	8000630 <__aeabi_dmul>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4630      	mov	r0, r6
 800479c:	4639      	mov	r1, r7
 800479e:	f7fb fd8f 	bl	80002c0 <__aeabi_dsub>
 80047a2:	a363      	add	r3, pc, #396	; (adr r3, 8004930 <__ieee754_rem_pio2+0x2e8>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	4680      	mov	r8, r0
 80047aa:	4689      	mov	r9, r1
 80047ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047b0:	f7fb ff3e 	bl	8000630 <__aeabi_dmul>
 80047b4:	2d1f      	cmp	r5, #31
 80047b6:	4606      	mov	r6, r0
 80047b8:	460f      	mov	r7, r1
 80047ba:	dc0e      	bgt.n	80047da <__ieee754_rem_pio2+0x192>
 80047bc:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <__ieee754_rem_pio2+0x32c>)
 80047be:	1e6a      	subs	r2, r5, #1
 80047c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c4:	4553      	cmp	r3, sl
 80047c6:	d008      	beq.n	80047da <__ieee754_rem_pio2+0x192>
 80047c8:	4632      	mov	r2, r6
 80047ca:	463b      	mov	r3, r7
 80047cc:	4640      	mov	r0, r8
 80047ce:	4649      	mov	r1, r9
 80047d0:	f7fb fd76 	bl	80002c0 <__aeabi_dsub>
 80047d4:	e9c4 0100 	strd	r0, r1, [r4]
 80047d8:	e013      	b.n	8004802 <__ieee754_rem_pio2+0x1ba>
 80047da:	463b      	mov	r3, r7
 80047dc:	4632      	mov	r2, r6
 80047de:	4640      	mov	r0, r8
 80047e0:	4649      	mov	r1, r9
 80047e2:	f7fb fd6d 	bl	80002c0 <__aeabi_dsub>
 80047e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80047ea:	9305      	str	r3, [sp, #20]
 80047ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80047f4:	f1ba 0f10 	cmp.w	sl, #16
 80047f8:	dc1f      	bgt.n	800483a <__ieee754_rem_pio2+0x1f2>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	e9c4 2300 	strd	r2, r3, [r4]
 8004802:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004806:	4640      	mov	r0, r8
 8004808:	4653      	mov	r3, sl
 800480a:	4649      	mov	r1, r9
 800480c:	f7fb fd58 	bl	80002c0 <__aeabi_dsub>
 8004810:	4632      	mov	r2, r6
 8004812:	463b      	mov	r3, r7
 8004814:	f7fb fd54 	bl	80002c0 <__aeabi_dsub>
 8004818:	460b      	mov	r3, r1
 800481a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800481e:	9904      	ldr	r1, [sp, #16]
 8004820:	4602      	mov	r2, r0
 8004822:	2900      	cmp	r1, #0
 8004824:	f6bf af47 	bge.w	80046b6 <__ieee754_rem_pio2+0x6e>
 8004828:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800482c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004834:	60e3      	str	r3, [r4, #12]
 8004836:	426d      	negs	r5, r5
 8004838:	e73d      	b.n	80046b6 <__ieee754_rem_pio2+0x6e>
 800483a:	a33f      	add	r3, pc, #252	; (adr r3, 8004938 <__ieee754_rem_pio2+0x2f0>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004844:	f7fb fef4 	bl	8000630 <__aeabi_dmul>
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4640      	mov	r0, r8
 8004852:	4649      	mov	r1, r9
 8004854:	f7fb fd34 	bl	80002c0 <__aeabi_dsub>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4682      	mov	sl, r0
 800485e:	468b      	mov	fp, r1
 8004860:	4640      	mov	r0, r8
 8004862:	4649      	mov	r1, r9
 8004864:	f7fb fd2c 	bl	80002c0 <__aeabi_dsub>
 8004868:	4632      	mov	r2, r6
 800486a:	463b      	mov	r3, r7
 800486c:	f7fb fd28 	bl	80002c0 <__aeabi_dsub>
 8004870:	a333      	add	r3, pc, #204	; (adr r3, 8004940 <__ieee754_rem_pio2+0x2f8>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	4606      	mov	r6, r0
 8004878:	460f      	mov	r7, r1
 800487a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800487e:	f7fb fed7 	bl	8000630 <__aeabi_dmul>
 8004882:	4632      	mov	r2, r6
 8004884:	463b      	mov	r3, r7
 8004886:	f7fb fd1b 	bl	80002c0 <__aeabi_dsub>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4606      	mov	r6, r0
 8004890:	460f      	mov	r7, r1
 8004892:	4650      	mov	r0, sl
 8004894:	4659      	mov	r1, fp
 8004896:	f7fb fd13 	bl	80002c0 <__aeabi_dsub>
 800489a:	9a05      	ldr	r2, [sp, #20]
 800489c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b31      	cmp	r3, #49	; 0x31
 80048a4:	dc06      	bgt.n	80048b4 <__ieee754_rem_pio2+0x26c>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	46d0      	mov	r8, sl
 80048ac:	46d9      	mov	r9, fp
 80048ae:	e9c4 2300 	strd	r2, r3, [r4]
 80048b2:	e7a6      	b.n	8004802 <__ieee754_rem_pio2+0x1ba>
 80048b4:	a326      	add	r3, pc, #152	; (adr r3, 8004950 <__ieee754_rem_pio2+0x308>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048be:	f7fb feb7 	bl	8000630 <__aeabi_dmul>
 80048c2:	4606      	mov	r6, r0
 80048c4:	460f      	mov	r7, r1
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4650      	mov	r0, sl
 80048cc:	4659      	mov	r1, fp
 80048ce:	f7fb fcf7 	bl	80002c0 <__aeabi_dsub>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4680      	mov	r8, r0
 80048d8:	4689      	mov	r9, r1
 80048da:	4650      	mov	r0, sl
 80048dc:	4659      	mov	r1, fp
 80048de:	f7fb fcef 	bl	80002c0 <__aeabi_dsub>
 80048e2:	4632      	mov	r2, r6
 80048e4:	463b      	mov	r3, r7
 80048e6:	f7fb fceb 	bl	80002c0 <__aeabi_dsub>
 80048ea:	a31b      	add	r3, pc, #108	; (adr r3, 8004958 <__ieee754_rem_pio2+0x310>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	4606      	mov	r6, r0
 80048f2:	460f      	mov	r7, r1
 80048f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f8:	f7fb fe9a 	bl	8000630 <__aeabi_dmul>
 80048fc:	4632      	mov	r2, r6
 80048fe:	463b      	mov	r3, r7
 8004900:	f7fb fcde 	bl	80002c0 <__aeabi_dsub>
 8004904:	4606      	mov	r6, r0
 8004906:	460f      	mov	r7, r1
 8004908:	e75e      	b.n	80047c8 <__ieee754_rem_pio2+0x180>
 800490a:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <__ieee754_rem_pio2+0x330>)
 800490c:	4592      	cmp	sl, r2
 800490e:	dd35      	ble.n	800497c <__ieee754_rem_pio2+0x334>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	f7fb fcd4 	bl	80002c0 <__aeabi_dsub>
 8004918:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800491c:	e9c4 0100 	strd	r0, r1, [r4]
 8004920:	e6a2      	b.n	8004668 <__ieee754_rem_pio2+0x20>
 8004922:	bf00      	nop
 8004924:	f3af 8000 	nop.w
 8004928:	54400000 	.word	0x54400000
 800492c:	3ff921fb 	.word	0x3ff921fb
 8004930:	1a626331 	.word	0x1a626331
 8004934:	3dd0b461 	.word	0x3dd0b461
 8004938:	1a600000 	.word	0x1a600000
 800493c:	3dd0b461 	.word	0x3dd0b461
 8004940:	2e037073 	.word	0x2e037073
 8004944:	3ba3198a 	.word	0x3ba3198a
 8004948:	6dc9c883 	.word	0x6dc9c883
 800494c:	3fe45f30 	.word	0x3fe45f30
 8004950:	2e000000 	.word	0x2e000000
 8004954:	3ba3198a 	.word	0x3ba3198a
 8004958:	252049c1 	.word	0x252049c1
 800495c:	397b839a 	.word	0x397b839a
 8004960:	3fe921fb 	.word	0x3fe921fb
 8004964:	4002d97b 	.word	0x4002d97b
 8004968:	3ff921fb 	.word	0x3ff921fb
 800496c:	413921fb 	.word	0x413921fb
 8004970:	3fe00000 	.word	0x3fe00000
 8004974:	08005c5c 	.word	0x08005c5c
 8004978:	7fefffff 	.word	0x7fefffff
 800497c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004980:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004984:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004988:	460f      	mov	r7, r1
 800498a:	4606      	mov	r6, r0
 800498c:	f7fc f8ea 	bl	8000b64 <__aeabi_d2iz>
 8004990:	f7fb fde4 	bl	800055c <__aeabi_i2d>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049a0:	f7fb fc8e 	bl	80002c0 <__aeabi_dsub>
 80049a4:	2200      	movs	r2, #0
 80049a6:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <__ieee754_rem_pio2+0x3e8>)
 80049a8:	f7fb fe42 	bl	8000630 <__aeabi_dmul>
 80049ac:	460f      	mov	r7, r1
 80049ae:	4606      	mov	r6, r0
 80049b0:	f7fc f8d8 	bl	8000b64 <__aeabi_d2iz>
 80049b4:	f7fb fdd2 	bl	800055c <__aeabi_i2d>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4630      	mov	r0, r6
 80049be:	4639      	mov	r1, r7
 80049c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049c4:	f7fb fc7c 	bl	80002c0 <__aeabi_dsub>
 80049c8:	2200      	movs	r2, #0
 80049ca:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <__ieee754_rem_pio2+0x3e8>)
 80049cc:	f7fb fe30 	bl	8000630 <__aeabi_dmul>
 80049d0:	f04f 0803 	mov.w	r8, #3
 80049d4:	2600      	movs	r6, #0
 80049d6:	2700      	movs	r7, #0
 80049d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80049e0:	4632      	mov	r2, r6
 80049e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80049e6:	463b      	mov	r3, r7
 80049e8:	46c2      	mov	sl, r8
 80049ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80049ee:	f7fc f887 	bl	8000b00 <__aeabi_dcmpeq>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d1f4      	bne.n	80049e0 <__ieee754_rem_pio2+0x398>
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <__ieee754_rem_pio2+0x3ec>)
 80049f8:	462a      	mov	r2, r5
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	2302      	movs	r3, #2
 80049fe:	4621      	mov	r1, r4
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	a806      	add	r0, sp, #24
 8004a04:	4653      	mov	r3, sl
 8004a06:	f000 f8d5 	bl	8004bb4 <__kernel_rem_pio2>
 8004a0a:	9b04      	ldr	r3, [sp, #16]
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f6bf ae51 	bge.w	80046b6 <__ieee754_rem_pio2+0x6e>
 8004a14:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004a18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a1c:	e9c4 2300 	strd	r2, r3, [r4]
 8004a20:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004a24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a28:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004a2c:	e703      	b.n	8004836 <__ieee754_rem_pio2+0x1ee>
 8004a2e:	bf00      	nop
 8004a30:	41700000 	.word	0x41700000
 8004a34:	08005cdc 	.word	0x08005cdc

08004a38 <__kernel_cos>:
 8004a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004a40:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004a44:	4680      	mov	r8, r0
 8004a46:	460f      	mov	r7, r1
 8004a48:	e9cd 2300 	strd	r2, r3, [sp]
 8004a4c:	da04      	bge.n	8004a58 <__kernel_cos+0x20>
 8004a4e:	f7fc f889 	bl	8000b64 <__aeabi_d2iz>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	f000 8086 	beq.w	8004b64 <__kernel_cos+0x12c>
 8004a58:	4642      	mov	r2, r8
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4639      	mov	r1, r7
 8004a60:	f7fb fde6 	bl	8000630 <__aeabi_dmul>
 8004a64:	2200      	movs	r2, #0
 8004a66:	4b4e      	ldr	r3, [pc, #312]	; (8004ba0 <__kernel_cos+0x168>)
 8004a68:	4604      	mov	r4, r0
 8004a6a:	460d      	mov	r5, r1
 8004a6c:	f7fb fde0 	bl	8000630 <__aeabi_dmul>
 8004a70:	a33f      	add	r3, pc, #252	; (adr r3, 8004b70 <__kernel_cos+0x138>)
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	4682      	mov	sl, r0
 8004a78:	468b      	mov	fp, r1
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	f7fb fdd7 	bl	8000630 <__aeabi_dmul>
 8004a82:	a33d      	add	r3, pc, #244	; (adr r3, 8004b78 <__kernel_cos+0x140>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f7fb fc1c 	bl	80002c4 <__adddf3>
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	462b      	mov	r3, r5
 8004a90:	f7fb fdce 	bl	8000630 <__aeabi_dmul>
 8004a94:	a33a      	add	r3, pc, #232	; (adr r3, 8004b80 <__kernel_cos+0x148>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fc11 	bl	80002c0 <__aeabi_dsub>
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	f7fb fdc5 	bl	8000630 <__aeabi_dmul>
 8004aa6:	a338      	add	r3, pc, #224	; (adr r3, 8004b88 <__kernel_cos+0x150>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fc0a 	bl	80002c4 <__adddf3>
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	f7fb fdbc 	bl	8000630 <__aeabi_dmul>
 8004ab8:	a335      	add	r3, pc, #212	; (adr r3, 8004b90 <__kernel_cos+0x158>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fbff 	bl	80002c0 <__aeabi_dsub>
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	f7fb fdb3 	bl	8000630 <__aeabi_dmul>
 8004aca:	a333      	add	r3, pc, #204	; (adr r3, 8004b98 <__kernel_cos+0x160>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fbf8 	bl	80002c4 <__adddf3>
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	f7fb fdaa 	bl	8000630 <__aeabi_dmul>
 8004adc:	4622      	mov	r2, r4
 8004ade:	462b      	mov	r3, r5
 8004ae0:	f7fb fda6 	bl	8000630 <__aeabi_dmul>
 8004ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ae8:	4604      	mov	r4, r0
 8004aea:	460d      	mov	r5, r1
 8004aec:	4640      	mov	r0, r8
 8004aee:	4639      	mov	r1, r7
 8004af0:	f7fb fd9e 	bl	8000630 <__aeabi_dmul>
 8004af4:	460b      	mov	r3, r1
 8004af6:	4602      	mov	r2, r0
 8004af8:	4629      	mov	r1, r5
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7fb fbe0 	bl	80002c0 <__aeabi_dsub>
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <__kernel_cos+0x16c>)
 8004b02:	4680      	mov	r8, r0
 8004b04:	429e      	cmp	r6, r3
 8004b06:	4689      	mov	r9, r1
 8004b08:	dc0e      	bgt.n	8004b28 <__kernel_cos+0xf0>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4650      	mov	r0, sl
 8004b10:	4659      	mov	r1, fp
 8004b12:	f7fb fbd5 	bl	80002c0 <__aeabi_dsub>
 8004b16:	4602      	mov	r2, r0
 8004b18:	2000      	movs	r0, #0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4922      	ldr	r1, [pc, #136]	; (8004ba8 <__kernel_cos+0x170>)
 8004b1e:	f7fb fbcf 	bl	80002c0 <__aeabi_dsub>
 8004b22:	b003      	add	sp, #12
 8004b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b28:	2400      	movs	r4, #0
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <__kernel_cos+0x174>)
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	429e      	cmp	r6, r3
 8004b30:	bfcc      	ite	gt
 8004b32:	4d1f      	ldrgt	r5, [pc, #124]	; (8004bb0 <__kernel_cos+0x178>)
 8004b34:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004b38:	462b      	mov	r3, r5
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	491a      	ldr	r1, [pc, #104]	; (8004ba8 <__kernel_cos+0x170>)
 8004b3e:	f7fb fbbf 	bl	80002c0 <__aeabi_dsub>
 8004b42:	4622      	mov	r2, r4
 8004b44:	4606      	mov	r6, r0
 8004b46:	460f      	mov	r7, r1
 8004b48:	462b      	mov	r3, r5
 8004b4a:	4650      	mov	r0, sl
 8004b4c:	4659      	mov	r1, fp
 8004b4e:	f7fb fbb7 	bl	80002c0 <__aeabi_dsub>
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	f7fb fbb3 	bl	80002c0 <__aeabi_dsub>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4630      	mov	r0, r6
 8004b60:	4639      	mov	r1, r7
 8004b62:	e7dc      	b.n	8004b1e <__kernel_cos+0xe6>
 8004b64:	2000      	movs	r0, #0
 8004b66:	4910      	ldr	r1, [pc, #64]	; (8004ba8 <__kernel_cos+0x170>)
 8004b68:	e7db      	b.n	8004b22 <__kernel_cos+0xea>
 8004b6a:	bf00      	nop
 8004b6c:	f3af 8000 	nop.w
 8004b70:	be8838d4 	.word	0xbe8838d4
 8004b74:	bda8fae9 	.word	0xbda8fae9
 8004b78:	bdb4b1c4 	.word	0xbdb4b1c4
 8004b7c:	3e21ee9e 	.word	0x3e21ee9e
 8004b80:	809c52ad 	.word	0x809c52ad
 8004b84:	3e927e4f 	.word	0x3e927e4f
 8004b88:	19cb1590 	.word	0x19cb1590
 8004b8c:	3efa01a0 	.word	0x3efa01a0
 8004b90:	16c15177 	.word	0x16c15177
 8004b94:	3f56c16c 	.word	0x3f56c16c
 8004b98:	5555554c 	.word	0x5555554c
 8004b9c:	3fa55555 	.word	0x3fa55555
 8004ba0:	3fe00000 	.word	0x3fe00000
 8004ba4:	3fd33332 	.word	0x3fd33332
 8004ba8:	3ff00000 	.word	0x3ff00000
 8004bac:	3fe90000 	.word	0x3fe90000
 8004bb0:	3fd20000 	.word	0x3fd20000

08004bb4 <__kernel_rem_pio2>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004bbc:	9308      	str	r3, [sp, #32]
 8004bbe:	9106      	str	r1, [sp, #24]
 8004bc0:	4bb6      	ldr	r3, [pc, #728]	; (8004e9c <__kernel_rem_pio2+0x2e8>)
 8004bc2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004bc4:	f112 0f14 	cmn.w	r2, #20
 8004bc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004bcc:	bfa8      	it	ge
 8004bce:	1ed4      	subge	r4, r2, #3
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	9b08      	ldr	r3, [sp, #32]
 8004bd4:	bfb8      	it	lt
 8004bd6:	2400      	movlt	r4, #0
 8004bd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bdc:	9307      	str	r3, [sp, #28]
 8004bde:	bfa4      	itt	ge
 8004be0:	2318      	movge	r3, #24
 8004be2:	fb94 f4f3 	sdivge	r4, r4, r3
 8004be6:	f06f 0317 	mvn.w	r3, #23
 8004bea:	fb04 3303 	mla	r3, r4, r3, r3
 8004bee:	eb03 0b02 	add.w	fp, r3, r2
 8004bf2:	9a07      	ldr	r2, [sp, #28]
 8004bf4:	9b02      	ldr	r3, [sp, #8]
 8004bf6:	1aa7      	subs	r7, r4, r2
 8004bf8:	eb03 0802 	add.w	r8, r3, r2
 8004bfc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004bfe:	2500      	movs	r5, #0
 8004c00:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004c04:	2200      	movs	r2, #0
 8004c06:	2300      	movs	r3, #0
 8004c08:	9009      	str	r0, [sp, #36]	; 0x24
 8004c0a:	ae20      	add	r6, sp, #128	; 0x80
 8004c0c:	4545      	cmp	r5, r8
 8004c0e:	dd14      	ble.n	8004c3a <__kernel_rem_pio2+0x86>
 8004c10:	f04f 0800 	mov.w	r8, #0
 8004c14:	9a08      	ldr	r2, [sp, #32]
 8004c16:	ab20      	add	r3, sp, #128	; 0x80
 8004c18:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004c1c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8004c20:	9b02      	ldr	r3, [sp, #8]
 8004c22:	4598      	cmp	r8, r3
 8004c24:	dc35      	bgt.n	8004c92 <__kernel_rem_pio2+0xde>
 8004c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f1a3 0908 	sub.w	r9, r3, #8
 8004c2e:	2300      	movs	r3, #0
 8004c30:	462f      	mov	r7, r5
 8004c32:	2600      	movs	r6, #0
 8004c34:	e9cd 2300 	strd	r2, r3, [sp]
 8004c38:	e01f      	b.n	8004c7a <__kernel_rem_pio2+0xc6>
 8004c3a:	42ef      	cmn	r7, r5
 8004c3c:	d40b      	bmi.n	8004c56 <__kernel_rem_pio2+0xa2>
 8004c3e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004c42:	e9cd 2300 	strd	r2, r3, [sp]
 8004c46:	f7fb fc89 	bl	800055c <__aeabi_i2d>
 8004c4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c4e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004c52:	3501      	adds	r5, #1
 8004c54:	e7da      	b.n	8004c0c <__kernel_rem_pio2+0x58>
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	e7f8      	b.n	8004c4e <__kernel_rem_pio2+0x9a>
 8004c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c60:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004c64:	f7fb fce4 	bl	8000630 <__aeabi_dmul>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c70:	f7fb fb28 	bl	80002c4 <__adddf3>
 8004c74:	e9cd 0100 	strd	r0, r1, [sp]
 8004c78:	3601      	adds	r6, #1
 8004c7a:	9b07      	ldr	r3, [sp, #28]
 8004c7c:	3f08      	subs	r7, #8
 8004c7e:	429e      	cmp	r6, r3
 8004c80:	ddec      	ble.n	8004c5c <__kernel_rem_pio2+0xa8>
 8004c82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c86:	f108 0801 	add.w	r8, r8, #1
 8004c8a:	e8ea 2302 	strd	r2, r3, [sl], #8
 8004c8e:	3508      	adds	r5, #8
 8004c90:	e7c6      	b.n	8004c20 <__kernel_rem_pio2+0x6c>
 8004c92:	9b02      	ldr	r3, [sp, #8]
 8004c94:	aa0c      	add	r2, sp, #48	; 0x30
 8004c96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c9c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004c9e:	9e02      	ldr	r6, [sp, #8]
 8004ca0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004ca4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ca6:	ab98      	add	r3, sp, #608	; 0x260
 8004ca8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cac:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004cb0:	ab70      	add	r3, sp, #448	; 0x1c0
 8004cb2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004cb6:	46d0      	mov	r8, sl
 8004cb8:	46b1      	mov	r9, r6
 8004cba:	af0c      	add	r7, sp, #48	; 0x30
 8004cbc:	9700      	str	r7, [sp, #0]
 8004cbe:	f1b9 0f00 	cmp.w	r9, #0
 8004cc2:	f1a8 0808 	sub.w	r8, r8, #8
 8004cc6:	dc71      	bgt.n	8004dac <__kernel_rem_pio2+0x1f8>
 8004cc8:	465a      	mov	r2, fp
 8004cca:	4620      	mov	r0, r4
 8004ccc:	4629      	mov	r1, r5
 8004cce:	f000 fdeb 	bl	80058a8 <scalbn>
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004cd8:	4604      	mov	r4, r0
 8004cda:	460d      	mov	r5, r1
 8004cdc:	f7fb fca8 	bl	8000630 <__aeabi_dmul>
 8004ce0:	f000 fd62 	bl	80057a8 <floor>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4b6e      	ldr	r3, [pc, #440]	; (8004ea0 <__kernel_rem_pio2+0x2ec>)
 8004ce8:	f7fb fca2 	bl	8000630 <__aeabi_dmul>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f7fb fae4 	bl	80002c0 <__aeabi_dsub>
 8004cf8:	460d      	mov	r5, r1
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	f7fb ff32 	bl	8000b64 <__aeabi_d2iz>
 8004d00:	9004      	str	r0, [sp, #16]
 8004d02:	f7fb fc2b 	bl	800055c <__aeabi_i2d>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	f7fb fad7 	bl	80002c0 <__aeabi_dsub>
 8004d12:	f1bb 0f00 	cmp.w	fp, #0
 8004d16:	4680      	mov	r8, r0
 8004d18:	4689      	mov	r9, r1
 8004d1a:	dd70      	ble.n	8004dfe <__kernel_rem_pio2+0x24a>
 8004d1c:	1e72      	subs	r2, r6, #1
 8004d1e:	ab0c      	add	r3, sp, #48	; 0x30
 8004d20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d24:	9c04      	ldr	r4, [sp, #16]
 8004d26:	f1cb 0118 	rsb	r1, fp, #24
 8004d2a:	fa40 f301 	asr.w	r3, r0, r1
 8004d2e:	441c      	add	r4, r3
 8004d30:	408b      	lsls	r3, r1
 8004d32:	1ac0      	subs	r0, r0, r3
 8004d34:	ab0c      	add	r3, sp, #48	; 0x30
 8004d36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004d3a:	f1cb 0317 	rsb	r3, fp, #23
 8004d3e:	9404      	str	r4, [sp, #16]
 8004d40:	fa40 f303 	asr.w	r3, r0, r3
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	9b00      	ldr	r3, [sp, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	dd66      	ble.n	8004e1a <__kernel_rem_pio2+0x266>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004d52:	4614      	mov	r4, r2
 8004d54:	9b04      	ldr	r3, [sp, #16]
 8004d56:	3301      	adds	r3, #1
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	4296      	cmp	r6, r2
 8004d5c:	f300 80ac 	bgt.w	8004eb8 <__kernel_rem_pio2+0x304>
 8004d60:	f1bb 0f00 	cmp.w	fp, #0
 8004d64:	dd07      	ble.n	8004d76 <__kernel_rem_pio2+0x1c2>
 8004d66:	f1bb 0f01 	cmp.w	fp, #1
 8004d6a:	f000 80b4 	beq.w	8004ed6 <__kernel_rem_pio2+0x322>
 8004d6e:	f1bb 0f02 	cmp.w	fp, #2
 8004d72:	f000 80ba 	beq.w	8004eea <__kernel_rem_pio2+0x336>
 8004d76:	9b00      	ldr	r3, [sp, #0]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d14e      	bne.n	8004e1a <__kernel_rem_pio2+0x266>
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	2000      	movs	r0, #0
 8004d82:	4948      	ldr	r1, [pc, #288]	; (8004ea4 <__kernel_rem_pio2+0x2f0>)
 8004d84:	f7fb fa9c 	bl	80002c0 <__aeabi_dsub>
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4689      	mov	r9, r1
 8004d8c:	2c00      	cmp	r4, #0
 8004d8e:	d044      	beq.n	8004e1a <__kernel_rem_pio2+0x266>
 8004d90:	465a      	mov	r2, fp
 8004d92:	2000      	movs	r0, #0
 8004d94:	4943      	ldr	r1, [pc, #268]	; (8004ea4 <__kernel_rem_pio2+0x2f0>)
 8004d96:	f000 fd87 	bl	80058a8 <scalbn>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4640      	mov	r0, r8
 8004da0:	4649      	mov	r1, r9
 8004da2:	f7fb fa8d 	bl	80002c0 <__aeabi_dsub>
 8004da6:	4680      	mov	r8, r0
 8004da8:	4689      	mov	r9, r1
 8004daa:	e036      	b.n	8004e1a <__kernel_rem_pio2+0x266>
 8004dac:	2200      	movs	r2, #0
 8004dae:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <__kernel_rem_pio2+0x2f4>)
 8004db0:	4620      	mov	r0, r4
 8004db2:	4629      	mov	r1, r5
 8004db4:	f7fb fc3c 	bl	8000630 <__aeabi_dmul>
 8004db8:	f7fb fed4 	bl	8000b64 <__aeabi_d2iz>
 8004dbc:	f7fb fbce 	bl	800055c <__aeabi_i2d>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <__kernel_rem_pio2+0x2f8>)
 8004dcc:	f7fb fc30 	bl	8000630 <__aeabi_dmul>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f7fb fa72 	bl	80002c0 <__aeabi_dsub>
 8004ddc:	f7fb fec2 	bl	8000b64 <__aeabi_d2iz>
 8004de0:	9b00      	ldr	r3, [sp, #0]
 8004de2:	f109 39ff 	add.w	r9, r9, #4294967295
 8004de6:	f843 0b04 	str.w	r0, [r3], #4
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004df0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004df4:	f7fb fa66 	bl	80002c4 <__adddf3>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	460d      	mov	r5, r1
 8004dfc:	e75f      	b.n	8004cbe <__kernel_rem_pio2+0x10a>
 8004dfe:	d105      	bne.n	8004e0c <__kernel_rem_pio2+0x258>
 8004e00:	1e73      	subs	r3, r6, #1
 8004e02:	aa0c      	add	r2, sp, #48	; 0x30
 8004e04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004e08:	15c3      	asrs	r3, r0, #23
 8004e0a:	e79b      	b.n	8004d44 <__kernel_rem_pio2+0x190>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <__kernel_rem_pio2+0x2fc>)
 8004e10:	f7fb fe94 	bl	8000b3c <__aeabi_dcmpge>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d13e      	bne.n	8004e96 <__kernel_rem_pio2+0x2e2>
 8004e18:	9000      	str	r0, [sp, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4640      	mov	r0, r8
 8004e20:	4649      	mov	r1, r9
 8004e22:	f7fb fe6d 	bl	8000b00 <__aeabi_dcmpeq>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f000 80b1 	beq.w	8004f8e <__kernel_rem_pio2+0x3da>
 8004e2c:	1e74      	subs	r4, r6, #1
 8004e2e:	4623      	mov	r3, r4
 8004e30:	2200      	movs	r2, #0
 8004e32:	9902      	ldr	r1, [sp, #8]
 8004e34:	428b      	cmp	r3, r1
 8004e36:	da5f      	bge.n	8004ef8 <__kernel_rem_pio2+0x344>
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d074      	beq.n	8004f26 <__kernel_rem_pio2+0x372>
 8004e3c:	ab0c      	add	r3, sp, #48	; 0x30
 8004e3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004e42:	f1ab 0b18 	sub.w	fp, fp, #24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 809f 	beq.w	8004f8a <__kernel_rem_pio2+0x3d6>
 8004e4c:	465a      	mov	r2, fp
 8004e4e:	2000      	movs	r0, #0
 8004e50:	4914      	ldr	r1, [pc, #80]	; (8004ea4 <__kernel_rem_pio2+0x2f0>)
 8004e52:	f000 fd29 	bl	80058a8 <scalbn>
 8004e56:	46a2      	mov	sl, r4
 8004e58:	4606      	mov	r6, r0
 8004e5a:	460f      	mov	r7, r1
 8004e5c:	f04f 0800 	mov.w	r8, #0
 8004e60:	ab70      	add	r3, sp, #448	; 0x1c0
 8004e62:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004ea8 <__kernel_rem_pio2+0x2f4>
 8004e66:	00e5      	lsls	r5, r4, #3
 8004e68:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004e6c:	f1ba 0f00 	cmp.w	sl, #0
 8004e70:	f280 80c3 	bge.w	8004ffa <__kernel_rem_pio2+0x446>
 8004e74:	4626      	mov	r6, r4
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	f2c0 80f5 	blt.w	8005066 <__kernel_rem_pio2+0x4b2>
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <__kernel_rem_pio2+0x300>)
 8004e7e:	f04f 0a00 	mov.w	sl, #0
 8004e82:	9307      	str	r3, [sp, #28]
 8004e84:	ab70      	add	r3, sp, #448	; 0x1c0
 8004e86:	f04f 0b00 	mov.w	fp, #0
 8004e8a:	f04f 0800 	mov.w	r8, #0
 8004e8e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004e92:	1ba7      	subs	r7, r4, r6
 8004e94:	e0db      	b.n	800504e <__kernel_rem_pio2+0x49a>
 8004e96:	2302      	movs	r3, #2
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	e757      	b.n	8004d4c <__kernel_rem_pio2+0x198>
 8004e9c:	08005e28 	.word	0x08005e28
 8004ea0:	40200000 	.word	0x40200000
 8004ea4:	3ff00000 	.word	0x3ff00000
 8004ea8:	3e700000 	.word	0x3e700000
 8004eac:	41700000 	.word	0x41700000
 8004eb0:	3fe00000 	.word	0x3fe00000
 8004eb4:	08005de8 	.word	0x08005de8
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b944      	cbnz	r4, 8004ece <__kernel_rem_pio2+0x31a>
 8004ebc:	b11b      	cbz	r3, 8004ec6 <__kernel_rem_pio2+0x312>
 8004ebe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	461c      	mov	r4, r3
 8004ec8:	3201      	adds	r2, #1
 8004eca:	3704      	adds	r7, #4
 8004ecc:	e745      	b.n	8004d5a <__kernel_rem_pio2+0x1a6>
 8004ece:	1acb      	subs	r3, r1, r3
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	e7f7      	b.n	8004ec6 <__kernel_rem_pio2+0x312>
 8004ed6:	1e72      	subs	r2, r6, #1
 8004ed8:	ab0c      	add	r3, sp, #48	; 0x30
 8004eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ede:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ee2:	a90c      	add	r1, sp, #48	; 0x30
 8004ee4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004ee8:	e745      	b.n	8004d76 <__kernel_rem_pio2+0x1c2>
 8004eea:	1e72      	subs	r2, r6, #1
 8004eec:	ab0c      	add	r3, sp, #48	; 0x30
 8004eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004ef6:	e7f4      	b.n	8004ee2 <__kernel_rem_pio2+0x32e>
 8004ef8:	a90c      	add	r1, sp, #48	; 0x30
 8004efa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	430a      	orrs	r2, r1
 8004f02:	e796      	b.n	8004e32 <__kernel_rem_pio2+0x27e>
 8004f04:	3401      	adds	r4, #1
 8004f06:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	d0fa      	beq.n	8004f04 <__kernel_rem_pio2+0x350>
 8004f0e:	9b08      	ldr	r3, [sp, #32]
 8004f10:	f106 0801 	add.w	r8, r6, #1
 8004f14:	18f5      	adds	r5, r6, r3
 8004f16:	ab20      	add	r3, sp, #128	; 0x80
 8004f18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004f1c:	4434      	add	r4, r6
 8004f1e:	4544      	cmp	r4, r8
 8004f20:	da04      	bge.n	8004f2c <__kernel_rem_pio2+0x378>
 8004f22:	4626      	mov	r6, r4
 8004f24:	e6bf      	b.n	8004ca6 <__kernel_rem_pio2+0xf2>
 8004f26:	2401      	movs	r4, #1
 8004f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f2a:	e7ec      	b.n	8004f06 <__kernel_rem_pio2+0x352>
 8004f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2e:	f04f 0900 	mov.w	r9, #0
 8004f32:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004f36:	f7fb fb11 	bl	800055c <__aeabi_i2d>
 8004f3a:	2600      	movs	r6, #0
 8004f3c:	2700      	movs	r7, #0
 8004f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f40:	e9c5 0100 	strd	r0, r1, [r5]
 8004f44:	3b08      	subs	r3, #8
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	9504      	str	r5, [sp, #16]
 8004f4a:	9b07      	ldr	r3, [sp, #28]
 8004f4c:	4599      	cmp	r9, r3
 8004f4e:	dd05      	ble.n	8004f5c <__kernel_rem_pio2+0x3a8>
 8004f50:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004f54:	f108 0801 	add.w	r8, r8, #1
 8004f58:	3508      	adds	r5, #8
 8004f5a:	e7e0      	b.n	8004f1e <__kernel_rem_pio2+0x36a>
 8004f5c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004f60:	9900      	ldr	r1, [sp, #0]
 8004f62:	f109 0901 	add.w	r9, r9, #1
 8004f66:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004f6a:	9100      	str	r1, [sp, #0]
 8004f6c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004f70:	f8cd c010 	str.w	ip, [sp, #16]
 8004f74:	f7fb fb5c 	bl	8000630 <__aeabi_dmul>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb f9a0 	bl	80002c4 <__adddf3>
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	e7df      	b.n	8004f4a <__kernel_rem_pio2+0x396>
 8004f8a:	3c01      	subs	r4, #1
 8004f8c:	e756      	b.n	8004e3c <__kernel_rem_pio2+0x288>
 8004f8e:	f1cb 0200 	rsb	r2, fp, #0
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f000 fc87 	bl	80058a8 <scalbn>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4ba4      	ldr	r3, [pc, #656]	; (8005230 <__kernel_rem_pio2+0x67c>)
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	f7fb fdcb 	bl	8000b3c <__aeabi_dcmpge>
 8004fa6:	b1f8      	cbz	r0, 8004fe8 <__kernel_rem_pio2+0x434>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4ba2      	ldr	r3, [pc, #648]	; (8005234 <__kernel_rem_pio2+0x680>)
 8004fac:	4620      	mov	r0, r4
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f7fb fb3e 	bl	8000630 <__aeabi_dmul>
 8004fb4:	f7fb fdd6 	bl	8000b64 <__aeabi_d2iz>
 8004fb8:	4607      	mov	r7, r0
 8004fba:	f7fb facf 	bl	800055c <__aeabi_i2d>
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4b9b      	ldr	r3, [pc, #620]	; (8005230 <__kernel_rem_pio2+0x67c>)
 8004fc2:	f7fb fb35 	bl	8000630 <__aeabi_dmul>
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7fb f977 	bl	80002c0 <__aeabi_dsub>
 8004fd2:	f7fb fdc7 	bl	8000b64 <__aeabi_d2iz>
 8004fd6:	1c74      	adds	r4, r6, #1
 8004fd8:	ab0c      	add	r3, sp, #48	; 0x30
 8004fda:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004fde:	f10b 0b18 	add.w	fp, fp, #24
 8004fe2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8004fe6:	e731      	b.n	8004e4c <__kernel_rem_pio2+0x298>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f7fb fdba 	bl	8000b64 <__aeabi_d2iz>
 8004ff0:	ab0c      	add	r3, sp, #48	; 0x30
 8004ff2:	4634      	mov	r4, r6
 8004ff4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004ff8:	e728      	b.n	8004e4c <__kernel_rem_pio2+0x298>
 8004ffa:	ab0c      	add	r3, sp, #48	; 0x30
 8004ffc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005000:	f7fb faac 	bl	800055c <__aeabi_i2d>
 8005004:	4632      	mov	r2, r6
 8005006:	463b      	mov	r3, r7
 8005008:	f7fb fb12 	bl	8000630 <__aeabi_dmul>
 800500c:	4642      	mov	r2, r8
 800500e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8005012:	464b      	mov	r3, r9
 8005014:	4630      	mov	r0, r6
 8005016:	4639      	mov	r1, r7
 8005018:	f7fb fb0a 	bl	8000630 <__aeabi_dmul>
 800501c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	e722      	b.n	8004e6c <__kernel_rem_pio2+0x2b8>
 8005026:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800502a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800502e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005032:	f8cd c01c 	str.w	ip, [sp, #28]
 8005036:	f7fb fafb 	bl	8000630 <__aeabi_dmul>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4650      	mov	r0, sl
 8005040:	4659      	mov	r1, fp
 8005042:	f7fb f93f 	bl	80002c4 <__adddf3>
 8005046:	4682      	mov	sl, r0
 8005048:	468b      	mov	fp, r1
 800504a:	f108 0801 	add.w	r8, r8, #1
 800504e:	9b02      	ldr	r3, [sp, #8]
 8005050:	4598      	cmp	r8, r3
 8005052:	dc01      	bgt.n	8005058 <__kernel_rem_pio2+0x4a4>
 8005054:	45b8      	cmp	r8, r7
 8005056:	dde6      	ble.n	8005026 <__kernel_rem_pio2+0x472>
 8005058:	ab48      	add	r3, sp, #288	; 0x120
 800505a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800505e:	e9c7 ab00 	strd	sl, fp, [r7]
 8005062:	3e01      	subs	r6, #1
 8005064:	e707      	b.n	8004e76 <__kernel_rem_pio2+0x2c2>
 8005066:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005068:	2b02      	cmp	r3, #2
 800506a:	dc09      	bgt.n	8005080 <__kernel_rem_pio2+0x4cc>
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc32      	bgt.n	80050d6 <__kernel_rem_pio2+0x522>
 8005070:	d05a      	beq.n	8005128 <__kernel_rem_pio2+0x574>
 8005072:	9b04      	ldr	r3, [sp, #16]
 8005074:	f003 0007 	and.w	r0, r3, #7
 8005078:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005080:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005082:	2b03      	cmp	r3, #3
 8005084:	d1f5      	bne.n	8005072 <__kernel_rem_pio2+0x4be>
 8005086:	ab48      	add	r3, sp, #288	; 0x120
 8005088:	441d      	add	r5, r3
 800508a:	46aa      	mov	sl, r5
 800508c:	46a3      	mov	fp, r4
 800508e:	f1bb 0f00 	cmp.w	fp, #0
 8005092:	dc76      	bgt.n	8005182 <__kernel_rem_pio2+0x5ce>
 8005094:	46aa      	mov	sl, r5
 8005096:	46a3      	mov	fp, r4
 8005098:	f1bb 0f01 	cmp.w	fp, #1
 800509c:	f300 8090 	bgt.w	80051c0 <__kernel_rem_pio2+0x60c>
 80050a0:	2700      	movs	r7, #0
 80050a2:	463e      	mov	r6, r7
 80050a4:	2c01      	cmp	r4, #1
 80050a6:	f300 80aa 	bgt.w	80051fe <__kernel_rem_pio2+0x64a>
 80050aa:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80050ae:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80050b2:	9b00      	ldr	r3, [sp, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 80ac 	bne.w	8005212 <__kernel_rem_pio2+0x65e>
 80050ba:	4603      	mov	r3, r0
 80050bc:	462a      	mov	r2, r5
 80050be:	9806      	ldr	r0, [sp, #24]
 80050c0:	e9c0 2300 	strd	r2, r3, [r0]
 80050c4:	4622      	mov	r2, r4
 80050c6:	460b      	mov	r3, r1
 80050c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80050cc:	463a      	mov	r2, r7
 80050ce:	4633      	mov	r3, r6
 80050d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80050d4:	e7cd      	b.n	8005072 <__kernel_rem_pio2+0x4be>
 80050d6:	2000      	movs	r0, #0
 80050d8:	46a0      	mov	r8, r4
 80050da:	4601      	mov	r1, r0
 80050dc:	ab48      	add	r3, sp, #288	; 0x120
 80050de:	441d      	add	r5, r3
 80050e0:	f1b8 0f00 	cmp.w	r8, #0
 80050e4:	da3a      	bge.n	800515c <__kernel_rem_pio2+0x5a8>
 80050e6:	9b00      	ldr	r3, [sp, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d03e      	beq.n	800516a <__kernel_rem_pio2+0x5b6>
 80050ec:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80050f0:	4602      	mov	r2, r0
 80050f2:	462b      	mov	r3, r5
 80050f4:	9d06      	ldr	r5, [sp, #24]
 80050f6:	2601      	movs	r6, #1
 80050f8:	e9c5 2300 	strd	r2, r3, [r5]
 80050fc:	460b      	mov	r3, r1
 80050fe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005102:	f7fb f8dd 	bl	80002c0 <__aeabi_dsub>
 8005106:	4684      	mov	ip, r0
 8005108:	460f      	mov	r7, r1
 800510a:	ad48      	add	r5, sp, #288	; 0x120
 800510c:	42b4      	cmp	r4, r6
 800510e:	f105 0508 	add.w	r5, r5, #8
 8005112:	da2c      	bge.n	800516e <__kernel_rem_pio2+0x5ba>
 8005114:	9b00      	ldr	r3, [sp, #0]
 8005116:	b10b      	cbz	r3, 800511c <__kernel_rem_pio2+0x568>
 8005118:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800511c:	4662      	mov	r2, ip
 800511e:	463b      	mov	r3, r7
 8005120:	9906      	ldr	r1, [sp, #24]
 8005122:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005126:	e7a4      	b.n	8005072 <__kernel_rem_pio2+0x4be>
 8005128:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800512a:	ab48      	add	r3, sp, #288	; 0x120
 800512c:	4637      	mov	r7, r6
 800512e:	441d      	add	r5, r3
 8005130:	2c00      	cmp	r4, #0
 8005132:	da09      	bge.n	8005148 <__kernel_rem_pio2+0x594>
 8005134:	9b00      	ldr	r3, [sp, #0]
 8005136:	b10b      	cbz	r3, 800513c <__kernel_rem_pio2+0x588>
 8005138:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800513c:	4632      	mov	r2, r6
 800513e:	463b      	mov	r3, r7
 8005140:	9906      	ldr	r1, [sp, #24]
 8005142:	e9c1 2300 	strd	r2, r3, [r1]
 8005146:	e794      	b.n	8005072 <__kernel_rem_pio2+0x4be>
 8005148:	4630      	mov	r0, r6
 800514a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800514e:	4639      	mov	r1, r7
 8005150:	f7fb f8b8 	bl	80002c4 <__adddf3>
 8005154:	3c01      	subs	r4, #1
 8005156:	4606      	mov	r6, r0
 8005158:	460f      	mov	r7, r1
 800515a:	e7e9      	b.n	8005130 <__kernel_rem_pio2+0x57c>
 800515c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005160:	f7fb f8b0 	bl	80002c4 <__adddf3>
 8005164:	f108 38ff 	add.w	r8, r8, #4294967295
 8005168:	e7ba      	b.n	80050e0 <__kernel_rem_pio2+0x52c>
 800516a:	460d      	mov	r5, r1
 800516c:	e7c0      	b.n	80050f0 <__kernel_rem_pio2+0x53c>
 800516e:	4660      	mov	r0, ip
 8005170:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005174:	4639      	mov	r1, r7
 8005176:	f7fb f8a5 	bl	80002c4 <__adddf3>
 800517a:	3601      	adds	r6, #1
 800517c:	4684      	mov	ip, r0
 800517e:	460f      	mov	r7, r1
 8005180:	e7c4      	b.n	800510c <__kernel_rem_pio2+0x558>
 8005182:	e9da 6700 	ldrd	r6, r7, [sl]
 8005186:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800518a:	4632      	mov	r2, r6
 800518c:	463b      	mov	r3, r7
 800518e:	4640      	mov	r0, r8
 8005190:	4649      	mov	r1, r9
 8005192:	f7fb f897 	bl	80002c4 <__adddf3>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800519e:	4640      	mov	r0, r8
 80051a0:	4649      	mov	r1, r9
 80051a2:	f7fb f88d 	bl	80002c0 <__aeabi_dsub>
 80051a6:	4632      	mov	r2, r6
 80051a8:	463b      	mov	r3, r7
 80051aa:	f7fb f88b 	bl	80002c4 <__adddf3>
 80051ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051b2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80051b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051ba:	e9ca 2300 	strd	r2, r3, [sl]
 80051be:	e766      	b.n	800508e <__kernel_rem_pio2+0x4da>
 80051c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80051c4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	f7fb f878 	bl	80002c4 <__adddf3>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051dc:	4630      	mov	r0, r6
 80051de:	4639      	mov	r1, r7
 80051e0:	f7fb f86e 	bl	80002c0 <__aeabi_dsub>
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	f7fb f86c 	bl	80002c4 <__adddf3>
 80051ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051f0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80051f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051f8:	e9ca 2300 	strd	r2, r3, [sl]
 80051fc:	e74c      	b.n	8005098 <__kernel_rem_pio2+0x4e4>
 80051fe:	4638      	mov	r0, r7
 8005200:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005204:	4631      	mov	r1, r6
 8005206:	f7fb f85d 	bl	80002c4 <__adddf3>
 800520a:	3c01      	subs	r4, #1
 800520c:	4607      	mov	r7, r0
 800520e:	460e      	mov	r6, r1
 8005210:	e748      	b.n	80050a4 <__kernel_rem_pio2+0x4f0>
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005218:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800521c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005220:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005224:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005228:	601d      	str	r5, [r3, #0]
 800522a:	615e      	str	r6, [r3, #20]
 800522c:	e721      	b.n	8005072 <__kernel_rem_pio2+0x4be>
 800522e:	bf00      	nop
 8005230:	41700000 	.word	0x41700000
 8005234:	3e700000 	.word	0x3e700000

08005238 <__kernel_sin>:
 8005238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	e9cd 2300 	strd	r2, r3, [sp]
 8005242:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005246:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800524a:	4682      	mov	sl, r0
 800524c:	460c      	mov	r4, r1
 800524e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005250:	da03      	bge.n	800525a <__kernel_sin+0x22>
 8005252:	f7fb fc87 	bl	8000b64 <__aeabi_d2iz>
 8005256:	2800      	cmp	r0, #0
 8005258:	d050      	beq.n	80052fc <__kernel_sin+0xc4>
 800525a:	4652      	mov	r2, sl
 800525c:	4623      	mov	r3, r4
 800525e:	4650      	mov	r0, sl
 8005260:	4621      	mov	r1, r4
 8005262:	f7fb f9e5 	bl	8000630 <__aeabi_dmul>
 8005266:	4606      	mov	r6, r0
 8005268:	460f      	mov	r7, r1
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4650      	mov	r0, sl
 8005270:	4621      	mov	r1, r4
 8005272:	f7fb f9dd 	bl	8000630 <__aeabi_dmul>
 8005276:	a33e      	add	r3, pc, #248	; (adr r3, 8005370 <__kernel_sin+0x138>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	4680      	mov	r8, r0
 800527e:	4689      	mov	r9, r1
 8005280:	4630      	mov	r0, r6
 8005282:	4639      	mov	r1, r7
 8005284:	f7fb f9d4 	bl	8000630 <__aeabi_dmul>
 8005288:	a33b      	add	r3, pc, #236	; (adr r3, 8005378 <__kernel_sin+0x140>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb f817 	bl	80002c0 <__aeabi_dsub>
 8005292:	4632      	mov	r2, r6
 8005294:	463b      	mov	r3, r7
 8005296:	f7fb f9cb 	bl	8000630 <__aeabi_dmul>
 800529a:	a339      	add	r3, pc, #228	; (adr r3, 8005380 <__kernel_sin+0x148>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fb f810 	bl	80002c4 <__adddf3>
 80052a4:	4632      	mov	r2, r6
 80052a6:	463b      	mov	r3, r7
 80052a8:	f7fb f9c2 	bl	8000630 <__aeabi_dmul>
 80052ac:	a336      	add	r3, pc, #216	; (adr r3, 8005388 <__kernel_sin+0x150>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f7fb f805 	bl	80002c0 <__aeabi_dsub>
 80052b6:	4632      	mov	r2, r6
 80052b8:	463b      	mov	r3, r7
 80052ba:	f7fb f9b9 	bl	8000630 <__aeabi_dmul>
 80052be:	a334      	add	r3, pc, #208	; (adr r3, 8005390 <__kernel_sin+0x158>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f7fa fffe 	bl	80002c4 <__adddf3>
 80052c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052cc:	b9dd      	cbnz	r5, 8005306 <__kernel_sin+0xce>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4630      	mov	r0, r6
 80052d4:	4639      	mov	r1, r7
 80052d6:	f7fb f9ab 	bl	8000630 <__aeabi_dmul>
 80052da:	a32f      	add	r3, pc, #188	; (adr r3, 8005398 <__kernel_sin+0x160>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f7fa ffee 	bl	80002c0 <__aeabi_dsub>
 80052e4:	4642      	mov	r2, r8
 80052e6:	464b      	mov	r3, r9
 80052e8:	f7fb f9a2 	bl	8000630 <__aeabi_dmul>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4650      	mov	r0, sl
 80052f2:	4621      	mov	r1, r4
 80052f4:	f7fa ffe6 	bl	80002c4 <__adddf3>
 80052f8:	4682      	mov	sl, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	4650      	mov	r0, sl
 80052fe:	4621      	mov	r1, r4
 8005300:	b006      	add	sp, #24
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	2200      	movs	r2, #0
 8005308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <__kernel_sin+0x168>)
 800530e:	f7fb f98f 	bl	8000630 <__aeabi_dmul>
 8005312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
 800531e:	f7fb f987 	bl	8000630 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800532a:	f7fa ffc9 	bl	80002c0 <__aeabi_dsub>
 800532e:	4632      	mov	r2, r6
 8005330:	463b      	mov	r3, r7
 8005332:	f7fb f97d 	bl	8000630 <__aeabi_dmul>
 8005336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800533a:	f7fa ffc1 	bl	80002c0 <__aeabi_dsub>
 800533e:	a316      	add	r3, pc, #88	; (adr r3, 8005398 <__kernel_sin+0x160>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	4640      	mov	r0, r8
 800534a:	4649      	mov	r1, r9
 800534c:	f7fb f970 	bl	8000630 <__aeabi_dmul>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4630      	mov	r0, r6
 8005356:	4639      	mov	r1, r7
 8005358:	f7fa ffb4 	bl	80002c4 <__adddf3>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4650      	mov	r0, sl
 8005362:	4621      	mov	r1, r4
 8005364:	f7fa ffac 	bl	80002c0 <__aeabi_dsub>
 8005368:	e7c6      	b.n	80052f8 <__kernel_sin+0xc0>
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w
 8005370:	5acfd57c 	.word	0x5acfd57c
 8005374:	3de5d93a 	.word	0x3de5d93a
 8005378:	8a2b9ceb 	.word	0x8a2b9ceb
 800537c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005380:	57b1fe7d 	.word	0x57b1fe7d
 8005384:	3ec71de3 	.word	0x3ec71de3
 8005388:	19c161d5 	.word	0x19c161d5
 800538c:	3f2a01a0 	.word	0x3f2a01a0
 8005390:	1110f8a6 	.word	0x1110f8a6
 8005394:	3f811111 	.word	0x3f811111
 8005398:	55555549 	.word	0x55555549
 800539c:	3fc55555 	.word	0x3fc55555
 80053a0:	3fe00000 	.word	0x3fe00000
 80053a4:	00000000 	.word	0x00000000

080053a8 <__kernel_tan>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	b08b      	sub	sp, #44	; 0x2c
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	4bd9      	ldr	r3, [pc, #868]	; (8005718 <__kernel_tan+0x370>)
 80053b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80053b6:	429e      	cmp	r6, r3
 80053b8:	4604      	mov	r4, r0
 80053ba:	460d      	mov	r5, r1
 80053bc:	4682      	mov	sl, r0
 80053be:	468b      	mov	fp, r1
 80053c0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80053c2:	9202      	str	r2, [sp, #8]
 80053c4:	9107      	str	r1, [sp, #28]
 80053c6:	dc58      	bgt.n	800547a <__kernel_tan+0xd2>
 80053c8:	f7fb fbcc 	bl	8000b64 <__aeabi_d2iz>
 80053cc:	4605      	mov	r5, r0
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d178      	bne.n	80054c4 <__kernel_tan+0x11c>
 80053d2:	1c7b      	adds	r3, r7, #1
 80053d4:	4323      	orrs	r3, r4
 80053d6:	4333      	orrs	r3, r6
 80053d8:	d110      	bne.n	80053fc <__kernel_tan+0x54>
 80053da:	4620      	mov	r0, r4
 80053dc:	4659      	mov	r1, fp
 80053de:	f000 f9df 	bl	80057a0 <fabs>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	2000      	movs	r0, #0
 80053e8:	49cc      	ldr	r1, [pc, #816]	; (800571c <__kernel_tan+0x374>)
 80053ea:	f7fb fa4b 	bl	8000884 <__aeabi_ddiv>
 80053ee:	4682      	mov	sl, r0
 80053f0:	468b      	mov	fp, r1
 80053f2:	4650      	mov	r0, sl
 80053f4:	4659      	mov	r1, fp
 80053f6:	b00b      	add	sp, #44	; 0x2c
 80053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fc:	2f01      	cmp	r7, #1
 80053fe:	d0f8      	beq.n	80053f2 <__kernel_tan+0x4a>
 8005400:	4620      	mov	r0, r4
 8005402:	4659      	mov	r1, fp
 8005404:	9a02      	ldr	r2, [sp, #8]
 8005406:	9b00      	ldr	r3, [sp, #0]
 8005408:	f7fa ff5c 	bl	80002c4 <__adddf3>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	460f      	mov	r7, r1
 8005412:	2000      	movs	r0, #0
 8005414:	49c2      	ldr	r1, [pc, #776]	; (8005720 <__kernel_tan+0x378>)
 8005416:	f7fb fa35 	bl	8000884 <__aeabi_ddiv>
 800541a:	462e      	mov	r6, r5
 800541c:	4689      	mov	r9, r1
 800541e:	4652      	mov	r2, sl
 8005420:	465b      	mov	r3, fp
 8005422:	4680      	mov	r8, r0
 8005424:	462c      	mov	r4, r5
 8005426:	4630      	mov	r0, r6
 8005428:	460d      	mov	r5, r1
 800542a:	4639      	mov	r1, r7
 800542c:	f7fa ff48 	bl	80002c0 <__aeabi_dsub>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	9802      	ldr	r0, [sp, #8]
 8005436:	9900      	ldr	r1, [sp, #0]
 8005438:	f7fa ff42 	bl	80002c0 <__aeabi_dsub>
 800543c:	4632      	mov	r2, r6
 800543e:	464b      	mov	r3, r9
 8005440:	f7fb f8f6 	bl	8000630 <__aeabi_dmul>
 8005444:	4632      	mov	r2, r6
 8005446:	4682      	mov	sl, r0
 8005448:	468b      	mov	fp, r1
 800544a:	464b      	mov	r3, r9
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb f8ee 	bl	8000630 <__aeabi_dmul>
 8005454:	2200      	movs	r2, #0
 8005456:	4bb1      	ldr	r3, [pc, #708]	; (800571c <__kernel_tan+0x374>)
 8005458:	f7fa ff34 	bl	80002c4 <__adddf3>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4650      	mov	r0, sl
 8005462:	4659      	mov	r1, fp
 8005464:	f7fa ff2e 	bl	80002c4 <__adddf3>
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	f7fb f8e0 	bl	8000630 <__aeabi_dmul>
 8005470:	4622      	mov	r2, r4
 8005472:	462b      	mov	r3, r5
 8005474:	f7fa ff26 	bl	80002c4 <__adddf3>
 8005478:	e7b9      	b.n	80053ee <__kernel_tan+0x46>
 800547a:	4baa      	ldr	r3, [pc, #680]	; (8005724 <__kernel_tan+0x37c>)
 800547c:	429e      	cmp	r6, r3
 800547e:	dd21      	ble.n	80054c4 <__kernel_tan+0x11c>
 8005480:	2900      	cmp	r1, #0
 8005482:	da06      	bge.n	8005492 <__kernel_tan+0xea>
 8005484:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005488:	469b      	mov	fp, r3
 800548a:	9b00      	ldr	r3, [sp, #0]
 800548c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4652      	mov	r2, sl
 8005494:	a182      	add	r1, pc, #520	; (adr r1, 80056a0 <__kernel_tan+0x2f8>)
 8005496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800549a:	465b      	mov	r3, fp
 800549c:	f7fa ff10 	bl	80002c0 <__aeabi_dsub>
 80054a0:	4604      	mov	r4, r0
 80054a2:	460d      	mov	r5, r1
 80054a4:	a180      	add	r1, pc, #512	; (adr r1, 80056a8 <__kernel_tan+0x300>)
 80054a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054aa:	9a02      	ldr	r2, [sp, #8]
 80054ac:	9b00      	ldr	r3, [sp, #0]
 80054ae:	f7fa ff07 	bl	80002c0 <__aeabi_dsub>
 80054b2:	462b      	mov	r3, r5
 80054b4:	4622      	mov	r2, r4
 80054b6:	f7fa ff05 	bl	80002c4 <__adddf3>
 80054ba:	2300      	movs	r3, #0
 80054bc:	4682      	mov	sl, r0
 80054be:	468b      	mov	fp, r1
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	4652      	mov	r2, sl
 80054c6:	465b      	mov	r3, fp
 80054c8:	4650      	mov	r0, sl
 80054ca:	4659      	mov	r1, fp
 80054cc:	f7fb f8b0 	bl	8000630 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4680      	mov	r8, r0
 80054d6:	4689      	mov	r9, r1
 80054d8:	f7fb f8aa 	bl	8000630 <__aeabi_dmul>
 80054dc:	4642      	mov	r2, r8
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
 80054e2:	464b      	mov	r3, r9
 80054e4:	4650      	mov	r0, sl
 80054e6:	4659      	mov	r1, fp
 80054e8:	f7fb f8a2 	bl	8000630 <__aeabi_dmul>
 80054ec:	a370      	add	r3, pc, #448	; (adr r3, 80056b0 <__kernel_tan+0x308>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054f6:	4620      	mov	r0, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	f7fb f899 	bl	8000630 <__aeabi_dmul>
 80054fe:	a36e      	add	r3, pc, #440	; (adr r3, 80056b8 <__kernel_tan+0x310>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fa fede 	bl	80002c4 <__adddf3>
 8005508:	4622      	mov	r2, r4
 800550a:	462b      	mov	r3, r5
 800550c:	f7fb f890 	bl	8000630 <__aeabi_dmul>
 8005510:	a36b      	add	r3, pc, #428	; (adr r3, 80056c0 <__kernel_tan+0x318>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f7fa fed5 	bl	80002c4 <__adddf3>
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	f7fb f887 	bl	8000630 <__aeabi_dmul>
 8005522:	a369      	add	r3, pc, #420	; (adr r3, 80056c8 <__kernel_tan+0x320>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fa fecc 	bl	80002c4 <__adddf3>
 800552c:	4622      	mov	r2, r4
 800552e:	462b      	mov	r3, r5
 8005530:	f7fb f87e 	bl	8000630 <__aeabi_dmul>
 8005534:	a366      	add	r3, pc, #408	; (adr r3, 80056d0 <__kernel_tan+0x328>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fa fec3 	bl	80002c4 <__adddf3>
 800553e:	4622      	mov	r2, r4
 8005540:	462b      	mov	r3, r5
 8005542:	f7fb f875 	bl	8000630 <__aeabi_dmul>
 8005546:	a364      	add	r3, pc, #400	; (adr r3, 80056d8 <__kernel_tan+0x330>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fa feba 	bl	80002c4 <__adddf3>
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	f7fb f86c 	bl	8000630 <__aeabi_dmul>
 8005558:	a361      	add	r3, pc, #388	; (adr r3, 80056e0 <__kernel_tan+0x338>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fb f863 	bl	8000630 <__aeabi_dmul>
 800556a:	a35f      	add	r3, pc, #380	; (adr r3, 80056e8 <__kernel_tan+0x340>)
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f7fa fea8 	bl	80002c4 <__adddf3>
 8005574:	4622      	mov	r2, r4
 8005576:	462b      	mov	r3, r5
 8005578:	f7fb f85a 	bl	8000630 <__aeabi_dmul>
 800557c:	a35c      	add	r3, pc, #368	; (adr r3, 80056f0 <__kernel_tan+0x348>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fa fe9f 	bl	80002c4 <__adddf3>
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	f7fb f851 	bl	8000630 <__aeabi_dmul>
 800558e:	a35a      	add	r3, pc, #360	; (adr r3, 80056f8 <__kernel_tan+0x350>)
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f7fa fe96 	bl	80002c4 <__adddf3>
 8005598:	4622      	mov	r2, r4
 800559a:	462b      	mov	r3, r5
 800559c:	f7fb f848 	bl	8000630 <__aeabi_dmul>
 80055a0:	a357      	add	r3, pc, #348	; (adr r3, 8005700 <__kernel_tan+0x358>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fa fe8d 	bl	80002c4 <__adddf3>
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f7fb f83f 	bl	8000630 <__aeabi_dmul>
 80055b2:	a355      	add	r3, pc, #340	; (adr r3, 8005708 <__kernel_tan+0x360>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fa fe84 	bl	80002c4 <__adddf3>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055c4:	f7fa fe7e 	bl	80002c4 <__adddf3>
 80055c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055cc:	f7fb f830 	bl	8000630 <__aeabi_dmul>
 80055d0:	9a02      	ldr	r2, [sp, #8]
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	f7fa fe76 	bl	80002c4 <__adddf3>
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	f7fb f828 	bl	8000630 <__aeabi_dmul>
 80055e0:	9a02      	ldr	r2, [sp, #8]
 80055e2:	9b00      	ldr	r3, [sp, #0]
 80055e4:	f7fa fe6e 	bl	80002c4 <__adddf3>
 80055e8:	a349      	add	r3, pc, #292	; (adr r3, 8005710 <__kernel_tan+0x368>)
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	4604      	mov	r4, r0
 80055f0:	460d      	mov	r5, r1
 80055f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055f6:	f7fb f81b 	bl	8000630 <__aeabi_dmul>
 80055fa:	4622      	mov	r2, r4
 80055fc:	462b      	mov	r3, r5
 80055fe:	f7fa fe61 	bl	80002c4 <__adddf3>
 8005602:	460b      	mov	r3, r1
 8005604:	e9cd 0100 	strd	r0, r1, [sp]
 8005608:	4602      	mov	r2, r0
 800560a:	4659      	mov	r1, fp
 800560c:	4650      	mov	r0, sl
 800560e:	f7fa fe59 	bl	80002c4 <__adddf3>
 8005612:	4b44      	ldr	r3, [pc, #272]	; (8005724 <__kernel_tan+0x37c>)
 8005614:	4604      	mov	r4, r0
 8005616:	429e      	cmp	r6, r3
 8005618:	460d      	mov	r5, r1
 800561a:	f340 8085 	ble.w	8005728 <__kernel_tan+0x380>
 800561e:	4638      	mov	r0, r7
 8005620:	f7fa ff9c 	bl	800055c <__aeabi_i2d>
 8005624:	4622      	mov	r2, r4
 8005626:	4680      	mov	r8, r0
 8005628:	4689      	mov	r9, r1
 800562a:	462b      	mov	r3, r5
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	f7fa fffe 	bl	8000630 <__aeabi_dmul>
 8005634:	4642      	mov	r2, r8
 8005636:	4606      	mov	r6, r0
 8005638:	460f      	mov	r7, r1
 800563a:	464b      	mov	r3, r9
 800563c:	4620      	mov	r0, r4
 800563e:	4629      	mov	r1, r5
 8005640:	f7fa fe40 	bl	80002c4 <__adddf3>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4630      	mov	r0, r6
 800564a:	4639      	mov	r1, r7
 800564c:	f7fb f91a 	bl	8000884 <__aeabi_ddiv>
 8005650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005654:	f7fa fe34 	bl	80002c0 <__aeabi_dsub>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4650      	mov	r0, sl
 800565e:	4659      	mov	r1, fp
 8005660:	f7fa fe2e 	bl	80002c0 <__aeabi_dsub>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	f7fa fe2c 	bl	80002c4 <__adddf3>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4640      	mov	r0, r8
 8005672:	4649      	mov	r1, r9
 8005674:	f7fa fe24 	bl	80002c0 <__aeabi_dsub>
 8005678:	9b07      	ldr	r3, [sp, #28]
 800567a:	4604      	mov	r4, r0
 800567c:	179b      	asrs	r3, r3, #30
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	f1c3 0001 	rsb	r0, r3, #1
 8005686:	460d      	mov	r5, r1
 8005688:	f7fa ff68 	bl	800055c <__aeabi_i2d>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4620      	mov	r0, r4
 8005692:	4629      	mov	r1, r5
 8005694:	f7fa ffcc 	bl	8000630 <__aeabi_dmul>
 8005698:	e6a9      	b.n	80053ee <__kernel_tan+0x46>
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w
 80056a0:	54442d18 	.word	0x54442d18
 80056a4:	3fe921fb 	.word	0x3fe921fb
 80056a8:	33145c07 	.word	0x33145c07
 80056ac:	3c81a626 	.word	0x3c81a626
 80056b0:	74bf7ad4 	.word	0x74bf7ad4
 80056b4:	3efb2a70 	.word	0x3efb2a70
 80056b8:	32f0a7e9 	.word	0x32f0a7e9
 80056bc:	3f12b80f 	.word	0x3f12b80f
 80056c0:	1a8d1068 	.word	0x1a8d1068
 80056c4:	3f3026f7 	.word	0x3f3026f7
 80056c8:	fee08315 	.word	0xfee08315
 80056cc:	3f57dbc8 	.word	0x3f57dbc8
 80056d0:	e96e8493 	.word	0xe96e8493
 80056d4:	3f8226e3 	.word	0x3f8226e3
 80056d8:	1bb341fe 	.word	0x1bb341fe
 80056dc:	3faba1ba 	.word	0x3faba1ba
 80056e0:	db605373 	.word	0xdb605373
 80056e4:	bef375cb 	.word	0xbef375cb
 80056e8:	a03792a6 	.word	0xa03792a6
 80056ec:	3f147e88 	.word	0x3f147e88
 80056f0:	f2f26501 	.word	0xf2f26501
 80056f4:	3f4344d8 	.word	0x3f4344d8
 80056f8:	c9560328 	.word	0xc9560328
 80056fc:	3f6d6d22 	.word	0x3f6d6d22
 8005700:	8406d637 	.word	0x8406d637
 8005704:	3f9664f4 	.word	0x3f9664f4
 8005708:	1110fe7a 	.word	0x1110fe7a
 800570c:	3fc11111 	.word	0x3fc11111
 8005710:	55555563 	.word	0x55555563
 8005714:	3fd55555 	.word	0x3fd55555
 8005718:	3e2fffff 	.word	0x3e2fffff
 800571c:	3ff00000 	.word	0x3ff00000
 8005720:	bff00000 	.word	0xbff00000
 8005724:	3fe59427 	.word	0x3fe59427
 8005728:	2f01      	cmp	r7, #1
 800572a:	d031      	beq.n	8005790 <__kernel_tan+0x3e8>
 800572c:	460f      	mov	r7, r1
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	2000      	movs	r0, #0
 8005734:	4918      	ldr	r1, [pc, #96]	; (8005798 <__kernel_tan+0x3f0>)
 8005736:	f7fb f8a5 	bl	8000884 <__aeabi_ddiv>
 800573a:	2600      	movs	r6, #0
 800573c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005740:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005744:	4652      	mov	r2, sl
 8005746:	465b      	mov	r3, fp
 8005748:	4630      	mov	r0, r6
 800574a:	4639      	mov	r1, r7
 800574c:	f7fa fdb8 	bl	80002c0 <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005758:	f7fa fdb2 	bl	80002c0 <__aeabi_dsub>
 800575c:	4632      	mov	r2, r6
 800575e:	462b      	mov	r3, r5
 8005760:	f7fa ff66 	bl	8000630 <__aeabi_dmul>
 8005764:	4632      	mov	r2, r6
 8005766:	4682      	mov	sl, r0
 8005768:	468b      	mov	fp, r1
 800576a:	462b      	mov	r3, r5
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fa ff5e 	bl	8000630 <__aeabi_dmul>
 8005774:	2200      	movs	r2, #0
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <__kernel_tan+0x3f4>)
 8005778:	f7fa fda4 	bl	80002c4 <__adddf3>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4650      	mov	r0, sl
 8005782:	4659      	mov	r1, fp
 8005784:	f7fa fd9e 	bl	80002c4 <__adddf3>
 8005788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800578c:	4634      	mov	r4, r6
 800578e:	e66d      	b.n	800546c <__kernel_tan+0xc4>
 8005790:	4682      	mov	sl, r0
 8005792:	468b      	mov	fp, r1
 8005794:	e62d      	b.n	80053f2 <__kernel_tan+0x4a>
 8005796:	bf00      	nop
 8005798:	bff00000 	.word	0xbff00000
 800579c:	3ff00000 	.word	0x3ff00000

080057a0 <fabs>:
 80057a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80057a4:	4770      	bx	lr
	...

080057a8 <floor>:
 80057a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80057b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80057b4:	2e13      	cmp	r6, #19
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4607      	mov	r7, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	4605      	mov	r5, r0
 80057c0:	dc33      	bgt.n	800582a <floor+0x82>
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	da14      	bge.n	80057f0 <floor+0x48>
 80057c6:	a334      	add	r3, pc, #208	; (adr r3, 8005898 <floor+0xf0>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa fd7a 	bl	80002c4 <__adddf3>
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f7fb f9bc 	bl	8000b50 <__aeabi_dcmpgt>
 80057d8:	b138      	cbz	r0, 80057ea <floor+0x42>
 80057da:	2c00      	cmp	r4, #0
 80057dc:	da58      	bge.n	8005890 <floor+0xe8>
 80057de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80057e2:	431d      	orrs	r5, r3
 80057e4:	d001      	beq.n	80057ea <floor+0x42>
 80057e6:	2500      	movs	r5, #0
 80057e8:	4c2d      	ldr	r4, [pc, #180]	; (80058a0 <floor+0xf8>)
 80057ea:	4623      	mov	r3, r4
 80057ec:	462f      	mov	r7, r5
 80057ee:	e025      	b.n	800583c <floor+0x94>
 80057f0:	4a2c      	ldr	r2, [pc, #176]	; (80058a4 <floor+0xfc>)
 80057f2:	fa42 f806 	asr.w	r8, r2, r6
 80057f6:	ea01 0208 	and.w	r2, r1, r8
 80057fa:	4302      	orrs	r2, r0
 80057fc:	d01e      	beq.n	800583c <floor+0x94>
 80057fe:	a326      	add	r3, pc, #152	; (adr r3, 8005898 <floor+0xf0>)
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa fd5e 	bl	80002c4 <__adddf3>
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	f7fb f9a0 	bl	8000b50 <__aeabi_dcmpgt>
 8005810:	2800      	cmp	r0, #0
 8005812:	d0ea      	beq.n	80057ea <floor+0x42>
 8005814:	2c00      	cmp	r4, #0
 8005816:	bfbe      	ittt	lt
 8005818:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800581c:	fa43 f606 	asrlt.w	r6, r3, r6
 8005820:	19a4      	addlt	r4, r4, r6
 8005822:	2500      	movs	r5, #0
 8005824:	ea24 0408 	bic.w	r4, r4, r8
 8005828:	e7df      	b.n	80057ea <floor+0x42>
 800582a:	2e33      	cmp	r6, #51	; 0x33
 800582c:	dd0a      	ble.n	8005844 <floor+0x9c>
 800582e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005832:	d103      	bne.n	800583c <floor+0x94>
 8005834:	f7fa fd46 	bl	80002c4 <__adddf3>
 8005838:	4607      	mov	r7, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4638      	mov	r0, r7
 800583e:	4619      	mov	r1, r3
 8005840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005844:	f04f 32ff 	mov.w	r2, #4294967295
 8005848:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800584c:	fa22 f808 	lsr.w	r8, r2, r8
 8005850:	ea18 0f00 	tst.w	r8, r0
 8005854:	d0f2      	beq.n	800583c <floor+0x94>
 8005856:	a310      	add	r3, pc, #64	; (adr r3, 8005898 <floor+0xf0>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f7fa fd32 	bl	80002c4 <__adddf3>
 8005860:	2200      	movs	r2, #0
 8005862:	2300      	movs	r3, #0
 8005864:	f7fb f974 	bl	8000b50 <__aeabi_dcmpgt>
 8005868:	2800      	cmp	r0, #0
 800586a:	d0be      	beq.n	80057ea <floor+0x42>
 800586c:	2c00      	cmp	r4, #0
 800586e:	da02      	bge.n	8005876 <floor+0xce>
 8005870:	2e14      	cmp	r6, #20
 8005872:	d103      	bne.n	800587c <floor+0xd4>
 8005874:	3401      	adds	r4, #1
 8005876:	ea25 0508 	bic.w	r5, r5, r8
 800587a:	e7b6      	b.n	80057ea <floor+0x42>
 800587c:	2301      	movs	r3, #1
 800587e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005882:	fa03 f606 	lsl.w	r6, r3, r6
 8005886:	4435      	add	r5, r6
 8005888:	42bd      	cmp	r5, r7
 800588a:	bf38      	it	cc
 800588c:	18e4      	addcc	r4, r4, r3
 800588e:	e7f2      	b.n	8005876 <floor+0xce>
 8005890:	2500      	movs	r5, #0
 8005892:	462c      	mov	r4, r5
 8005894:	e7a9      	b.n	80057ea <floor+0x42>
 8005896:	bf00      	nop
 8005898:	8800759c 	.word	0x8800759c
 800589c:	7e37e43c 	.word	0x7e37e43c
 80058a0:	bff00000 	.word	0xbff00000
 80058a4:	000fffff 	.word	0x000fffff

080058a8 <scalbn>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80058ae:	4604      	mov	r4, r0
 80058b0:	460d      	mov	r5, r1
 80058b2:	4617      	mov	r7, r2
 80058b4:	460b      	mov	r3, r1
 80058b6:	b996      	cbnz	r6, 80058de <scalbn+0x36>
 80058b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80058bc:	4303      	orrs	r3, r0
 80058be:	d039      	beq.n	8005934 <scalbn+0x8c>
 80058c0:	4b33      	ldr	r3, [pc, #204]	; (8005990 <scalbn+0xe8>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f7fa feb4 	bl	8000630 <__aeabi_dmul>
 80058c8:	4b32      	ldr	r3, [pc, #200]	; (8005994 <scalbn+0xec>)
 80058ca:	4604      	mov	r4, r0
 80058cc:	429f      	cmp	r7, r3
 80058ce:	460d      	mov	r5, r1
 80058d0:	da0f      	bge.n	80058f2 <scalbn+0x4a>
 80058d2:	a32b      	add	r3, pc, #172	; (adr r3, 8005980 <scalbn+0xd8>)
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f7fa feaa 	bl	8000630 <__aeabi_dmul>
 80058dc:	e006      	b.n	80058ec <scalbn+0x44>
 80058de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80058e2:	4296      	cmp	r6, r2
 80058e4:	d10a      	bne.n	80058fc <scalbn+0x54>
 80058e6:	4602      	mov	r2, r0
 80058e8:	f7fa fcec 	bl	80002c4 <__adddf3>
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	e020      	b.n	8005934 <scalbn+0x8c>
 80058f2:	460b      	mov	r3, r1
 80058f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80058f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80058fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005900:	19b9      	adds	r1, r7, r6
 8005902:	4291      	cmp	r1, r2
 8005904:	dd0e      	ble.n	8005924 <scalbn+0x7c>
 8005906:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800590a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800590e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005912:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005916:	4820      	ldr	r0, [pc, #128]	; (8005998 <scalbn+0xf0>)
 8005918:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800591c:	a31a      	add	r3, pc, #104	; (adr r3, 8005988 <scalbn+0xe0>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	e7d9      	b.n	80058d8 <scalbn+0x30>
 8005924:	2900      	cmp	r1, #0
 8005926:	dd08      	ble.n	800593a <scalbn+0x92>
 8005928:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800592c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005930:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005934:	4620      	mov	r0, r4
 8005936:	4629      	mov	r1, r5
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800593e:	da12      	bge.n	8005966 <scalbn+0xbe>
 8005940:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005944:	429f      	cmp	r7, r3
 8005946:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800594a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800594e:	dcdc      	bgt.n	800590a <scalbn+0x62>
 8005950:	a30b      	add	r3, pc, #44	; (adr r3, 8005980 <scalbn+0xd8>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800595a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800595e:	480f      	ldr	r0, [pc, #60]	; (800599c <scalbn+0xf4>)
 8005960:	f041 011f 	orr.w	r1, r1, #31
 8005964:	e7b8      	b.n	80058d8 <scalbn+0x30>
 8005966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800596a:	3136      	adds	r1, #54	; 0x36
 800596c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005970:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005974:	4620      	mov	r0, r4
 8005976:	4629      	mov	r1, r5
 8005978:	2200      	movs	r2, #0
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <scalbn+0xf8>)
 800597c:	e7ac      	b.n	80058d8 <scalbn+0x30>
 800597e:	bf00      	nop
 8005980:	c2f8f359 	.word	0xc2f8f359
 8005984:	01a56e1f 	.word	0x01a56e1f
 8005988:	8800759c 	.word	0x8800759c
 800598c:	7e37e43c 	.word	0x7e37e43c
 8005990:	43500000 	.word	0x43500000
 8005994:	ffff3cb0 	.word	0xffff3cb0
 8005998:	8800759c 	.word	0x8800759c
 800599c:	c2f8f359 	.word	0xc2f8f359
 80059a0:	3c900000 	.word	0x3c900000

080059a4 <abort>:
 80059a4:	2006      	movs	r0, #6
 80059a6:	b508      	push	{r3, lr}
 80059a8:	f000 f90a 	bl	8005bc0 <raise>
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7fc fa18 	bl	8001de2 <_exit>
	...

080059b4 <__errno>:
 80059b4:	4b01      	ldr	r3, [pc, #4]	; (80059bc <__errno+0x8>)
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	2000000c 	.word	0x2000000c

080059c0 <__libc_init_array>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	2600      	movs	r6, #0
 80059c4:	4d0c      	ldr	r5, [pc, #48]	; (80059f8 <__libc_init_array+0x38>)
 80059c6:	4c0d      	ldr	r4, [pc, #52]	; (80059fc <__libc_init_array+0x3c>)
 80059c8:	1b64      	subs	r4, r4, r5
 80059ca:	10a4      	asrs	r4, r4, #2
 80059cc:	42a6      	cmp	r6, r4
 80059ce:	d109      	bne.n	80059e4 <__libc_init_array+0x24>
 80059d0:	f000 f920 	bl	8005c14 <_init>
 80059d4:	2600      	movs	r6, #0
 80059d6:	4d0a      	ldr	r5, [pc, #40]	; (8005a00 <__libc_init_array+0x40>)
 80059d8:	4c0a      	ldr	r4, [pc, #40]	; (8005a04 <__libc_init_array+0x44>)
 80059da:	1b64      	subs	r4, r4, r5
 80059dc:	10a4      	asrs	r4, r4, #2
 80059de:	42a6      	cmp	r6, r4
 80059e0:	d105      	bne.n	80059ee <__libc_init_array+0x2e>
 80059e2:	bd70      	pop	{r4, r5, r6, pc}
 80059e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e8:	4798      	blx	r3
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7ee      	b.n	80059cc <__libc_init_array+0xc>
 80059ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f2:	4798      	blx	r3
 80059f4:	3601      	adds	r6, #1
 80059f6:	e7f2      	b.n	80059de <__libc_init_array+0x1e>
 80059f8:	08005e38 	.word	0x08005e38
 80059fc:	08005e38 	.word	0x08005e38
 8005a00:	08005e38 	.word	0x08005e38
 8005a04:	08005e3c 	.word	0x08005e3c

08005a08 <malloc>:
 8005a08:	4b02      	ldr	r3, [pc, #8]	; (8005a14 <malloc+0xc>)
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f000 b82b 	b.w	8005a68 <_malloc_r>
 8005a12:	bf00      	nop
 8005a14:	2000000c 	.word	0x2000000c

08005a18 <memset>:
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4402      	add	r2, r0
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d100      	bne.n	8005a22 <memset+0xa>
 8005a20:	4770      	bx	lr
 8005a22:	f803 1b01 	strb.w	r1, [r3], #1
 8005a26:	e7f9      	b.n	8005a1c <memset+0x4>

08005a28 <sbrk_aligned>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	4e0e      	ldr	r6, [pc, #56]	; (8005a64 <sbrk_aligned+0x3c>)
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	6831      	ldr	r1, [r6, #0]
 8005a30:	4605      	mov	r5, r0
 8005a32:	b911      	cbnz	r1, 8005a3a <sbrk_aligned+0x12>
 8005a34:	f000 f88c 	bl	8005b50 <_sbrk_r>
 8005a38:	6030      	str	r0, [r6, #0]
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 f887 	bl	8005b50 <_sbrk_r>
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	d00a      	beq.n	8005a5c <sbrk_aligned+0x34>
 8005a46:	1cc4      	adds	r4, r0, #3
 8005a48:	f024 0403 	bic.w	r4, r4, #3
 8005a4c:	42a0      	cmp	r0, r4
 8005a4e:	d007      	beq.n	8005a60 <sbrk_aligned+0x38>
 8005a50:	1a21      	subs	r1, r4, r0
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 f87c 	bl	8005b50 <_sbrk_r>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d101      	bne.n	8005a60 <sbrk_aligned+0x38>
 8005a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a60:	4620      	mov	r0, r4
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	200004a4 	.word	0x200004a4

08005a68 <_malloc_r>:
 8005a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6c:	1ccd      	adds	r5, r1, #3
 8005a6e:	f025 0503 	bic.w	r5, r5, #3
 8005a72:	3508      	adds	r5, #8
 8005a74:	2d0c      	cmp	r5, #12
 8005a76:	bf38      	it	cc
 8005a78:	250c      	movcc	r5, #12
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	db01      	blt.n	8005a84 <_malloc_r+0x1c>
 8005a80:	42a9      	cmp	r1, r5
 8005a82:	d905      	bls.n	8005a90 <_malloc_r+0x28>
 8005a84:	230c      	movs	r3, #12
 8005a86:	2600      	movs	r6, #0
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a90:	4e2e      	ldr	r6, [pc, #184]	; (8005b4c <_malloc_r+0xe4>)
 8005a92:	f000 f8b1 	bl	8005bf8 <__malloc_lock>
 8005a96:	6833      	ldr	r3, [r6, #0]
 8005a98:	461c      	mov	r4, r3
 8005a9a:	bb34      	cbnz	r4, 8005aea <_malloc_r+0x82>
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f7ff ffc2 	bl	8005a28 <sbrk_aligned>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	d14d      	bne.n	8005b46 <_malloc_r+0xde>
 8005aaa:	6834      	ldr	r4, [r6, #0]
 8005aac:	4626      	mov	r6, r4
 8005aae:	2e00      	cmp	r6, #0
 8005ab0:	d140      	bne.n	8005b34 <_malloc_r+0xcc>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	eb04 0803 	add.w	r8, r4, r3
 8005abc:	f000 f848 	bl	8005b50 <_sbrk_r>
 8005ac0:	4580      	cmp	r8, r0
 8005ac2:	d13a      	bne.n	8005b3a <_malloc_r+0xd2>
 8005ac4:	6821      	ldr	r1, [r4, #0]
 8005ac6:	3503      	adds	r5, #3
 8005ac8:	1a6d      	subs	r5, r5, r1
 8005aca:	f025 0503 	bic.w	r5, r5, #3
 8005ace:	3508      	adds	r5, #8
 8005ad0:	2d0c      	cmp	r5, #12
 8005ad2:	bf38      	it	cc
 8005ad4:	250c      	movcc	r5, #12
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7ff ffa5 	bl	8005a28 <sbrk_aligned>
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d02b      	beq.n	8005b3a <_malloc_r+0xd2>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	442b      	add	r3, r5
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	e00e      	b.n	8005b08 <_malloc_r+0xa0>
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	1b52      	subs	r2, r2, r5
 8005aee:	d41e      	bmi.n	8005b2e <_malloc_r+0xc6>
 8005af0:	2a0b      	cmp	r2, #11
 8005af2:	d916      	bls.n	8005b22 <_malloc_r+0xba>
 8005af4:	1961      	adds	r1, r4, r5
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	6025      	str	r5, [r4, #0]
 8005afa:	bf18      	it	ne
 8005afc:	6059      	strne	r1, [r3, #4]
 8005afe:	6863      	ldr	r3, [r4, #4]
 8005b00:	bf08      	it	eq
 8005b02:	6031      	streq	r1, [r6, #0]
 8005b04:	5162      	str	r2, [r4, r5]
 8005b06:	604b      	str	r3, [r1, #4]
 8005b08:	4638      	mov	r0, r7
 8005b0a:	f104 060b 	add.w	r6, r4, #11
 8005b0e:	f000 f879 	bl	8005c04 <__malloc_unlock>
 8005b12:	f026 0607 	bic.w	r6, r6, #7
 8005b16:	1d23      	adds	r3, r4, #4
 8005b18:	1af2      	subs	r2, r6, r3
 8005b1a:	d0b6      	beq.n	8005a8a <_malloc_r+0x22>
 8005b1c:	1b9b      	subs	r3, r3, r6
 8005b1e:	50a3      	str	r3, [r4, r2]
 8005b20:	e7b3      	b.n	8005a8a <_malloc_r+0x22>
 8005b22:	6862      	ldr	r2, [r4, #4]
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	bf0c      	ite	eq
 8005b28:	6032      	streq	r2, [r6, #0]
 8005b2a:	605a      	strne	r2, [r3, #4]
 8005b2c:	e7ec      	b.n	8005b08 <_malloc_r+0xa0>
 8005b2e:	4623      	mov	r3, r4
 8005b30:	6864      	ldr	r4, [r4, #4]
 8005b32:	e7b2      	b.n	8005a9a <_malloc_r+0x32>
 8005b34:	4634      	mov	r4, r6
 8005b36:	6876      	ldr	r6, [r6, #4]
 8005b38:	e7b9      	b.n	8005aae <_malloc_r+0x46>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	f000 f860 	bl	8005c04 <__malloc_unlock>
 8005b44:	e7a1      	b.n	8005a8a <_malloc_r+0x22>
 8005b46:	6025      	str	r5, [r4, #0]
 8005b48:	e7de      	b.n	8005b08 <_malloc_r+0xa0>
 8005b4a:	bf00      	nop
 8005b4c:	200004a0 	.word	0x200004a0

08005b50 <_sbrk_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	2300      	movs	r3, #0
 8005b54:	4d05      	ldr	r5, [pc, #20]	; (8005b6c <_sbrk_r+0x1c>)
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	f7fc f94c 	bl	8001df8 <_sbrk>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_sbrk_r+0x1a>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_sbrk_r+0x1a>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	200004a8 	.word	0x200004a8

08005b70 <_raise_r>:
 8005b70:	291f      	cmp	r1, #31
 8005b72:	b538      	push	{r3, r4, r5, lr}
 8005b74:	4604      	mov	r4, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	d904      	bls.n	8005b84 <_raise_r+0x14>
 8005b7a:	2316      	movs	r3, #22
 8005b7c:	6003      	str	r3, [r0, #0]
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b86:	b112      	cbz	r2, 8005b8e <_raise_r+0x1e>
 8005b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b8c:	b94b      	cbnz	r3, 8005ba2 <_raise_r+0x32>
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 f830 	bl	8005bf4 <_getpid_r>
 8005b94:	462a      	mov	r2, r5
 8005b96:	4601      	mov	r1, r0
 8005b98:	4620      	mov	r0, r4
 8005b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9e:	f000 b817 	b.w	8005bd0 <_kill_r>
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d00a      	beq.n	8005bbc <_raise_r+0x4c>
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	d103      	bne.n	8005bb2 <_raise_r+0x42>
 8005baa:	2316      	movs	r3, #22
 8005bac:	6003      	str	r3, [r0, #0]
 8005bae:	2001      	movs	r0, #1
 8005bb0:	e7e7      	b.n	8005b82 <_raise_r+0x12>
 8005bb2:	2400      	movs	r4, #0
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bba:	4798      	blx	r3
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e7e0      	b.n	8005b82 <_raise_r+0x12>

08005bc0 <raise>:
 8005bc0:	4b02      	ldr	r3, [pc, #8]	; (8005bcc <raise+0xc>)
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	f7ff bfd3 	b.w	8005b70 <_raise_r>
 8005bca:	bf00      	nop
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <_kill_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4d06      	ldr	r5, [pc, #24]	; (8005bf0 <_kill_r+0x20>)
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	602b      	str	r3, [r5, #0]
 8005bde:	f7fc f8f0 	bl	8001dc2 <_kill>
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d102      	bne.n	8005bec <_kill_r+0x1c>
 8005be6:	682b      	ldr	r3, [r5, #0]
 8005be8:	b103      	cbz	r3, 8005bec <_kill_r+0x1c>
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	bd38      	pop	{r3, r4, r5, pc}
 8005bee:	bf00      	nop
 8005bf0:	200004a8 	.word	0x200004a8

08005bf4 <_getpid_r>:
 8005bf4:	f7fc b8de 	b.w	8001db4 <_getpid>

08005bf8 <__malloc_lock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__malloc_lock+0x8>)
 8005bfa:	f000 b809 	b.w	8005c10 <__retarget_lock_acquire_recursive>
 8005bfe:	bf00      	nop
 8005c00:	200004ac 	.word	0x200004ac

08005c04 <__malloc_unlock>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__malloc_unlock+0x8>)
 8005c06:	f000 b804 	b.w	8005c12 <__retarget_lock_release_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	200004ac 	.word	0x200004ac

08005c10 <__retarget_lock_acquire_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_release_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <_init>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

08005c20 <_fini>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr
