
Reaction Wheel Flight code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004524  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004638  08004638  00014638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004838  08004838  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004838  08004838  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004838  08004838  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080048b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080048b0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a229  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d18  00000000  00000000  0002a2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae6e  00000000  00000000  0002d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc0c  00000000  00000000  000482f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0cc  00000000  00000000  00053f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1fce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000346c  00000000  00000000  000e2020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800461c 	.word	0x0800461c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800461c 	.word	0x0800461c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2uiz>:
 8000f5c:	0042      	lsls	r2, r0, #1
 8000f5e:	d20e      	bcs.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30b      	bcc.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d409      	bmi.n	8000f84 <__aeabi_f2uiz+0x28>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f88:	d101      	bne.n	8000f8e <__aeabi_f2uiz+0x32>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_f2uiz+0x38>
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f92:	4770      	bx	lr
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_ZN20Reversable_PWM_MotorC1EP17TIM_HandleTypeDefP11TIM_TypeDeftfffff>:
 *      Author: kking
 */

#include "reversable_pwm_motor.h"

Reversable_PWM_Motor::Reversable_PWM_Motor(TIM_HandleTypeDef* timer, TIM_TypeDef* timer_address, uint16_t channel, float deadzone_min, float deadzone_max, float arming_dc, float min_duty_cycle, float max_duty_cycle)
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	807b      	strh	r3, [r7, #2]
  timer_address(timer_address),
  channel(channel),
  min_forward_dc(0),
  max_forward_dc(0),
  min_reverse_dc(0),
  max_reverse_dc(0)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6a3a      	ldr	r2, [r7, #32]
 8000fd6:	619a      	str	r2, [r3, #24]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	869a      	strh	r2, [r3, #52]	; 0x34
{
	//HAL_TIM_PWM_Start(this->timer, this->channel);

	neutral_point = 0.5 * (deadzone_min + deadzone_max);
 800100a:	69f9      	ldr	r1, [r7, #28]
 800100c:	69b8      	ldr	r0, [r7, #24]
 800100e:	f7ff fe27 	bl	8000c60 <__addsf3>
 8001012:	4603      	mov	r3, r0
 8001014:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f899 	bl	8000150 <__aeabi_fmul>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	615a      	str	r2, [r3, #20]

	min_forward_dc = deadzone_max; //Slowest forward speed
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	61da      	str	r2, [r3, #28]
	max_forward_dc = max_duty_cycle; //Fastest forward speed
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001030:	621a      	str	r2, [r3, #32]

	min_reverse_dc = min_duty_cycle; //Fastest reverse speed
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
	max_reverse_dc = deadzone_min; //Slowest reverse speed
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ZN20Reversable_PWM_Motor3armEv>:

void Reversable_PWM_Motor::arm()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	f000 fbce 	bl	80017f4 <HAL_Delay>
	current_value = arming_dc;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
	current_pwm_value = current_value * 65535;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	490d      	ldr	r1, [pc, #52]	; (800109c <_ZN20Reversable_PWM_Motor3armEv+0x54>)
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f872 	bl	8000150 <__aeabi_fmul>
 800106c:	4603      	mov	r3, r0
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff74 	bl	8000f5c <__aeabi_f2uiz>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	605a      	str	r2, [r3, #4]
	timer_address->CCR2 = current_pwm_value;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6852      	ldr	r2, [r2, #4]
 8001082:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f000 fbb4 	bl	80017f4 <HAL_Delay>
	has_armed = true;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	477fff00 	.word	0x477fff00

080010a0 <_ZN20Reversable_PWM_Motor8setSpeedEbf>:

//True for speed is clockwise
void Reversable_PWM_Motor::setSpeed(bool clockwise, float speed)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	460b      	mov	r3, r1
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	72fb      	strb	r3, [r7, #11]
	if(!clockwise) speed *= -1; //-1 for reverse
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <_ZN20Reversable_PWM_Motor8setSpeedEbf+0x22>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	607b      	str	r3, [r7, #4]

	if(clockwise)
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d019      	beq.n	80010fc <_ZN20Reversable_PWM_Motor8setSpeedEbf+0x5c>
	{
		current_value = ((max_forward_dc - min_forward_dc) * speed) + min_forward_dc;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4610      	mov	r0, r2
 80010d4:	f7ff fdc2 	bl	8000c5c <__aeabi_fsub>
 80010d8:	4603      	mov	r3, r0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f837 	bl	8000150 <__aeabi_fmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f7ff fdb7 	bl	8000c60 <__addsf3>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	e017      	b.n	800112c <_ZN20Reversable_PWM_Motor8setSpeedEbf+0x8c>
	}
	else
	{
		current_value = max_reverse_dc - ((max_reverse_dc - min_reverse_dc) * speed);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f7ff fda6 	bl	8000c5c <__aeabi_fsub>
 8001110:	4603      	mov	r3, r0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f81b 	bl	8000150 <__aeabi_fmul>
 800111a:	4603      	mov	r3, r0
 800111c:	4619      	mov	r1, r3
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff fd9c 	bl	8000c5c <__aeabi_fsub>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]
	}

	current_pwm_value = current_value * 65535;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <_ZN20Reversable_PWM_Motor8setSpeedEbf+0xb8>)
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f80c 	bl	8000150 <__aeabi_fmul>
 8001138:	4603      	mov	r3, r0
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff0e 	bl	8000f5c <__aeabi_f2uiz>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	605a      	str	r2, [r3, #4]
	timer_address->CCR2 = current_pwm_value;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	6852      	ldr	r2, [r2, #4]
 800114e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	477fff00 	.word	0x477fff00
 800115c:	00000000 	.word	0x00000000

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b08b      	sub	sp, #44	; 0x2c
 8001164:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fae3 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
    SystemClock_Config();
 800116a:	f000 f86b 	bl	8001244 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800116e:	f000 f961 	bl	8001434 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 8001172:	f000 f941 	bl	80013f8 <_ZL11MX_DMA_Initv>
    MX_TIM2_Init();
 8001176:	f000 f8b1 	bl	80012dc <_ZL12MX_TIM2_Initv>
    /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800117a:	2104      	movs	r1, #4
 800117c:	482a      	ldr	r0, [pc, #168]	; (8001228 <main+0xc8>)
 800117e:	f001 fbd5 	bl	800292c <HAL_TIM_PWM_Start>
  	0.066,         // Deadzone min duty cycle
  	0.071,        // Deadzone max duty cycle
  	0.07,          // Arming duty cycle
  	0.06,          // Minimum duty cycle
  	0.08           // Maximum duty cycle
    );
 8001182:	2038      	movs	r0, #56	; 0x38
 8001184:	f002 f900 	bl	8003388 <_Znwj>
 8001188:	4603      	mov	r3, r0
 800118a:	461c      	mov	r4, r3
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <main+0xcc>)
 800118e:	9304      	str	r3, [sp, #16]
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <main+0xd0>)
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <main+0xd4>)
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <main+0xd8>)
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <main+0xdc>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2304      	movs	r3, #4
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a6:	4920      	ldr	r1, [pc, #128]	; (8001228 <main+0xc8>)
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff fef7 	bl	8000f9c <_ZN20Reversable_PWM_MotorC1EP17TIM_HandleTypeDefP11TIM_TypeDeftfffff>
 80011ae:	60bc      	str	r4, [r7, #8]

    motor->arm();
 80011b0:	68b8      	ldr	r0, [r7, #8]
 80011b2:	f7ff ff49 	bl	8001048 <_ZN20Reversable_PWM_Motor3armEv>
    //uint8_t START_BNO_ALGO[21] = {0x15, 0x00, 0x02, CARGO_NO, 0xFD, 0x28, 0x00, 0x00, 0x00, 0x20, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    //HAL_StatusTypeDef res = HAL_I2C_Mem_Write(&hi2c1, 0x4A << 1, 0x0, 1, START_BNO_ALGO, 21, 1000);

    while (1)
    {
  	  float i = 0.2 * sin(HAL_GetTick() / 2000.0);
 80011b6:	f000 fb13 	bl	80017e0 <HAL_GetTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9bd 	bl	800053c <__aeabi_ui2d>
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <main+0xe0>)
 80011c8:	f7ff fb5c 	bl	8000884 <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f002 f8f2 	bl	80033bc <sin>
 80011d8:	a311      	add	r3, pc, #68	; (adr r3, 8001220 <main+0xc0>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fa27 	bl	8000630 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fce3 	bl	8000bb4 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	607b      	str	r3, [r7, #4]
  	  //if(i <= 0.2 && i >= -0.2) i = 0.0;
  	  bool dir = true;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
  	  if(i < 0.0) dir = false;
 80011f6:	f04f 0100 	mov.w	r1, #0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fe86 	bl	8000f0c <__aeabi_fcmplt>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <main+0xaa>
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
  	  motor->setSpeed(dir, i);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4619      	mov	r1, r3
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff ff45 	bl	80010a0 <_ZN20Reversable_PWM_Motor8setSpeedEbf>
  	  HAL_Delay(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f000 faec 	bl	80017f4 <HAL_Delay>
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
 800121c:	e7cb      	b.n	80011b6 <main+0x56>
 800121e:	bf00      	nop
 8001220:	9999999a 	.word	0x9999999a
 8001224:	3fc99999 	.word	0x3fc99999
 8001228:	2000008c 	.word	0x2000008c
 800122c:	3da3d70a 	.word	0x3da3d70a
 8001230:	3d75c28f 	.word	0x3d75c28f
 8001234:	3d8f5c29 	.word	0x3d8f5c29
 8001238:	3d916873 	.word	0x3d916873
 800123c:	3d872b02 	.word	0x3d872b02
 8001240:	409f4000 	.word	0x409f4000

08001244 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b090      	sub	sp, #64	; 0x40
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	2228      	movs	r2, #40	; 0x28
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f8e4 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126a:	2301      	movs	r3, #1
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126e:	2310      	movs	r3, #16
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001276:	2300      	movs	r3, #0
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800127a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fecb 	bl	8002020 <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800129a:	f000 f8ed 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2102      	movs	r1, #2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 f933 	bl	8002524 <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80012ce:	f000 f8d3 	bl	8001478 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3740      	adds	r7, #64	; 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	; 0x38
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 800130e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 8001316:	2214      	movs	r2, #20
 8001318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 8001322:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001334:	482f      	ldr	r0, [pc, #188]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 8001336:	f001 fa51 	bl	80027dc <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800134a:	f000 f895 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001358:	4619      	mov	r1, r3
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 800135c:	f001 fc4a 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001370:	f000 f882 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001374:	481f      	ldr	r0, [pc, #124]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 8001376:	f001 fa80 	bl	800287a <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800138a:	f000 f875 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	4619      	mov	r1, r3
 800139c:	4815      	ldr	r0, [pc, #84]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 800139e:	f001 ff95 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80013b2:	f000 f861 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b6:	2360      	movs	r3, #96	; 0x60
 80013b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2204      	movs	r2, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 80013ce:	f001 fb4f 	bl	8002a70 <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 80013e2:	f000 f849 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <_ZL12MX_TIM2_Initv+0x118>)
 80013e8:	f000 f8bc 	bl	8001564 <HAL_TIM_MspPostInit>

}
 80013ec:	bf00      	nop
 80013ee:	3738      	adds	r7, #56	; 0x38
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000008c 	.word	0x2000008c

080013f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <_ZL11MX_DMA_Initv+0x38>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <_ZL11MX_DMA_Initv+0x38>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <_ZL11MX_DMA_Initv+0x38>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2011      	movs	r0, #17
 800141c:	f000 fae5 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001420:	2011      	movs	r0, #17
 8001422:	f000 fafe 	bl	8001a22 <HAL_NVIC_EnableIRQ>

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000

08001434 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <_ZL12MX_GPIO_Initv+0x40>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <_ZL12MX_GPIO_Initv+0x40>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <_ZL12MX_GPIO_Initv+0x40>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_ZL12MX_GPIO_Initv+0x40>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <_ZL12MX_GPIO_Initv+0x40>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <_ZL12MX_GPIO_Initv+0x40>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_MspInit+0x40>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_MspInit+0x40>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_MspInit+0x40>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_MspInit+0x40>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_MspInit+0x40>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_MspInit+0x40>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d139      	bne.n	800154e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_TIM_Base_MspInit+0x90>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_TIM_Base_MspInit+0x98>)
 80014f6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 800150c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001510:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 8001514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001518:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 8001528:	f000 fa96 	bl	8001a58 <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001532:	f7ff ffa1 	bl	8001478 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_TIM_Base_MspInit+0x94>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	200000d4 	.word	0x200000d4
 8001560:	40020080 	.word	0x40020080

08001564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001582:	d117      	bne.n	80015b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_TIM_MspPostInit+0x58>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_TIM_MspPostInit+0x58>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_TIM_MspPostInit+0x58>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <HAL_TIM_MspPostInit+0x5c>)
 80015b0:	f000 fbb2 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f8d7 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <DMA1_Channel7_IRQHandler+0x10>)
 800161a:	f000 fa77 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200000d4 	.word	0x200000d4

08001628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <_kill>:

int _kill(int pid, int sig)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001640:	f002 febc 	bl	80043bc <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2216      	movs	r2, #22
 8001648:	601a      	str	r2, [r3, #0]
  return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_exit>:

void _exit (int status)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800165e:	f04f 31ff 	mov.w	r1, #4294967295
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffe7 	bl	8001636 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001668:	e7fe      	b.n	8001668 <_exit+0x12>
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f002 fe8e 	bl	80043bc <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20005000 	.word	0x20005000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	20000118 	.word	0x20000118
 80016d4:	20000138 	.word	0x20000138

080016d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e4:	f7ff fff8 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ea:	490c      	ldr	r1, [pc, #48]	; (800171c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001700:	4c09      	ldr	r4, [pc, #36]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170e:	f002 fe5b 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001712:	f7ff fd25 	bl	8001160 <main>
  bx lr
 8001716:	4770      	bx	lr
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001720:	08004840 	.word	0x08004840
  ldr r2, =_sbss
 8001724:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001728:	20000134 	.word	0x20000134

0800172c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_2_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x28>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x28>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f947 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fe9a 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40022000 	.word	0x40022000

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f95f 	bl	8001a3e <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f927 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x20>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_IncTick+0x20>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000008 	.word	0x20000008
 80017dc:	2000011c 	.word	0x2000011c

080017e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_GetTick+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	2000011c 	.word	0x2000011c

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffe0 	bl	80017e0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4906      	ldr	r1, [pc, #24]	; (80018d4 <__NVIC_EnableIRQ+0x34>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff90 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff2d 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff42 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff90 	bl	800192c <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5f 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff35 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e043      	b.n	8001af6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_DMA_Init+0xa8>)
 8001a76:	4413      	add	r3, r2
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_DMA_Init+0xac>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	009a      	lsls	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <HAL_DMA_Init+0xb0>)
 8001a8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001aa2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001aa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	bffdfff8 	.word	0xbffdfff8
 8001b04:	cccccccd 	.word	0xcccccccd
 8001b08:	40020000 	.word	0x40020000

08001b0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2204      	movs	r2, #4
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d04f      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0xc8>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d04a      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0204 	bic.w	r2, r2, #4
 8001b5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <HAL_DMA_IRQHandler+0x1f0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d029      	beq.n	8001bba <HAL_DMA_IRQHandler+0xae>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_DMA_IRQHandler+0x1f4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xaa>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_DMA_IRQHandler+0x1f8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01a      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0xa4>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a62      	ldr	r2, [pc, #392]	; (8001d08 <HAL_DMA_IRQHandler+0x1fc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d012      	beq.n	8001baa <HAL_DMA_IRQHandler+0x9e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a60      	ldr	r2, [pc, #384]	; (8001d0c <HAL_DMA_IRQHandler+0x200>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x98>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5f      	ldr	r2, [pc, #380]	; (8001d10 <HAL_DMA_IRQHandler+0x204>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d102      	bne.n	8001b9e <HAL_DMA_IRQHandler+0x92>
 8001b98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9c:	e00e      	b.n	8001bbc <HAL_DMA_IRQHandler+0xb0>
 8001b9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ba2:	e00b      	b.n	8001bbc <HAL_DMA_IRQHandler+0xb0>
 8001ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ba8:	e008      	b.n	8001bbc <HAL_DMA_IRQHandler+0xb0>
 8001baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bae:	e005      	b.n	8001bbc <HAL_DMA_IRQHandler+0xb0>
 8001bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb4:	e002      	b.n	8001bbc <HAL_DMA_IRQHandler+0xb0>
 8001bb6:	2340      	movs	r3, #64	; 0x40
 8001bb8:	e000      	b.n	8001bbc <HAL_DMA_IRQHandler+0xb0>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	4a55      	ldr	r2, [pc, #340]	; (8001d14 <HAL_DMA_IRQHandler+0x208>)
 8001bbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8094 	beq.w	8001cf2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bd2:	e08e      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2202      	movs	r2, #2
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d056      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x186>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d051      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10b      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 020a 	bic.w	r2, r2, #10
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a38      	ldr	r2, [pc, #224]	; (8001cfc <HAL_DMA_IRQHandler+0x1f0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d029      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x166>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a37      	ldr	r2, [pc, #220]	; (8001d00 <HAL_DMA_IRQHandler+0x1f4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x162>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a35      	ldr	r2, [pc, #212]	; (8001d04 <HAL_DMA_IRQHandler+0x1f8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01a      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x15c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a34      	ldr	r2, [pc, #208]	; (8001d08 <HAL_DMA_IRQHandler+0x1fc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d012      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x156>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a32      	ldr	r2, [pc, #200]	; (8001d0c <HAL_DMA_IRQHandler+0x200>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00a      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x150>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a31      	ldr	r2, [pc, #196]	; (8001d10 <HAL_DMA_IRQHandler+0x204>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d102      	bne.n	8001c56 <HAL_DMA_IRQHandler+0x14a>
 8001c50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c54:	e00e      	b.n	8001c74 <HAL_DMA_IRQHandler+0x168>
 8001c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5a:	e00b      	b.n	8001c74 <HAL_DMA_IRQHandler+0x168>
 8001c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c60:	e008      	b.n	8001c74 <HAL_DMA_IRQHandler+0x168>
 8001c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c66:	e005      	b.n	8001c74 <HAL_DMA_IRQHandler+0x168>
 8001c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6c:	e002      	b.n	8001c74 <HAL_DMA_IRQHandler+0x168>
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e000      	b.n	8001c74 <HAL_DMA_IRQHandler+0x168>
 8001c72:	2302      	movs	r3, #2
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_DMA_IRQHandler+0x208>)
 8001c76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d034      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c90:	e02f      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2208      	movs	r2, #8
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d028      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x1e8>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d023      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 020e 	bic.w	r2, r2, #14
 8001cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    }
  }
  return;
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
}
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020008 	.word	0x40020008
 8001d00:	4002001c 	.word	0x4002001c
 8001d04:	40020030 	.word	0x40020030
 8001d08:	40020044 	.word	0x40020044
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	4002006c 	.word	0x4002006c
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e169      	b.n	8002000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8158 	bne.w	8001ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a9a      	ldr	r2, [pc, #616]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a98      	ldr	r2, [pc, #608]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a96      	ldr	r2, [pc, #600]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a96      	ldr	r2, [pc, #600]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a90      	ldr	r2, [pc, #576]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a79      	ldr	r2, [pc, #484]	; (8001fcc <HAL_GPIO_Init+0x2b4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80b1 	beq.w	8001ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_GPIO_Init+0x1ec>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3f      	ldr	r2, [pc, #252]	; (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00d      	beq.n	8001f00 <HAL_GPIO_Init+0x1e8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x1e4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <HAL_GPIO_Init+0x2cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_GPIO_Init+0x1e0>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e006      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f04:	2300      	movs	r3, #0
 8001f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f16:	492f      	ldr	r1, [pc, #188]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	492c      	ldr	r1, [pc, #176]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4928      	ldr	r1, [pc, #160]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4922      	ldr	r1, [pc, #136]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	491e      	ldr	r1, [pc, #120]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4914      	ldr	r1, [pc, #80]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e021      	b.n	8001ffa <HAL_GPIO_Init+0x2e2>
 8001fb6:	bf00      	nop
 8001fb8:	10320000 	.word	0x10320000
 8001fbc:	10310000 	.word	0x10310000
 8001fc0:	10220000 	.word	0x10220000
 8001fc4:	10210000 	.word	0x10210000
 8001fc8:	10120000 	.word	0x10120000
 8001fcc:	10110000 	.word	0x10110000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	40011400 	.word	0x40011400
 8001fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_GPIO_Init+0x304>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_GPIO_Init+0x304>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f ae8e 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	372c      	adds	r7, #44	; 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e272      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8087 	beq.w	800214e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b04      	cmp	r3, #4
 800204a:	d00c      	beq.n	8002066 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800204c:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b08      	cmp	r3, #8
 8002056:	d112      	bne.n	800207e <HAL_RCC_OscConfig+0x5e>
 8002058:	4b8c      	ldr	r3, [pc, #560]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d10b      	bne.n	800207e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002066:	4b89      	ldr	r3, [pc, #548]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d06c      	beq.n	800214c <HAL_RCC_OscConfig+0x12c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d168      	bne.n	800214c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e24c      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x76>
 8002088:	4b80      	ldr	r3, [pc, #512]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a7f      	ldr	r2, [pc, #508]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e02e      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4b7b      	ldr	r3, [pc, #492]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a7a      	ldr	r2, [pc, #488]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a77      	ldr	r2, [pc, #476]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0xbc>
 80020c2:	4b72      	ldr	r3, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a71      	ldr	r2, [pc, #452]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6e      	ldr	r2, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 80020dc:	4b6b      	ldr	r3, [pc, #428]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb70 	bl	80017e0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fb6c 	bl	80017e0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e200      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0xe4>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fb5c 	bl	80017e0 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff fb58 	bl	80017e0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1ec      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x10c>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d063      	beq.n	8002222 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800215a:	4b4c      	ldr	r3, [pc, #304]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b08      	cmp	r3, #8
 8002170:	d11c      	bne.n	80021ac <HAL_RCC_OscConfig+0x18c>
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x176>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e1c0      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4939      	ldr	r1, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	e03a      	b.n	8002222 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_OscConfig+0x270>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff fb11 	bl	80017e0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff fb0d 	bl	80017e0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1a1      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4927      	ldr	r1, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0x270>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff faf0 	bl	80017e0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7ff faec 	bl	80017e0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e180      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d03a      	beq.n	80022a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d019      	beq.n	800226a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_RCC_OscConfig+0x274>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7ff fad0 	bl	80017e0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002244:	f7ff facc 	bl	80017e0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e160      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002262:	2001      	movs	r0, #1
 8002264:	f000 fa9c 	bl	80027a0 <RCC_Delay>
 8002268:	e01c      	b.n	80022a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_OscConfig+0x274>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7ff fab6 	bl	80017e0 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002276:	e00f      	b.n	8002298 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff fab2 	bl	80017e0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d908      	bls.n	8002298 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e146      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	42420000 	.word	0x42420000
 8002294:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b92      	ldr	r3, [pc, #584]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e9      	bne.n	8002278 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a6 	beq.w	80023fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b8b      	ldr	r3, [pc, #556]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4a87      	ldr	r2, [pc, #540]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	61d3      	str	r3, [r2, #28]
 80022ce:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b82      	ldr	r3, [pc, #520]	; (80024e8 <HAL_RCC_OscConfig+0x4c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b7f      	ldr	r3, [pc, #508]	; (80024e8 <HAL_RCC_OscConfig+0x4c8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7e      	ldr	r2, [pc, #504]	; (80024e8 <HAL_RCC_OscConfig+0x4c8>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7ff fa73 	bl	80017e0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7ff fa6f 	bl	80017e0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b64      	cmp	r3, #100	; 0x64
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e103      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x4c8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x312>
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	e02d      	b.n	800238e <HAL_RCC_OscConfig+0x36e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x334>
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a66      	ldr	r2, [pc, #408]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	e01c      	b.n	800238e <HAL_RCC_OscConfig+0x36e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x356>
 800235c:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a60      	ldr	r2, [pc, #384]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a5d      	ldr	r2, [pc, #372]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e00b      	b.n	800238e <HAL_RCC_OscConfig+0x36e>
 8002376:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d015      	beq.n	80023c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7ff fa23 	bl	80017e0 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7ff fa1f 	bl	80017e0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0b1      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ee      	beq.n	800239e <HAL_RCC_OscConfig+0x37e>
 80023c0:	e014      	b.n	80023ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fa0d 	bl	80017e0 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7ff fa09 	bl	80017e0 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e09b      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ee      	bne.n	80023ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a3b      	ldr	r2, [pc, #236]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8087 	beq.w	8002516 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d061      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d146      	bne.n	80024aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff f9dd 	bl	80017e0 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff f9d9 	bl	80017e0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e06d      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d108      	bne.n	8002464 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4921      	ldr	r1, [pc, #132]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a19      	ldr	r1, [r3, #32]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	430b      	orrs	r3, r1
 8002476:	491b      	ldr	r1, [pc, #108]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff f9ad 	bl	80017e0 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff f9a9 	bl	80017e0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e03d      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x46a>
 80024a8:	e035      	b.n	8002516 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f996 	bl	80017e0 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7ff f992 	bl	80017e0 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e026      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x498>
 80024d6:	e01e      	b.n	8002516 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e019      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
 80024ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x500>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0d0      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d910      	bls.n	8002568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4965      	ldr	r1, [pc, #404]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800258a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d040      	beq.n	8002644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e073      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06b      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4936      	ldr	r1, [pc, #216]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7ff f8e4 	bl	80017e0 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7ff f8e0 	bl	80017e0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e053      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d210      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4922      	ldr	r1, [pc, #136]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1cc>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1d0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f842 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08004638 	.word	0x08004638
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_RCC_GetSysClockFreq+0x94>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b04      	cmp	r3, #4
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x30>
 8002722:	2b08      	cmp	r3, #8
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x36>
 8002726:	e027      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 800272a:	613b      	str	r3, [r7, #16]
      break;
 800272c:	e027      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCC_GetSysClockFreq+0x94>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0c5b      	lsrs	r3, r3, #17
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 800275a:	fb03 f202 	mul.w	r2, r3, r2
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e004      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_RCC_GetSysClockFreq+0xa4>)
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	613b      	str	r3, [r7, #16]
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetSysClockFreq+0x98>)
 800277a:	613b      	str	r3, [r7, #16]
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	693b      	ldr	r3, [r7, #16]
}
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	007a1200 	.word	0x007a1200
 8002794:	08004648 	.word	0x08004648
 8002798:	08004658 	.word	0x08004658
 800279c:	003d0900 	.word	0x003d0900

080027a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <RCC_Delay+0x34>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <RCC_Delay+0x38>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0a5b      	lsrs	r3, r3, #9
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027bc:	bf00      	nop
  }
  while (Delay --);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	60fa      	str	r2, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <RCC_Delay+0x1c>
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	20000000 	.word	0x20000000
 80027d8:	10624dd3 	.word	0x10624dd3

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e041      	b.n	8002872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fe60 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fab2 	bl	8002d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e041      	b.n	8002910 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f839 	bl	8002918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 fa63 	bl	8002d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_TIM_PWM_Start+0x24>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e022      	b.n	8002996 <HAL_TIM_PWM_Start+0x6a>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d109      	bne.n	800296a <HAL_TIM_PWM_Start+0x3e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e015      	b.n	8002996 <HAL_TIM_PWM_Start+0x6a>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d109      	bne.n	8002984 <HAL_TIM_PWM_Start+0x58>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e008      	b.n	8002996 <HAL_TIM_PWM_Start+0x6a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e05e      	b.n	8002a5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_PWM_Start+0x82>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ac:	e013      	b.n	80029d6 <HAL_TIM_PWM_Start+0xaa>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0x92>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029bc:	e00b      	b.n	80029d6 <HAL_TIM_PWM_Start+0xaa>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d104      	bne.n	80029ce <HAL_TIM_PWM_Start+0xa2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	e003      	b.n	80029d6 <HAL_TIM_PWM_Start+0xaa>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2201      	movs	r2, #1
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fc50 	bl	8003284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <HAL_TIM_PWM_Start+0x138>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d107      	bne.n	80029fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_TIM_PWM_Start+0x138>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00e      	beq.n	8002a26 <HAL_TIM_PWM_Start+0xfa>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d009      	beq.n	8002a26 <HAL_TIM_PWM_Start+0xfa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_TIM_PWM_Start+0x13c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_TIM_PWM_Start+0xfa>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_TIM_PWM_Start+0x140>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d111      	bne.n	8002a4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d010      	beq.n	8002a5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a48:	e007      	b.n	8002a5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0ae      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	f200 809f 	bhi.w	8002bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a9e:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002ad9 	.word	0x08002ad9
 8002aa8:	08002bdd 	.word	0x08002bdd
 8002aac:	08002bdd 	.word	0x08002bdd
 8002ab0:	08002bdd 	.word	0x08002bdd
 8002ab4:	08002b19 	.word	0x08002b19
 8002ab8:	08002bdd 	.word	0x08002bdd
 8002abc:	08002bdd 	.word	0x08002bdd
 8002ac0:	08002bdd 	.word	0x08002bdd
 8002ac4:	08002b5b 	.word	0x08002b5b
 8002ac8:	08002bdd 	.word	0x08002bdd
 8002acc:	08002bdd 	.word	0x08002bdd
 8002ad0:	08002bdd 	.word	0x08002bdd
 8002ad4:	08002b9b 	.word	0x08002b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f9b2 	bl	8002e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0208 	orr.w	r2, r2, #8
 8002af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0204 	bic.w	r2, r2, #4
 8002b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6999      	ldr	r1, [r3, #24]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	619a      	str	r2, [r3, #24]
      break;
 8002b16:	e064      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f9f8 	bl	8002f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6999      	ldr	r1, [r3, #24]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	021a      	lsls	r2, r3, #8
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	619a      	str	r2, [r3, #24]
      break;
 8002b58:	e043      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fa41 	bl	8002fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0208 	orr.w	r2, r2, #8
 8002b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0204 	bic.w	r2, r2, #4
 8002b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69d9      	ldr	r1, [r3, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
      break;
 8002b98:	e023      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fa8b 	bl	80030bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	021a      	lsls	r2, r3, #8
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	61da      	str	r2, [r3, #28]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
      break;
 8002be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_ConfigClockSource+0x1c>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0b4      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0x186>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c48:	d03e      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	f200 8087 	bhi.w	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	f000 8086 	beq.w	8002d66 <HAL_TIM_ConfigClockSource+0x172>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d87f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b70      	cmp	r3, #112	; 0x70
 8002c62:	d01a      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0xa6>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d87b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b60      	cmp	r3, #96	; 0x60
 8002c6a:	d050      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x11a>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d877      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b50      	cmp	r3, #80	; 0x50
 8002c72:	d03c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xfa>
 8002c74:	2b50      	cmp	r3, #80	; 0x50
 8002c76:	d873      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d058      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x13a>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d86f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b30      	cmp	r3, #48	; 0x30
 8002c82:	d064      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	2b30      	cmp	r3, #48	; 0x30
 8002c86:	d86b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d060      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d867      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d05a      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	e062      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f000 facc 	bl	8003246 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	609a      	str	r2, [r3, #8]
      break;
 8002cc6:	e04f      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f000 fab5 	bl	8003246 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e03c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 fa2c 	bl	8003158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2150      	movs	r1, #80	; 0x50
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fa83 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e02c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 fa4a 	bl	80031b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2160      	movs	r1, #96	; 0x60
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fa73 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e01c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 fa0c 	bl	8003158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fa63 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e00c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 fa5a 	bl	8003212 <TIM_ITRx_SetConfig>
      break;
 8002d5e:	e003      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e000      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <TIM_Base_SetConfig+0xb8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <TIM_Base_SetConfig+0x30>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d007      	beq.n	8002db4 <TIM_Base_SetConfig+0x30>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <TIM_Base_SetConfig+0xbc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0x30>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <TIM_Base_SetConfig+0xc0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d108      	bne.n	8002dc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <TIM_Base_SetConfig+0xb8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00b      	beq.n	8002de6 <TIM_Base_SetConfig+0x62>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d007      	beq.n	8002de6 <TIM_Base_SetConfig+0x62>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <TIM_Base_SetConfig+0xbc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_Base_SetConfig+0x62>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <TIM_Base_SetConfig+0xc0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d108      	bne.n	8002df8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <TIM_Base_SetConfig+0xb8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d103      	bne.n	8002e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	615a      	str	r2, [r3, #20]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800

08002e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f023 0201 	bic.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 0302 	bic.w	r3, r3, #2
 8002e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <TIM_OC1_SetConfig+0xc8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10c      	bne.n	8002ebe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0308 	bic.w	r3, r3, #8
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <TIM_OC1_SetConfig+0xc8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	621a      	str	r2, [r3, #32]
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00

08002f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f023 0210 	bic.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0320 	bic.w	r3, r3, #32
 8002f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <TIM_OC2_SetConfig+0xd0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10d      	bne.n	8002f90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <TIM_OC2_SetConfig+0xd0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d113      	bne.n	8002fc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	40012c00 	.word	0x40012c00

08002fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_OC3_SetConfig+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10d      	bne.n	8003062 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800304c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <TIM_OC3_SetConfig+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d113      	bne.n	8003092 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00

080030bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	031b      	lsls	r3, r3, #12
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <TIM_OC4_SetConfig+0x98>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d109      	bne.n	8003130 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00

08003158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0201 	bic.w	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f023 030a 	bic.w	r3, r3, #10
 8003194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0210 	bic.w	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	031b      	lsls	r3, r3, #12
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	621a      	str	r2, [r3, #32]
}
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	f043 0307 	orr.w	r3, r3, #7
 8003234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003246:	b480      	push	{r7}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003260:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	431a      	orrs	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4313      	orrs	r3, r2
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2201      	movs	r2, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e046      	b.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d009      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a10      	ldr	r2, [pc, #64]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10c      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4313      	orrs	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800

08003388 <_Znwj>:
 8003388:	2801      	cmp	r0, #1
 800338a:	bf38      	it	cc
 800338c:	2001      	movcc	r0, #1
 800338e:	b510      	push	{r4, lr}
 8003390:	4604      	mov	r4, r0
 8003392:	4620      	mov	r0, r4
 8003394:	f001 f83c 	bl	8004410 <malloc>
 8003398:	b930      	cbnz	r0, 80033a8 <_Znwj+0x20>
 800339a:	f000 f807 	bl	80033ac <_ZSt15get_new_handlerv>
 800339e:	b908      	cbnz	r0, 80033a4 <_Znwj+0x1c>
 80033a0:	f001 f804 	bl	80043ac <abort>
 80033a4:	4780      	blx	r0
 80033a6:	e7f4      	b.n	8003392 <_Znwj+0xa>
 80033a8:	bd10      	pop	{r4, pc}
	...

080033ac <_ZSt15get_new_handlerv>:
 80033ac:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <_ZSt15get_new_handlerv+0xc>)
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	f3bf 8f5b 	dmb	ish
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000120 	.word	0x20000120

080033bc <sin>:
 80033bc:	b530      	push	{r4, r5, lr}
 80033be:	4a20      	ldr	r2, [pc, #128]	; (8003440 <sin+0x84>)
 80033c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033c4:	4293      	cmp	r3, r2
 80033c6:	b087      	sub	sp, #28
 80033c8:	dc06      	bgt.n	80033d8 <sin+0x1c>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2200      	movs	r2, #0
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	f000 fe31 	bl	8004038 <__kernel_sin>
 80033d6:	e006      	b.n	80033e6 <sin+0x2a>
 80033d8:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <sin+0x88>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	dd05      	ble.n	80033ea <sin+0x2e>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	f7fc ff6d 	bl	80002c0 <__aeabi_dsub>
 80033e6:	b007      	add	sp, #28
 80033e8:	bd30      	pop	{r4, r5, pc}
 80033ea:	aa02      	add	r2, sp, #8
 80033ec:	f000 f82c 	bl	8003448 <__ieee754_rem_pio2>
 80033f0:	f000 0003 	and.w	r0, r0, #3
 80033f4:	2801      	cmp	r0, #1
 80033f6:	d009      	beq.n	800340c <sin+0x50>
 80033f8:	2802      	cmp	r0, #2
 80033fa:	d00e      	beq.n	800341a <sin+0x5e>
 80033fc:	b9c0      	cbnz	r0, 8003430 <sin+0x74>
 80033fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003402:	2301      	movs	r3, #1
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800340a:	e7e2      	b.n	80033d2 <sin+0x16>
 800340c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003414:	f000 fa10 	bl	8003838 <__kernel_cos>
 8003418:	e7e5      	b.n	80033e6 <sin+0x2a>
 800341a:	2301      	movs	r3, #1
 800341c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003426:	f000 fe07 	bl	8004038 <__kernel_sin>
 800342a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800342e:	e7da      	b.n	80033e6 <sin+0x2a>
 8003430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003438:	f000 f9fe 	bl	8003838 <__kernel_cos>
 800343c:	e7f5      	b.n	800342a <sin+0x6e>
 800343e:	bf00      	nop
 8003440:	3fe921fb 	.word	0x3fe921fb
 8003444:	7fefffff 	.word	0x7fefffff

08003448 <__ieee754_rem_pio2>:
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	4614      	mov	r4, r2
 800344e:	4ac4      	ldr	r2, [pc, #784]	; (8003760 <__ieee754_rem_pio2+0x318>)
 8003450:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8003454:	b08d      	sub	sp, #52	; 0x34
 8003456:	4592      	cmp	sl, r2
 8003458:	9104      	str	r1, [sp, #16]
 800345a:	dc07      	bgt.n	800346c <__ieee754_rem_pio2+0x24>
 800345c:	2200      	movs	r2, #0
 800345e:	2300      	movs	r3, #0
 8003460:	e9c4 0100 	strd	r0, r1, [r4]
 8003464:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003468:	2500      	movs	r5, #0
 800346a:	e024      	b.n	80034b6 <__ieee754_rem_pio2+0x6e>
 800346c:	4abd      	ldr	r2, [pc, #756]	; (8003764 <__ieee754_rem_pio2+0x31c>)
 800346e:	4592      	cmp	sl, r2
 8003470:	dc72      	bgt.n	8003558 <__ieee754_rem_pio2+0x110>
 8003472:	9b04      	ldr	r3, [sp, #16]
 8003474:	4dbc      	ldr	r5, [pc, #752]	; (8003768 <__ieee754_rem_pio2+0x320>)
 8003476:	2b00      	cmp	r3, #0
 8003478:	a3ab      	add	r3, pc, #684	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e0>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	dd36      	ble.n	80034ee <__ieee754_rem_pio2+0xa6>
 8003480:	f7fc ff1e 	bl	80002c0 <__aeabi_dsub>
 8003484:	45aa      	cmp	sl, r5
 8003486:	4606      	mov	r6, r0
 8003488:	460f      	mov	r7, r1
 800348a:	d018      	beq.n	80034be <__ieee754_rem_pio2+0x76>
 800348c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fc ff15 	bl	80002c0 <__aeabi_dsub>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4630      	mov	r0, r6
 800349c:	e9c4 2300 	strd	r2, r3, [r4]
 80034a0:	4639      	mov	r1, r7
 80034a2:	f7fc ff0d 	bl	80002c0 <__aeabi_dsub>
 80034a6:	a3a2      	add	r3, pc, #648	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f7fc ff08 	bl	80002c0 <__aeabi_dsub>
 80034b0:	2501      	movs	r5, #1
 80034b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80034b6:	4628      	mov	r0, r5
 80034b8:	b00d      	add	sp, #52	; 0x34
 80034ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034be:	a39e      	add	r3, pc, #632	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f0>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fc fefc 	bl	80002c0 <__aeabi_dsub>
 80034c8:	a39d      	add	r3, pc, #628	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	4606      	mov	r6, r0
 80034d0:	460f      	mov	r7, r1
 80034d2:	f7fc fef5 	bl	80002c0 <__aeabi_dsub>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4630      	mov	r0, r6
 80034dc:	e9c4 2300 	strd	r2, r3, [r4]
 80034e0:	4639      	mov	r1, r7
 80034e2:	f7fc feed 	bl	80002c0 <__aeabi_dsub>
 80034e6:	a396      	add	r3, pc, #600	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	e7de      	b.n	80034ac <__ieee754_rem_pio2+0x64>
 80034ee:	f7fc fee9 	bl	80002c4 <__adddf3>
 80034f2:	45aa      	cmp	sl, r5
 80034f4:	4606      	mov	r6, r0
 80034f6:	460f      	mov	r7, r1
 80034f8:	d016      	beq.n	8003528 <__ieee754_rem_pio2+0xe0>
 80034fa:	a38d      	add	r3, pc, #564	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fc fee0 	bl	80002c4 <__adddf3>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4630      	mov	r0, r6
 800350a:	e9c4 2300 	strd	r2, r3, [r4]
 800350e:	4639      	mov	r1, r7
 8003510:	f7fc fed6 	bl	80002c0 <__aeabi_dsub>
 8003514:	a386      	add	r3, pc, #536	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f7fc fed3 	bl	80002c4 <__adddf3>
 800351e:	f04f 35ff 	mov.w	r5, #4294967295
 8003522:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003526:	e7c6      	b.n	80034b6 <__ieee754_rem_pio2+0x6e>
 8003528:	a383      	add	r3, pc, #524	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f0>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fc fec9 	bl	80002c4 <__adddf3>
 8003532:	a383      	add	r3, pc, #524	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	4606      	mov	r6, r0
 800353a:	460f      	mov	r7, r1
 800353c:	f7fc fec2 	bl	80002c4 <__adddf3>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4630      	mov	r0, r6
 8003546:	e9c4 2300 	strd	r2, r3, [r4]
 800354a:	4639      	mov	r1, r7
 800354c:	f7fc feb8 	bl	80002c0 <__aeabi_dsub>
 8003550:	a37b      	add	r3, pc, #492	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	e7e0      	b.n	800351a <__ieee754_rem_pio2+0xd2>
 8003558:	4a84      	ldr	r2, [pc, #528]	; (800376c <__ieee754_rem_pio2+0x324>)
 800355a:	4592      	cmp	sl, r2
 800355c:	f300 80d5 	bgt.w	800370a <__ieee754_rem_pio2+0x2c2>
 8003560:	f000 fe20 	bl	80041a4 <fabs>
 8003564:	a378      	add	r3, pc, #480	; (adr r3, 8003748 <__ieee754_rem_pio2+0x300>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	4606      	mov	r6, r0
 800356c:	460f      	mov	r7, r1
 800356e:	f7fd f85f 	bl	8000630 <__aeabi_dmul>
 8003572:	2200      	movs	r2, #0
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <__ieee754_rem_pio2+0x328>)
 8003576:	f7fc fea5 	bl	80002c4 <__adddf3>
 800357a:	f7fd faf3 	bl	8000b64 <__aeabi_d2iz>
 800357e:	4605      	mov	r5, r0
 8003580:	f7fc ffec 	bl	800055c <__aeabi_i2d>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800358c:	a366      	add	r3, pc, #408	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e0>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fd f84d 	bl	8000630 <__aeabi_dmul>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4630      	mov	r0, r6
 800359c:	4639      	mov	r1, r7
 800359e:	f7fc fe8f 	bl	80002c0 <__aeabi_dsub>
 80035a2:	a363      	add	r3, pc, #396	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	4680      	mov	r8, r0
 80035aa:	4689      	mov	r9, r1
 80035ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035b0:	f7fd f83e 	bl	8000630 <__aeabi_dmul>
 80035b4:	2d1f      	cmp	r5, #31
 80035b6:	4606      	mov	r6, r0
 80035b8:	460f      	mov	r7, r1
 80035ba:	dc0e      	bgt.n	80035da <__ieee754_rem_pio2+0x192>
 80035bc:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <__ieee754_rem_pio2+0x32c>)
 80035be:	1e6a      	subs	r2, r5, #1
 80035c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c4:	4553      	cmp	r3, sl
 80035c6:	d008      	beq.n	80035da <__ieee754_rem_pio2+0x192>
 80035c8:	4632      	mov	r2, r6
 80035ca:	463b      	mov	r3, r7
 80035cc:	4640      	mov	r0, r8
 80035ce:	4649      	mov	r1, r9
 80035d0:	f7fc fe76 	bl	80002c0 <__aeabi_dsub>
 80035d4:	e9c4 0100 	strd	r0, r1, [r4]
 80035d8:	e013      	b.n	8003602 <__ieee754_rem_pio2+0x1ba>
 80035da:	463b      	mov	r3, r7
 80035dc:	4632      	mov	r2, r6
 80035de:	4640      	mov	r0, r8
 80035e0:	4649      	mov	r1, r9
 80035e2:	f7fc fe6d 	bl	80002c0 <__aeabi_dsub>
 80035e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80035ea:	9305      	str	r3, [sp, #20]
 80035ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80035f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80035f4:	f1ba 0f10 	cmp.w	sl, #16
 80035f8:	dc1f      	bgt.n	800363a <__ieee754_rem_pio2+0x1f2>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	e9c4 2300 	strd	r2, r3, [r4]
 8003602:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003606:	4640      	mov	r0, r8
 8003608:	4653      	mov	r3, sl
 800360a:	4649      	mov	r1, r9
 800360c:	f7fc fe58 	bl	80002c0 <__aeabi_dsub>
 8003610:	4632      	mov	r2, r6
 8003612:	463b      	mov	r3, r7
 8003614:	f7fc fe54 	bl	80002c0 <__aeabi_dsub>
 8003618:	460b      	mov	r3, r1
 800361a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800361e:	9904      	ldr	r1, [sp, #16]
 8003620:	4602      	mov	r2, r0
 8003622:	2900      	cmp	r1, #0
 8003624:	f6bf af47 	bge.w	80034b6 <__ieee754_rem_pio2+0x6e>
 8003628:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800362c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003630:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003634:	60e3      	str	r3, [r4, #12]
 8003636:	426d      	negs	r5, r5
 8003638:	e73d      	b.n	80034b6 <__ieee754_rem_pio2+0x6e>
 800363a:	a33f      	add	r3, pc, #252	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f0>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003644:	f7fc fff4 	bl	8000630 <__aeabi_dmul>
 8003648:	4606      	mov	r6, r0
 800364a:	460f      	mov	r7, r1
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4640      	mov	r0, r8
 8003652:	4649      	mov	r1, r9
 8003654:	f7fc fe34 	bl	80002c0 <__aeabi_dsub>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4682      	mov	sl, r0
 800365e:	468b      	mov	fp, r1
 8003660:	4640      	mov	r0, r8
 8003662:	4649      	mov	r1, r9
 8003664:	f7fc fe2c 	bl	80002c0 <__aeabi_dsub>
 8003668:	4632      	mov	r2, r6
 800366a:	463b      	mov	r3, r7
 800366c:	f7fc fe28 	bl	80002c0 <__aeabi_dsub>
 8003670:	a333      	add	r3, pc, #204	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	4606      	mov	r6, r0
 8003678:	460f      	mov	r7, r1
 800367a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800367e:	f7fc ffd7 	bl	8000630 <__aeabi_dmul>
 8003682:	4632      	mov	r2, r6
 8003684:	463b      	mov	r3, r7
 8003686:	f7fc fe1b 	bl	80002c0 <__aeabi_dsub>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4606      	mov	r6, r0
 8003690:	460f      	mov	r7, r1
 8003692:	4650      	mov	r0, sl
 8003694:	4659      	mov	r1, fp
 8003696:	f7fc fe13 	bl	80002c0 <__aeabi_dsub>
 800369a:	9a05      	ldr	r2, [sp, #20]
 800369c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b31      	cmp	r3, #49	; 0x31
 80036a4:	dc06      	bgt.n	80036b4 <__ieee754_rem_pio2+0x26c>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	46d0      	mov	r8, sl
 80036ac:	46d9      	mov	r9, fp
 80036ae:	e9c4 2300 	strd	r2, r3, [r4]
 80036b2:	e7a6      	b.n	8003602 <__ieee754_rem_pio2+0x1ba>
 80036b4:	a326      	add	r3, pc, #152	; (adr r3, 8003750 <__ieee754_rem_pio2+0x308>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036be:	f7fc ffb7 	bl	8000630 <__aeabi_dmul>
 80036c2:	4606      	mov	r6, r0
 80036c4:	460f      	mov	r7, r1
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4650      	mov	r0, sl
 80036cc:	4659      	mov	r1, fp
 80036ce:	f7fc fdf7 	bl	80002c0 <__aeabi_dsub>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4680      	mov	r8, r0
 80036d8:	4689      	mov	r9, r1
 80036da:	4650      	mov	r0, sl
 80036dc:	4659      	mov	r1, fp
 80036de:	f7fc fdef 	bl	80002c0 <__aeabi_dsub>
 80036e2:	4632      	mov	r2, r6
 80036e4:	463b      	mov	r3, r7
 80036e6:	f7fc fdeb 	bl	80002c0 <__aeabi_dsub>
 80036ea:	a31b      	add	r3, pc, #108	; (adr r3, 8003758 <__ieee754_rem_pio2+0x310>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	4606      	mov	r6, r0
 80036f2:	460f      	mov	r7, r1
 80036f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036f8:	f7fc ff9a 	bl	8000630 <__aeabi_dmul>
 80036fc:	4632      	mov	r2, r6
 80036fe:	463b      	mov	r3, r7
 8003700:	f7fc fdde 	bl	80002c0 <__aeabi_dsub>
 8003704:	4606      	mov	r6, r0
 8003706:	460f      	mov	r7, r1
 8003708:	e75e      	b.n	80035c8 <__ieee754_rem_pio2+0x180>
 800370a:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <__ieee754_rem_pio2+0x330>)
 800370c:	4592      	cmp	sl, r2
 800370e:	dd35      	ble.n	800377c <__ieee754_rem_pio2+0x334>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	f7fc fdd4 	bl	80002c0 <__aeabi_dsub>
 8003718:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800371c:	e9c4 0100 	strd	r0, r1, [r4]
 8003720:	e6a2      	b.n	8003468 <__ieee754_rem_pio2+0x20>
 8003722:	bf00      	nop
 8003724:	f3af 8000 	nop.w
 8003728:	54400000 	.word	0x54400000
 800372c:	3ff921fb 	.word	0x3ff921fb
 8003730:	1a626331 	.word	0x1a626331
 8003734:	3dd0b461 	.word	0x3dd0b461
 8003738:	1a600000 	.word	0x1a600000
 800373c:	3dd0b461 	.word	0x3dd0b461
 8003740:	2e037073 	.word	0x2e037073
 8003744:	3ba3198a 	.word	0x3ba3198a
 8003748:	6dc9c883 	.word	0x6dc9c883
 800374c:	3fe45f30 	.word	0x3fe45f30
 8003750:	2e000000 	.word	0x2e000000
 8003754:	3ba3198a 	.word	0x3ba3198a
 8003758:	252049c1 	.word	0x252049c1
 800375c:	397b839a 	.word	0x397b839a
 8003760:	3fe921fb 	.word	0x3fe921fb
 8003764:	4002d97b 	.word	0x4002d97b
 8003768:	3ff921fb 	.word	0x3ff921fb
 800376c:	413921fb 	.word	0x413921fb
 8003770:	3fe00000 	.word	0x3fe00000
 8003774:	0800465c 	.word	0x0800465c
 8003778:	7fefffff 	.word	0x7fefffff
 800377c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003780:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003784:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003788:	460f      	mov	r7, r1
 800378a:	4606      	mov	r6, r0
 800378c:	f7fd f9ea 	bl	8000b64 <__aeabi_d2iz>
 8003790:	f7fc fee4 	bl	800055c <__aeabi_i2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4630      	mov	r0, r6
 800379a:	4639      	mov	r1, r7
 800379c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80037a0:	f7fc fd8e 	bl	80002c0 <__aeabi_dsub>
 80037a4:	2200      	movs	r2, #0
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <__ieee754_rem_pio2+0x3e8>)
 80037a8:	f7fc ff42 	bl	8000630 <__aeabi_dmul>
 80037ac:	460f      	mov	r7, r1
 80037ae:	4606      	mov	r6, r0
 80037b0:	f7fd f9d8 	bl	8000b64 <__aeabi_d2iz>
 80037b4:	f7fc fed2 	bl	800055c <__aeabi_i2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4630      	mov	r0, r6
 80037be:	4639      	mov	r1, r7
 80037c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80037c4:	f7fc fd7c 	bl	80002c0 <__aeabi_dsub>
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <__ieee754_rem_pio2+0x3e8>)
 80037cc:	f7fc ff30 	bl	8000630 <__aeabi_dmul>
 80037d0:	f04f 0803 	mov.w	r8, #3
 80037d4:	2600      	movs	r6, #0
 80037d6:	2700      	movs	r7, #0
 80037d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80037dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80037e0:	4632      	mov	r2, r6
 80037e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80037e6:	463b      	mov	r3, r7
 80037e8:	46c2      	mov	sl, r8
 80037ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80037ee:	f7fd f987 	bl	8000b00 <__aeabi_dcmpeq>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d1f4      	bne.n	80037e0 <__ieee754_rem_pio2+0x398>
 80037f6:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <__ieee754_rem_pio2+0x3ec>)
 80037f8:	462a      	mov	r2, r5
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	2302      	movs	r3, #2
 80037fe:	4621      	mov	r1, r4
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	a806      	add	r0, sp, #24
 8003804:	4653      	mov	r3, sl
 8003806:	f000 f8d5 	bl	80039b4 <__kernel_rem_pio2>
 800380a:	9b04      	ldr	r3, [sp, #16]
 800380c:	4605      	mov	r5, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f6bf ae51 	bge.w	80034b6 <__ieee754_rem_pio2+0x6e>
 8003814:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003818:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800381c:	e9c4 2300 	strd	r2, r3, [r4]
 8003820:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003824:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003828:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800382c:	e703      	b.n	8003636 <__ieee754_rem_pio2+0x1ee>
 800382e:	bf00      	nop
 8003830:	41700000 	.word	0x41700000
 8003834:	080046dc 	.word	0x080046dc

08003838 <__kernel_cos>:
 8003838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003840:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003844:	4680      	mov	r8, r0
 8003846:	460f      	mov	r7, r1
 8003848:	e9cd 2300 	strd	r2, r3, [sp]
 800384c:	da04      	bge.n	8003858 <__kernel_cos+0x20>
 800384e:	f7fd f989 	bl	8000b64 <__aeabi_d2iz>
 8003852:	2800      	cmp	r0, #0
 8003854:	f000 8086 	beq.w	8003964 <__kernel_cos+0x12c>
 8003858:	4642      	mov	r2, r8
 800385a:	463b      	mov	r3, r7
 800385c:	4640      	mov	r0, r8
 800385e:	4639      	mov	r1, r7
 8003860:	f7fc fee6 	bl	8000630 <__aeabi_dmul>
 8003864:	2200      	movs	r2, #0
 8003866:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <__kernel_cos+0x168>)
 8003868:	4604      	mov	r4, r0
 800386a:	460d      	mov	r5, r1
 800386c:	f7fc fee0 	bl	8000630 <__aeabi_dmul>
 8003870:	a33f      	add	r3, pc, #252	; (adr r3, 8003970 <__kernel_cos+0x138>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	4682      	mov	sl, r0
 8003878:	468b      	mov	fp, r1
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	f7fc fed7 	bl	8000630 <__aeabi_dmul>
 8003882:	a33d      	add	r3, pc, #244	; (adr r3, 8003978 <__kernel_cos+0x140>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f7fc fd1c 	bl	80002c4 <__adddf3>
 800388c:	4622      	mov	r2, r4
 800388e:	462b      	mov	r3, r5
 8003890:	f7fc fece 	bl	8000630 <__aeabi_dmul>
 8003894:	a33a      	add	r3, pc, #232	; (adr r3, 8003980 <__kernel_cos+0x148>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f7fc fd11 	bl	80002c0 <__aeabi_dsub>
 800389e:	4622      	mov	r2, r4
 80038a0:	462b      	mov	r3, r5
 80038a2:	f7fc fec5 	bl	8000630 <__aeabi_dmul>
 80038a6:	a338      	add	r3, pc, #224	; (adr r3, 8003988 <__kernel_cos+0x150>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fd0a 	bl	80002c4 <__adddf3>
 80038b0:	4622      	mov	r2, r4
 80038b2:	462b      	mov	r3, r5
 80038b4:	f7fc febc 	bl	8000630 <__aeabi_dmul>
 80038b8:	a335      	add	r3, pc, #212	; (adr r3, 8003990 <__kernel_cos+0x158>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f7fc fcff 	bl	80002c0 <__aeabi_dsub>
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f7fc feb3 	bl	8000630 <__aeabi_dmul>
 80038ca:	a333      	add	r3, pc, #204	; (adr r3, 8003998 <__kernel_cos+0x160>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fcf8 	bl	80002c4 <__adddf3>
 80038d4:	4622      	mov	r2, r4
 80038d6:	462b      	mov	r3, r5
 80038d8:	f7fc feaa 	bl	8000630 <__aeabi_dmul>
 80038dc:	4622      	mov	r2, r4
 80038de:	462b      	mov	r3, r5
 80038e0:	f7fc fea6 	bl	8000630 <__aeabi_dmul>
 80038e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038e8:	4604      	mov	r4, r0
 80038ea:	460d      	mov	r5, r1
 80038ec:	4640      	mov	r0, r8
 80038ee:	4639      	mov	r1, r7
 80038f0:	f7fc fe9e 	bl	8000630 <__aeabi_dmul>
 80038f4:	460b      	mov	r3, r1
 80038f6:	4602      	mov	r2, r0
 80038f8:	4629      	mov	r1, r5
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7fc fce0 	bl	80002c0 <__aeabi_dsub>
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <__kernel_cos+0x16c>)
 8003902:	4680      	mov	r8, r0
 8003904:	429e      	cmp	r6, r3
 8003906:	4689      	mov	r9, r1
 8003908:	dc0e      	bgt.n	8003928 <__kernel_cos+0xf0>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4650      	mov	r0, sl
 8003910:	4659      	mov	r1, fp
 8003912:	f7fc fcd5 	bl	80002c0 <__aeabi_dsub>
 8003916:	4602      	mov	r2, r0
 8003918:	2000      	movs	r0, #0
 800391a:	460b      	mov	r3, r1
 800391c:	4922      	ldr	r1, [pc, #136]	; (80039a8 <__kernel_cos+0x170>)
 800391e:	f7fc fccf 	bl	80002c0 <__aeabi_dsub>
 8003922:	b003      	add	sp, #12
 8003924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003928:	2400      	movs	r4, #0
 800392a:	4b20      	ldr	r3, [pc, #128]	; (80039ac <__kernel_cos+0x174>)
 800392c:	4622      	mov	r2, r4
 800392e:	429e      	cmp	r6, r3
 8003930:	bfcc      	ite	gt
 8003932:	4d1f      	ldrgt	r5, [pc, #124]	; (80039b0 <__kernel_cos+0x178>)
 8003934:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003938:	462b      	mov	r3, r5
 800393a:	2000      	movs	r0, #0
 800393c:	491a      	ldr	r1, [pc, #104]	; (80039a8 <__kernel_cos+0x170>)
 800393e:	f7fc fcbf 	bl	80002c0 <__aeabi_dsub>
 8003942:	4622      	mov	r2, r4
 8003944:	4606      	mov	r6, r0
 8003946:	460f      	mov	r7, r1
 8003948:	462b      	mov	r3, r5
 800394a:	4650      	mov	r0, sl
 800394c:	4659      	mov	r1, fp
 800394e:	f7fc fcb7 	bl	80002c0 <__aeabi_dsub>
 8003952:	4642      	mov	r2, r8
 8003954:	464b      	mov	r3, r9
 8003956:	f7fc fcb3 	bl	80002c0 <__aeabi_dsub>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4630      	mov	r0, r6
 8003960:	4639      	mov	r1, r7
 8003962:	e7dc      	b.n	800391e <__kernel_cos+0xe6>
 8003964:	2000      	movs	r0, #0
 8003966:	4910      	ldr	r1, [pc, #64]	; (80039a8 <__kernel_cos+0x170>)
 8003968:	e7db      	b.n	8003922 <__kernel_cos+0xea>
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	be8838d4 	.word	0xbe8838d4
 8003974:	bda8fae9 	.word	0xbda8fae9
 8003978:	bdb4b1c4 	.word	0xbdb4b1c4
 800397c:	3e21ee9e 	.word	0x3e21ee9e
 8003980:	809c52ad 	.word	0x809c52ad
 8003984:	3e927e4f 	.word	0x3e927e4f
 8003988:	19cb1590 	.word	0x19cb1590
 800398c:	3efa01a0 	.word	0x3efa01a0
 8003990:	16c15177 	.word	0x16c15177
 8003994:	3f56c16c 	.word	0x3f56c16c
 8003998:	5555554c 	.word	0x5555554c
 800399c:	3fa55555 	.word	0x3fa55555
 80039a0:	3fe00000 	.word	0x3fe00000
 80039a4:	3fd33332 	.word	0x3fd33332
 80039a8:	3ff00000 	.word	0x3ff00000
 80039ac:	3fe90000 	.word	0x3fe90000
 80039b0:	3fd20000 	.word	0x3fd20000

080039b4 <__kernel_rem_pio2>:
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80039bc:	9308      	str	r3, [sp, #32]
 80039be:	9106      	str	r1, [sp, #24]
 80039c0:	4bb6      	ldr	r3, [pc, #728]	; (8003c9c <__kernel_rem_pio2+0x2e8>)
 80039c2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80039c4:	f112 0f14 	cmn.w	r2, #20
 80039c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039cc:	bfa8      	it	ge
 80039ce:	1ed4      	subge	r4, r2, #3
 80039d0:	9302      	str	r3, [sp, #8]
 80039d2:	9b08      	ldr	r3, [sp, #32]
 80039d4:	bfb8      	it	lt
 80039d6:	2400      	movlt	r4, #0
 80039d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80039dc:	9307      	str	r3, [sp, #28]
 80039de:	bfa4      	itt	ge
 80039e0:	2318      	movge	r3, #24
 80039e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80039e6:	f06f 0317 	mvn.w	r3, #23
 80039ea:	fb04 3303 	mla	r3, r4, r3, r3
 80039ee:	eb03 0b02 	add.w	fp, r3, r2
 80039f2:	9a07      	ldr	r2, [sp, #28]
 80039f4:	9b02      	ldr	r3, [sp, #8]
 80039f6:	1aa7      	subs	r7, r4, r2
 80039f8:	eb03 0802 	add.w	r8, r3, r2
 80039fc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80039fe:	2500      	movs	r5, #0
 8003a00:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003a04:	2200      	movs	r2, #0
 8003a06:	2300      	movs	r3, #0
 8003a08:	9009      	str	r0, [sp, #36]	; 0x24
 8003a0a:	ae20      	add	r6, sp, #128	; 0x80
 8003a0c:	4545      	cmp	r5, r8
 8003a0e:	dd14      	ble.n	8003a3a <__kernel_rem_pio2+0x86>
 8003a10:	f04f 0800 	mov.w	r8, #0
 8003a14:	9a08      	ldr	r2, [sp, #32]
 8003a16:	ab20      	add	r3, sp, #128	; 0x80
 8003a18:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003a1c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8003a20:	9b02      	ldr	r3, [sp, #8]
 8003a22:	4598      	cmp	r8, r3
 8003a24:	dc35      	bgt.n	8003a92 <__kernel_rem_pio2+0xde>
 8003a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f1a3 0908 	sub.w	r9, r3, #8
 8003a2e:	2300      	movs	r3, #0
 8003a30:	462f      	mov	r7, r5
 8003a32:	2600      	movs	r6, #0
 8003a34:	e9cd 2300 	strd	r2, r3, [sp]
 8003a38:	e01f      	b.n	8003a7a <__kernel_rem_pio2+0xc6>
 8003a3a:	42ef      	cmn	r7, r5
 8003a3c:	d40b      	bmi.n	8003a56 <__kernel_rem_pio2+0xa2>
 8003a3e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003a42:	e9cd 2300 	strd	r2, r3, [sp]
 8003a46:	f7fc fd89 	bl	800055c <__aeabi_i2d>
 8003a4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a4e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003a52:	3501      	adds	r5, #1
 8003a54:	e7da      	b.n	8003a0c <__kernel_rem_pio2+0x58>
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	e7f8      	b.n	8003a4e <__kernel_rem_pio2+0x9a>
 8003a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a60:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003a64:	f7fc fde4 	bl	8000630 <__aeabi_dmul>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a70:	f7fc fc28 	bl	80002c4 <__adddf3>
 8003a74:	e9cd 0100 	strd	r0, r1, [sp]
 8003a78:	3601      	adds	r6, #1
 8003a7a:	9b07      	ldr	r3, [sp, #28]
 8003a7c:	3f08      	subs	r7, #8
 8003a7e:	429e      	cmp	r6, r3
 8003a80:	ddec      	ble.n	8003a5c <__kernel_rem_pio2+0xa8>
 8003a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a86:	f108 0801 	add.w	r8, r8, #1
 8003a8a:	e8ea 2302 	strd	r2, r3, [sl], #8
 8003a8e:	3508      	adds	r5, #8
 8003a90:	e7c6      	b.n	8003a20 <__kernel_rem_pio2+0x6c>
 8003a92:	9b02      	ldr	r3, [sp, #8]
 8003a94:	aa0c      	add	r2, sp, #48	; 0x30
 8003a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a9c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003a9e:	9e02      	ldr	r6, [sp, #8]
 8003aa0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8003aa6:	ab98      	add	r3, sp, #608	; 0x260
 8003aa8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003aac:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003ab0:	ab70      	add	r3, sp, #448	; 0x1c0
 8003ab2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8003ab6:	46d0      	mov	r8, sl
 8003ab8:	46b1      	mov	r9, r6
 8003aba:	af0c      	add	r7, sp, #48	; 0x30
 8003abc:	9700      	str	r7, [sp, #0]
 8003abe:	f1b9 0f00 	cmp.w	r9, #0
 8003ac2:	f1a8 0808 	sub.w	r8, r8, #8
 8003ac6:	dc71      	bgt.n	8003bac <__kernel_rem_pio2+0x1f8>
 8003ac8:	465a      	mov	r2, fp
 8003aca:	4620      	mov	r0, r4
 8003acc:	4629      	mov	r1, r5
 8003ace:	f000 fbef 	bl	80042b0 <scalbn>
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003ad8:	4604      	mov	r4, r0
 8003ada:	460d      	mov	r5, r1
 8003adc:	f7fc fda8 	bl	8000630 <__aeabi_dmul>
 8003ae0:	f000 fb66 	bl	80041b0 <floor>
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	; (8003ca0 <__kernel_rem_pio2+0x2ec>)
 8003ae8:	f7fc fda2 	bl	8000630 <__aeabi_dmul>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4620      	mov	r0, r4
 8003af2:	4629      	mov	r1, r5
 8003af4:	f7fc fbe4 	bl	80002c0 <__aeabi_dsub>
 8003af8:	460d      	mov	r5, r1
 8003afa:	4604      	mov	r4, r0
 8003afc:	f7fd f832 	bl	8000b64 <__aeabi_d2iz>
 8003b00:	9004      	str	r0, [sp, #16]
 8003b02:	f7fc fd2b 	bl	800055c <__aeabi_i2d>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fbd7 	bl	80002c0 <__aeabi_dsub>
 8003b12:	f1bb 0f00 	cmp.w	fp, #0
 8003b16:	4680      	mov	r8, r0
 8003b18:	4689      	mov	r9, r1
 8003b1a:	dd70      	ble.n	8003bfe <__kernel_rem_pio2+0x24a>
 8003b1c:	1e72      	subs	r2, r6, #1
 8003b1e:	ab0c      	add	r3, sp, #48	; 0x30
 8003b20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b24:	9c04      	ldr	r4, [sp, #16]
 8003b26:	f1cb 0118 	rsb	r1, fp, #24
 8003b2a:	fa40 f301 	asr.w	r3, r0, r1
 8003b2e:	441c      	add	r4, r3
 8003b30:	408b      	lsls	r3, r1
 8003b32:	1ac0      	subs	r0, r0, r3
 8003b34:	ab0c      	add	r3, sp, #48	; 0x30
 8003b36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003b3a:	f1cb 0317 	rsb	r3, fp, #23
 8003b3e:	9404      	str	r4, [sp, #16]
 8003b40:	fa40 f303 	asr.w	r3, r0, r3
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	9b00      	ldr	r3, [sp, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dd66      	ble.n	8003c1a <__kernel_rem_pio2+0x266>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003b52:	4614      	mov	r4, r2
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	3301      	adds	r3, #1
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	4296      	cmp	r6, r2
 8003b5c:	f300 80ac 	bgt.w	8003cb8 <__kernel_rem_pio2+0x304>
 8003b60:	f1bb 0f00 	cmp.w	fp, #0
 8003b64:	dd07      	ble.n	8003b76 <__kernel_rem_pio2+0x1c2>
 8003b66:	f1bb 0f01 	cmp.w	fp, #1
 8003b6a:	f000 80b4 	beq.w	8003cd6 <__kernel_rem_pio2+0x322>
 8003b6e:	f1bb 0f02 	cmp.w	fp, #2
 8003b72:	f000 80ba 	beq.w	8003cea <__kernel_rem_pio2+0x336>
 8003b76:	9b00      	ldr	r3, [sp, #0]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d14e      	bne.n	8003c1a <__kernel_rem_pio2+0x266>
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	2000      	movs	r0, #0
 8003b82:	4948      	ldr	r1, [pc, #288]	; (8003ca4 <__kernel_rem_pio2+0x2f0>)
 8003b84:	f7fc fb9c 	bl	80002c0 <__aeabi_dsub>
 8003b88:	4680      	mov	r8, r0
 8003b8a:	4689      	mov	r9, r1
 8003b8c:	2c00      	cmp	r4, #0
 8003b8e:	d044      	beq.n	8003c1a <__kernel_rem_pio2+0x266>
 8003b90:	465a      	mov	r2, fp
 8003b92:	2000      	movs	r0, #0
 8003b94:	4943      	ldr	r1, [pc, #268]	; (8003ca4 <__kernel_rem_pio2+0x2f0>)
 8003b96:	f000 fb8b 	bl	80042b0 <scalbn>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f7fc fb8d 	bl	80002c0 <__aeabi_dsub>
 8003ba6:	4680      	mov	r8, r0
 8003ba8:	4689      	mov	r9, r1
 8003baa:	e036      	b.n	8003c1a <__kernel_rem_pio2+0x266>
 8003bac:	2200      	movs	r2, #0
 8003bae:	4b3e      	ldr	r3, [pc, #248]	; (8003ca8 <__kernel_rem_pio2+0x2f4>)
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fd3c 	bl	8000630 <__aeabi_dmul>
 8003bb8:	f7fc ffd4 	bl	8000b64 <__aeabi_d2iz>
 8003bbc:	f7fc fcce 	bl	800055c <__aeabi_i2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4b38      	ldr	r3, [pc, #224]	; (8003cac <__kernel_rem_pio2+0x2f8>)
 8003bcc:	f7fc fd30 	bl	8000630 <__aeabi_dmul>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f7fc fb72 	bl	80002c0 <__aeabi_dsub>
 8003bdc:	f7fc ffc2 	bl	8000b64 <__aeabi_d2iz>
 8003be0:	9b00      	ldr	r3, [sp, #0]
 8003be2:	f109 39ff 	add.w	r9, r9, #4294967295
 8003be6:	f843 0b04 	str.w	r0, [r3], #4
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bf0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003bf4:	f7fc fb66 	bl	80002c4 <__adddf3>
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	460d      	mov	r5, r1
 8003bfc:	e75f      	b.n	8003abe <__kernel_rem_pio2+0x10a>
 8003bfe:	d105      	bne.n	8003c0c <__kernel_rem_pio2+0x258>
 8003c00:	1e73      	subs	r3, r6, #1
 8003c02:	aa0c      	add	r2, sp, #48	; 0x30
 8003c04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c08:	15c3      	asrs	r3, r0, #23
 8003c0a:	e79b      	b.n	8003b44 <__kernel_rem_pio2+0x190>
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <__kernel_rem_pio2+0x2fc>)
 8003c10:	f7fc ff94 	bl	8000b3c <__aeabi_dcmpge>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d13e      	bne.n	8003c96 <__kernel_rem_pio2+0x2e2>
 8003c18:	9000      	str	r0, [sp, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4640      	mov	r0, r8
 8003c20:	4649      	mov	r1, r9
 8003c22:	f7fc ff6d 	bl	8000b00 <__aeabi_dcmpeq>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	f000 80b1 	beq.w	8003d8e <__kernel_rem_pio2+0x3da>
 8003c2c:	1e74      	subs	r4, r6, #1
 8003c2e:	4623      	mov	r3, r4
 8003c30:	2200      	movs	r2, #0
 8003c32:	9902      	ldr	r1, [sp, #8]
 8003c34:	428b      	cmp	r3, r1
 8003c36:	da5f      	bge.n	8003cf8 <__kernel_rem_pio2+0x344>
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	d074      	beq.n	8003d26 <__kernel_rem_pio2+0x372>
 8003c3c:	ab0c      	add	r3, sp, #48	; 0x30
 8003c3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003c42:	f1ab 0b18 	sub.w	fp, fp, #24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 809f 	beq.w	8003d8a <__kernel_rem_pio2+0x3d6>
 8003c4c:	465a      	mov	r2, fp
 8003c4e:	2000      	movs	r0, #0
 8003c50:	4914      	ldr	r1, [pc, #80]	; (8003ca4 <__kernel_rem_pio2+0x2f0>)
 8003c52:	f000 fb2d 	bl	80042b0 <scalbn>
 8003c56:	46a2      	mov	sl, r4
 8003c58:	4606      	mov	r6, r0
 8003c5a:	460f      	mov	r7, r1
 8003c5c:	f04f 0800 	mov.w	r8, #0
 8003c60:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c62:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003ca8 <__kernel_rem_pio2+0x2f4>
 8003c66:	00e5      	lsls	r5, r4, #3
 8003c68:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8003c6c:	f1ba 0f00 	cmp.w	sl, #0
 8003c70:	f280 80c3 	bge.w	8003dfa <__kernel_rem_pio2+0x446>
 8003c74:	4626      	mov	r6, r4
 8003c76:	2e00      	cmp	r6, #0
 8003c78:	f2c0 80f5 	blt.w	8003e66 <__kernel_rem_pio2+0x4b2>
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <__kernel_rem_pio2+0x300>)
 8003c7e:	f04f 0a00 	mov.w	sl, #0
 8003c82:	9307      	str	r3, [sp, #28]
 8003c84:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c86:	f04f 0b00 	mov.w	fp, #0
 8003c8a:	f04f 0800 	mov.w	r8, #0
 8003c8e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003c92:	1ba7      	subs	r7, r4, r6
 8003c94:	e0db      	b.n	8003e4e <__kernel_rem_pio2+0x49a>
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	e757      	b.n	8003b4c <__kernel_rem_pio2+0x198>
 8003c9c:	08004828 	.word	0x08004828
 8003ca0:	40200000 	.word	0x40200000
 8003ca4:	3ff00000 	.word	0x3ff00000
 8003ca8:	3e700000 	.word	0x3e700000
 8003cac:	41700000 	.word	0x41700000
 8003cb0:	3fe00000 	.word	0x3fe00000
 8003cb4:	080047e8 	.word	0x080047e8
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b944      	cbnz	r4, 8003cce <__kernel_rem_pio2+0x31a>
 8003cbc:	b11b      	cbz	r3, 8003cc6 <__kernel_rem_pio2+0x312>
 8003cbe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	461c      	mov	r4, r3
 8003cc8:	3201      	adds	r2, #1
 8003cca:	3704      	adds	r7, #4
 8003ccc:	e745      	b.n	8003b5a <__kernel_rem_pio2+0x1a6>
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	e7f7      	b.n	8003cc6 <__kernel_rem_pio2+0x312>
 8003cd6:	1e72      	subs	r2, r6, #1
 8003cd8:	ab0c      	add	r3, sp, #48	; 0x30
 8003cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cde:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003ce2:	a90c      	add	r1, sp, #48	; 0x30
 8003ce4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003ce8:	e745      	b.n	8003b76 <__kernel_rem_pio2+0x1c2>
 8003cea:	1e72      	subs	r2, r6, #1
 8003cec:	ab0c      	add	r3, sp, #48	; 0x30
 8003cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003cf6:	e7f4      	b.n	8003ce2 <__kernel_rem_pio2+0x32e>
 8003cf8:	a90c      	add	r1, sp, #48	; 0x30
 8003cfa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	430a      	orrs	r2, r1
 8003d02:	e796      	b.n	8003c32 <__kernel_rem_pio2+0x27e>
 8003d04:	3401      	adds	r4, #1
 8003d06:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	d0fa      	beq.n	8003d04 <__kernel_rem_pio2+0x350>
 8003d0e:	9b08      	ldr	r3, [sp, #32]
 8003d10:	f106 0801 	add.w	r8, r6, #1
 8003d14:	18f5      	adds	r5, r6, r3
 8003d16:	ab20      	add	r3, sp, #128	; 0x80
 8003d18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003d1c:	4434      	add	r4, r6
 8003d1e:	4544      	cmp	r4, r8
 8003d20:	da04      	bge.n	8003d2c <__kernel_rem_pio2+0x378>
 8003d22:	4626      	mov	r6, r4
 8003d24:	e6bf      	b.n	8003aa6 <__kernel_rem_pio2+0xf2>
 8003d26:	2401      	movs	r4, #1
 8003d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d2a:	e7ec      	b.n	8003d06 <__kernel_rem_pio2+0x352>
 8003d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d2e:	f04f 0900 	mov.w	r9, #0
 8003d32:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003d36:	f7fc fc11 	bl	800055c <__aeabi_i2d>
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	2700      	movs	r7, #0
 8003d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d40:	e9c5 0100 	strd	r0, r1, [r5]
 8003d44:	3b08      	subs	r3, #8
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	9504      	str	r5, [sp, #16]
 8003d4a:	9b07      	ldr	r3, [sp, #28]
 8003d4c:	4599      	cmp	r9, r3
 8003d4e:	dd05      	ble.n	8003d5c <__kernel_rem_pio2+0x3a8>
 8003d50:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8003d54:	f108 0801 	add.w	r8, r8, #1
 8003d58:	3508      	adds	r5, #8
 8003d5a:	e7e0      	b.n	8003d1e <__kernel_rem_pio2+0x36a>
 8003d5c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003d60:	9900      	ldr	r1, [sp, #0]
 8003d62:	f109 0901 	add.w	r9, r9, #1
 8003d66:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003d6a:	9100      	str	r1, [sp, #0]
 8003d6c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8003d70:	f8cd c010 	str.w	ip, [sp, #16]
 8003d74:	f7fc fc5c 	bl	8000630 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	4639      	mov	r1, r7
 8003d80:	f7fc faa0 	bl	80002c4 <__adddf3>
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	e7df      	b.n	8003d4a <__kernel_rem_pio2+0x396>
 8003d8a:	3c01      	subs	r4, #1
 8003d8c:	e756      	b.n	8003c3c <__kernel_rem_pio2+0x288>
 8003d8e:	f1cb 0200 	rsb	r2, fp, #0
 8003d92:	4640      	mov	r0, r8
 8003d94:	4649      	mov	r1, r9
 8003d96:	f000 fa8b 	bl	80042b0 <scalbn>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4ba4      	ldr	r3, [pc, #656]	; (8004030 <__kernel_rem_pio2+0x67c>)
 8003d9e:	4604      	mov	r4, r0
 8003da0:	460d      	mov	r5, r1
 8003da2:	f7fc fecb 	bl	8000b3c <__aeabi_dcmpge>
 8003da6:	b1f8      	cbz	r0, 8003de8 <__kernel_rem_pio2+0x434>
 8003da8:	2200      	movs	r2, #0
 8003daa:	4ba2      	ldr	r3, [pc, #648]	; (8004034 <__kernel_rem_pio2+0x680>)
 8003dac:	4620      	mov	r0, r4
 8003dae:	4629      	mov	r1, r5
 8003db0:	f7fc fc3e 	bl	8000630 <__aeabi_dmul>
 8003db4:	f7fc fed6 	bl	8000b64 <__aeabi_d2iz>
 8003db8:	4607      	mov	r7, r0
 8003dba:	f7fc fbcf 	bl	800055c <__aeabi_i2d>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4b9b      	ldr	r3, [pc, #620]	; (8004030 <__kernel_rem_pio2+0x67c>)
 8003dc2:	f7fc fc35 	bl	8000630 <__aeabi_dmul>
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4629      	mov	r1, r5
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7fc fa77 	bl	80002c0 <__aeabi_dsub>
 8003dd2:	f7fc fec7 	bl	8000b64 <__aeabi_d2iz>
 8003dd6:	1c74      	adds	r4, r6, #1
 8003dd8:	ab0c      	add	r3, sp, #48	; 0x30
 8003dda:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003dde:	f10b 0b18 	add.w	fp, fp, #24
 8003de2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8003de6:	e731      	b.n	8003c4c <__kernel_rem_pio2+0x298>
 8003de8:	4620      	mov	r0, r4
 8003dea:	4629      	mov	r1, r5
 8003dec:	f7fc feba 	bl	8000b64 <__aeabi_d2iz>
 8003df0:	ab0c      	add	r3, sp, #48	; 0x30
 8003df2:	4634      	mov	r4, r6
 8003df4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003df8:	e728      	b.n	8003c4c <__kernel_rem_pio2+0x298>
 8003dfa:	ab0c      	add	r3, sp, #48	; 0x30
 8003dfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003e00:	f7fc fbac 	bl	800055c <__aeabi_i2d>
 8003e04:	4632      	mov	r2, r6
 8003e06:	463b      	mov	r3, r7
 8003e08:	f7fc fc12 	bl	8000630 <__aeabi_dmul>
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8003e12:	464b      	mov	r3, r9
 8003e14:	4630      	mov	r0, r6
 8003e16:	4639      	mov	r1, r7
 8003e18:	f7fc fc0a 	bl	8000630 <__aeabi_dmul>
 8003e1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e20:	4606      	mov	r6, r0
 8003e22:	460f      	mov	r7, r1
 8003e24:	e722      	b.n	8003c6c <__kernel_rem_pio2+0x2b8>
 8003e26:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8003e2a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003e2e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8003e32:	f8cd c01c 	str.w	ip, [sp, #28]
 8003e36:	f7fc fbfb 	bl	8000630 <__aeabi_dmul>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4650      	mov	r0, sl
 8003e40:	4659      	mov	r1, fp
 8003e42:	f7fc fa3f 	bl	80002c4 <__adddf3>
 8003e46:	4682      	mov	sl, r0
 8003e48:	468b      	mov	fp, r1
 8003e4a:	f108 0801 	add.w	r8, r8, #1
 8003e4e:	9b02      	ldr	r3, [sp, #8]
 8003e50:	4598      	cmp	r8, r3
 8003e52:	dc01      	bgt.n	8003e58 <__kernel_rem_pio2+0x4a4>
 8003e54:	45b8      	cmp	r8, r7
 8003e56:	dde6      	ble.n	8003e26 <__kernel_rem_pio2+0x472>
 8003e58:	ab48      	add	r3, sp, #288	; 0x120
 8003e5a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003e5e:	e9c7 ab00 	strd	sl, fp, [r7]
 8003e62:	3e01      	subs	r6, #1
 8003e64:	e707      	b.n	8003c76 <__kernel_rem_pio2+0x2c2>
 8003e66:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	dc09      	bgt.n	8003e80 <__kernel_rem_pio2+0x4cc>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	dc32      	bgt.n	8003ed6 <__kernel_rem_pio2+0x522>
 8003e70:	d05a      	beq.n	8003f28 <__kernel_rem_pio2+0x574>
 8003e72:	9b04      	ldr	r3, [sp, #16]
 8003e74:	f003 0007 	and.w	r0, r3, #7
 8003e78:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e80:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d1f5      	bne.n	8003e72 <__kernel_rem_pio2+0x4be>
 8003e86:	ab48      	add	r3, sp, #288	; 0x120
 8003e88:	441d      	add	r5, r3
 8003e8a:	46aa      	mov	sl, r5
 8003e8c:	46a3      	mov	fp, r4
 8003e8e:	f1bb 0f00 	cmp.w	fp, #0
 8003e92:	dc76      	bgt.n	8003f82 <__kernel_rem_pio2+0x5ce>
 8003e94:	46aa      	mov	sl, r5
 8003e96:	46a3      	mov	fp, r4
 8003e98:	f1bb 0f01 	cmp.w	fp, #1
 8003e9c:	f300 8090 	bgt.w	8003fc0 <__kernel_rem_pio2+0x60c>
 8003ea0:	2700      	movs	r7, #0
 8003ea2:	463e      	mov	r6, r7
 8003ea4:	2c01      	cmp	r4, #1
 8003ea6:	f300 80aa 	bgt.w	8003ffe <__kernel_rem_pio2+0x64a>
 8003eaa:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8003eae:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8003eb2:	9b00      	ldr	r3, [sp, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 80ac 	bne.w	8004012 <__kernel_rem_pio2+0x65e>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	462a      	mov	r2, r5
 8003ebe:	9806      	ldr	r0, [sp, #24]
 8003ec0:	e9c0 2300 	strd	r2, r3, [r0]
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003ecc:	463a      	mov	r2, r7
 8003ece:	4633      	mov	r3, r6
 8003ed0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003ed4:	e7cd      	b.n	8003e72 <__kernel_rem_pio2+0x4be>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	46a0      	mov	r8, r4
 8003eda:	4601      	mov	r1, r0
 8003edc:	ab48      	add	r3, sp, #288	; 0x120
 8003ede:	441d      	add	r5, r3
 8003ee0:	f1b8 0f00 	cmp.w	r8, #0
 8003ee4:	da3a      	bge.n	8003f5c <__kernel_rem_pio2+0x5a8>
 8003ee6:	9b00      	ldr	r3, [sp, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d03e      	beq.n	8003f6a <__kernel_rem_pio2+0x5b6>
 8003eec:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	9d06      	ldr	r5, [sp, #24]
 8003ef6:	2601      	movs	r6, #1
 8003ef8:	e9c5 2300 	strd	r2, r3, [r5]
 8003efc:	460b      	mov	r3, r1
 8003efe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003f02:	f7fc f9dd 	bl	80002c0 <__aeabi_dsub>
 8003f06:	4684      	mov	ip, r0
 8003f08:	460f      	mov	r7, r1
 8003f0a:	ad48      	add	r5, sp, #288	; 0x120
 8003f0c:	42b4      	cmp	r4, r6
 8003f0e:	f105 0508 	add.w	r5, r5, #8
 8003f12:	da2c      	bge.n	8003f6e <__kernel_rem_pio2+0x5ba>
 8003f14:	9b00      	ldr	r3, [sp, #0]
 8003f16:	b10b      	cbz	r3, 8003f1c <__kernel_rem_pio2+0x568>
 8003f18:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003f1c:	4662      	mov	r2, ip
 8003f1e:	463b      	mov	r3, r7
 8003f20:	9906      	ldr	r1, [sp, #24]
 8003f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003f26:	e7a4      	b.n	8003e72 <__kernel_rem_pio2+0x4be>
 8003f28:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8003f2a:	ab48      	add	r3, sp, #288	; 0x120
 8003f2c:	4637      	mov	r7, r6
 8003f2e:	441d      	add	r5, r3
 8003f30:	2c00      	cmp	r4, #0
 8003f32:	da09      	bge.n	8003f48 <__kernel_rem_pio2+0x594>
 8003f34:	9b00      	ldr	r3, [sp, #0]
 8003f36:	b10b      	cbz	r3, 8003f3c <__kernel_rem_pio2+0x588>
 8003f38:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	463b      	mov	r3, r7
 8003f40:	9906      	ldr	r1, [sp, #24]
 8003f42:	e9c1 2300 	strd	r2, r3, [r1]
 8003f46:	e794      	b.n	8003e72 <__kernel_rem_pio2+0x4be>
 8003f48:	4630      	mov	r0, r6
 8003f4a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003f4e:	4639      	mov	r1, r7
 8003f50:	f7fc f9b8 	bl	80002c4 <__adddf3>
 8003f54:	3c01      	subs	r4, #1
 8003f56:	4606      	mov	r6, r0
 8003f58:	460f      	mov	r7, r1
 8003f5a:	e7e9      	b.n	8003f30 <__kernel_rem_pio2+0x57c>
 8003f5c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003f60:	f7fc f9b0 	bl	80002c4 <__adddf3>
 8003f64:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f68:	e7ba      	b.n	8003ee0 <__kernel_rem_pio2+0x52c>
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	e7c0      	b.n	8003ef0 <__kernel_rem_pio2+0x53c>
 8003f6e:	4660      	mov	r0, ip
 8003f70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f74:	4639      	mov	r1, r7
 8003f76:	f7fc f9a5 	bl	80002c4 <__adddf3>
 8003f7a:	3601      	adds	r6, #1
 8003f7c:	4684      	mov	ip, r0
 8003f7e:	460f      	mov	r7, r1
 8003f80:	e7c4      	b.n	8003f0c <__kernel_rem_pio2+0x558>
 8003f82:	e9da 6700 	ldrd	r6, r7, [sl]
 8003f86:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	4640      	mov	r0, r8
 8003f90:	4649      	mov	r1, r9
 8003f92:	f7fc f997 	bl	80002c4 <__adddf3>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	f7fc f98d 	bl	80002c0 <__aeabi_dsub>
 8003fa6:	4632      	mov	r2, r6
 8003fa8:	463b      	mov	r3, r7
 8003faa:	f7fc f98b 	bl	80002c4 <__adddf3>
 8003fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fb2:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003fb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fba:	e9ca 2300 	strd	r2, r3, [sl]
 8003fbe:	e766      	b.n	8003e8e <__kernel_rem_pio2+0x4da>
 8003fc0:	e9da 8900 	ldrd	r8, r9, [sl]
 8003fc4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	4630      	mov	r0, r6
 8003fce:	4639      	mov	r1, r7
 8003fd0:	f7fc f978 	bl	80002c4 <__adddf3>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fdc:	4630      	mov	r0, r6
 8003fde:	4639      	mov	r1, r7
 8003fe0:	f7fc f96e 	bl	80002c0 <__aeabi_dsub>
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	f7fc f96c 	bl	80002c4 <__adddf3>
 8003fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ff0:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003ff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ff8:	e9ca 2300 	strd	r2, r3, [sl]
 8003ffc:	e74c      	b.n	8003e98 <__kernel_rem_pio2+0x4e4>
 8003ffe:	4638      	mov	r0, r7
 8004000:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004004:	4631      	mov	r1, r6
 8004006:	f7fc f95d 	bl	80002c4 <__adddf3>
 800400a:	3c01      	subs	r4, #1
 800400c:	4607      	mov	r7, r0
 800400e:	460e      	mov	r6, r1
 8004010:	e748      	b.n	8003ea4 <__kernel_rem_pio2+0x4f0>
 8004012:	9b06      	ldr	r3, [sp, #24]
 8004014:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004018:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800401c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004020:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004024:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004028:	601d      	str	r5, [r3, #0]
 800402a:	615e      	str	r6, [r3, #20]
 800402c:	e721      	b.n	8003e72 <__kernel_rem_pio2+0x4be>
 800402e:	bf00      	nop
 8004030:	41700000 	.word	0x41700000
 8004034:	3e700000 	.word	0x3e700000

08004038 <__kernel_sin>:
 8004038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	e9cd 2300 	strd	r2, r3, [sp]
 8004042:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004046:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800404a:	4682      	mov	sl, r0
 800404c:	460c      	mov	r4, r1
 800404e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004050:	da03      	bge.n	800405a <__kernel_sin+0x22>
 8004052:	f7fc fd87 	bl	8000b64 <__aeabi_d2iz>
 8004056:	2800      	cmp	r0, #0
 8004058:	d050      	beq.n	80040fc <__kernel_sin+0xc4>
 800405a:	4652      	mov	r2, sl
 800405c:	4623      	mov	r3, r4
 800405e:	4650      	mov	r0, sl
 8004060:	4621      	mov	r1, r4
 8004062:	f7fc fae5 	bl	8000630 <__aeabi_dmul>
 8004066:	4606      	mov	r6, r0
 8004068:	460f      	mov	r7, r1
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4650      	mov	r0, sl
 8004070:	4621      	mov	r1, r4
 8004072:	f7fc fadd 	bl	8000630 <__aeabi_dmul>
 8004076:	a33e      	add	r3, pc, #248	; (adr r3, 8004170 <__kernel_sin+0x138>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	4680      	mov	r8, r0
 800407e:	4689      	mov	r9, r1
 8004080:	4630      	mov	r0, r6
 8004082:	4639      	mov	r1, r7
 8004084:	f7fc fad4 	bl	8000630 <__aeabi_dmul>
 8004088:	a33b      	add	r3, pc, #236	; (adr r3, 8004178 <__kernel_sin+0x140>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f7fc f917 	bl	80002c0 <__aeabi_dsub>
 8004092:	4632      	mov	r2, r6
 8004094:	463b      	mov	r3, r7
 8004096:	f7fc facb 	bl	8000630 <__aeabi_dmul>
 800409a:	a339      	add	r3, pc, #228	; (adr r3, 8004180 <__kernel_sin+0x148>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f7fc f910 	bl	80002c4 <__adddf3>
 80040a4:	4632      	mov	r2, r6
 80040a6:	463b      	mov	r3, r7
 80040a8:	f7fc fac2 	bl	8000630 <__aeabi_dmul>
 80040ac:	a336      	add	r3, pc, #216	; (adr r3, 8004188 <__kernel_sin+0x150>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc f905 	bl	80002c0 <__aeabi_dsub>
 80040b6:	4632      	mov	r2, r6
 80040b8:	463b      	mov	r3, r7
 80040ba:	f7fc fab9 	bl	8000630 <__aeabi_dmul>
 80040be:	a334      	add	r3, pc, #208	; (adr r3, 8004190 <__kernel_sin+0x158>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc f8fe 	bl	80002c4 <__adddf3>
 80040c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040cc:	b9dd      	cbnz	r5, 8004106 <__kernel_sin+0xce>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4630      	mov	r0, r6
 80040d4:	4639      	mov	r1, r7
 80040d6:	f7fc faab 	bl	8000630 <__aeabi_dmul>
 80040da:	a32f      	add	r3, pc, #188	; (adr r3, 8004198 <__kernel_sin+0x160>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f7fc f8ee 	bl	80002c0 <__aeabi_dsub>
 80040e4:	4642      	mov	r2, r8
 80040e6:	464b      	mov	r3, r9
 80040e8:	f7fc faa2 	bl	8000630 <__aeabi_dmul>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4650      	mov	r0, sl
 80040f2:	4621      	mov	r1, r4
 80040f4:	f7fc f8e6 	bl	80002c4 <__adddf3>
 80040f8:	4682      	mov	sl, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	4650      	mov	r0, sl
 80040fe:	4621      	mov	r1, r4
 8004100:	b006      	add	sp, #24
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004106:	2200      	movs	r2, #0
 8004108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800410c:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <__kernel_sin+0x168>)
 800410e:	f7fc fa8f 	bl	8000630 <__aeabi_dmul>
 8004112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc fa87 	bl	8000630 <__aeabi_dmul>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800412a:	f7fc f8c9 	bl	80002c0 <__aeabi_dsub>
 800412e:	4632      	mov	r2, r6
 8004130:	463b      	mov	r3, r7
 8004132:	f7fc fa7d 	bl	8000630 <__aeabi_dmul>
 8004136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800413a:	f7fc f8c1 	bl	80002c0 <__aeabi_dsub>
 800413e:	a316      	add	r3, pc, #88	; (adr r3, 8004198 <__kernel_sin+0x160>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	4606      	mov	r6, r0
 8004146:	460f      	mov	r7, r1
 8004148:	4640      	mov	r0, r8
 800414a:	4649      	mov	r1, r9
 800414c:	f7fc fa70 	bl	8000630 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4630      	mov	r0, r6
 8004156:	4639      	mov	r1, r7
 8004158:	f7fc f8b4 	bl	80002c4 <__adddf3>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4650      	mov	r0, sl
 8004162:	4621      	mov	r1, r4
 8004164:	f7fc f8ac 	bl	80002c0 <__aeabi_dsub>
 8004168:	e7c6      	b.n	80040f8 <__kernel_sin+0xc0>
 800416a:	bf00      	nop
 800416c:	f3af 8000 	nop.w
 8004170:	5acfd57c 	.word	0x5acfd57c
 8004174:	3de5d93a 	.word	0x3de5d93a
 8004178:	8a2b9ceb 	.word	0x8a2b9ceb
 800417c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004180:	57b1fe7d 	.word	0x57b1fe7d
 8004184:	3ec71de3 	.word	0x3ec71de3
 8004188:	19c161d5 	.word	0x19c161d5
 800418c:	3f2a01a0 	.word	0x3f2a01a0
 8004190:	1110f8a6 	.word	0x1110f8a6
 8004194:	3f811111 	.word	0x3f811111
 8004198:	55555549 	.word	0x55555549
 800419c:	3fc55555 	.word	0x3fc55555
 80041a0:	3fe00000 	.word	0x3fe00000

080041a4 <fabs>:
 80041a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80041a8:	4770      	bx	lr
 80041aa:	0000      	movs	r0, r0
 80041ac:	0000      	movs	r0, r0
	...

080041b0 <floor>:
 80041b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80041b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80041bc:	2e13      	cmp	r6, #19
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4607      	mov	r7, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	4605      	mov	r5, r0
 80041c8:	dc33      	bgt.n	8004232 <floor+0x82>
 80041ca:	2e00      	cmp	r6, #0
 80041cc:	da14      	bge.n	80041f8 <floor+0x48>
 80041ce:	a334      	add	r3, pc, #208	; (adr r3, 80042a0 <floor+0xf0>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f7fc f876 	bl	80002c4 <__adddf3>
 80041d8:	2200      	movs	r2, #0
 80041da:	2300      	movs	r3, #0
 80041dc:	f7fc fcb8 	bl	8000b50 <__aeabi_dcmpgt>
 80041e0:	b138      	cbz	r0, 80041f2 <floor+0x42>
 80041e2:	2c00      	cmp	r4, #0
 80041e4:	da58      	bge.n	8004298 <floor+0xe8>
 80041e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80041ea:	431d      	orrs	r5, r3
 80041ec:	d001      	beq.n	80041f2 <floor+0x42>
 80041ee:	2500      	movs	r5, #0
 80041f0:	4c2d      	ldr	r4, [pc, #180]	; (80042a8 <floor+0xf8>)
 80041f2:	4623      	mov	r3, r4
 80041f4:	462f      	mov	r7, r5
 80041f6:	e025      	b.n	8004244 <floor+0x94>
 80041f8:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <floor+0xfc>)
 80041fa:	fa42 f806 	asr.w	r8, r2, r6
 80041fe:	ea01 0208 	and.w	r2, r1, r8
 8004202:	4302      	orrs	r2, r0
 8004204:	d01e      	beq.n	8004244 <floor+0x94>
 8004206:	a326      	add	r3, pc, #152	; (adr r3, 80042a0 <floor+0xf0>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f7fc f85a 	bl	80002c4 <__adddf3>
 8004210:	2200      	movs	r2, #0
 8004212:	2300      	movs	r3, #0
 8004214:	f7fc fc9c 	bl	8000b50 <__aeabi_dcmpgt>
 8004218:	2800      	cmp	r0, #0
 800421a:	d0ea      	beq.n	80041f2 <floor+0x42>
 800421c:	2c00      	cmp	r4, #0
 800421e:	bfbe      	ittt	lt
 8004220:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004224:	fa43 f606 	asrlt.w	r6, r3, r6
 8004228:	19a4      	addlt	r4, r4, r6
 800422a:	2500      	movs	r5, #0
 800422c:	ea24 0408 	bic.w	r4, r4, r8
 8004230:	e7df      	b.n	80041f2 <floor+0x42>
 8004232:	2e33      	cmp	r6, #51	; 0x33
 8004234:	dd0a      	ble.n	800424c <floor+0x9c>
 8004236:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800423a:	d103      	bne.n	8004244 <floor+0x94>
 800423c:	f7fc f842 	bl	80002c4 <__adddf3>
 8004240:	4607      	mov	r7, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4638      	mov	r0, r7
 8004246:	4619      	mov	r1, r3
 8004248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800424c:	f04f 32ff 	mov.w	r2, #4294967295
 8004250:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004254:	fa22 f808 	lsr.w	r8, r2, r8
 8004258:	ea18 0f00 	tst.w	r8, r0
 800425c:	d0f2      	beq.n	8004244 <floor+0x94>
 800425e:	a310      	add	r3, pc, #64	; (adr r3, 80042a0 <floor+0xf0>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f82e 	bl	80002c4 <__adddf3>
 8004268:	2200      	movs	r2, #0
 800426a:	2300      	movs	r3, #0
 800426c:	f7fc fc70 	bl	8000b50 <__aeabi_dcmpgt>
 8004270:	2800      	cmp	r0, #0
 8004272:	d0be      	beq.n	80041f2 <floor+0x42>
 8004274:	2c00      	cmp	r4, #0
 8004276:	da02      	bge.n	800427e <floor+0xce>
 8004278:	2e14      	cmp	r6, #20
 800427a:	d103      	bne.n	8004284 <floor+0xd4>
 800427c:	3401      	adds	r4, #1
 800427e:	ea25 0508 	bic.w	r5, r5, r8
 8004282:	e7b6      	b.n	80041f2 <floor+0x42>
 8004284:	2301      	movs	r3, #1
 8004286:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800428a:	fa03 f606 	lsl.w	r6, r3, r6
 800428e:	4435      	add	r5, r6
 8004290:	42bd      	cmp	r5, r7
 8004292:	bf38      	it	cc
 8004294:	18e4      	addcc	r4, r4, r3
 8004296:	e7f2      	b.n	800427e <floor+0xce>
 8004298:	2500      	movs	r5, #0
 800429a:	462c      	mov	r4, r5
 800429c:	e7a9      	b.n	80041f2 <floor+0x42>
 800429e:	bf00      	nop
 80042a0:	8800759c 	.word	0x8800759c
 80042a4:	7e37e43c 	.word	0x7e37e43c
 80042a8:	bff00000 	.word	0xbff00000
 80042ac:	000fffff 	.word	0x000fffff

080042b0 <scalbn>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80042b6:	4604      	mov	r4, r0
 80042b8:	460d      	mov	r5, r1
 80042ba:	4617      	mov	r7, r2
 80042bc:	460b      	mov	r3, r1
 80042be:	b996      	cbnz	r6, 80042e6 <scalbn+0x36>
 80042c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80042c4:	4303      	orrs	r3, r0
 80042c6:	d039      	beq.n	800433c <scalbn+0x8c>
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <scalbn+0xe8>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	f7fc f9b0 	bl	8000630 <__aeabi_dmul>
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <scalbn+0xec>)
 80042d2:	4604      	mov	r4, r0
 80042d4:	429f      	cmp	r7, r3
 80042d6:	460d      	mov	r5, r1
 80042d8:	da0f      	bge.n	80042fa <scalbn+0x4a>
 80042da:	a32b      	add	r3, pc, #172	; (adr r3, 8004388 <scalbn+0xd8>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f7fc f9a6 	bl	8000630 <__aeabi_dmul>
 80042e4:	e006      	b.n	80042f4 <scalbn+0x44>
 80042e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80042ea:	4296      	cmp	r6, r2
 80042ec:	d10a      	bne.n	8004304 <scalbn+0x54>
 80042ee:	4602      	mov	r2, r0
 80042f0:	f7fb ffe8 	bl	80002c4 <__adddf3>
 80042f4:	4604      	mov	r4, r0
 80042f6:	460d      	mov	r5, r1
 80042f8:	e020      	b.n	800433c <scalbn+0x8c>
 80042fa:	460b      	mov	r3, r1
 80042fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004300:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004304:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004308:	19b9      	adds	r1, r7, r6
 800430a:	4291      	cmp	r1, r2
 800430c:	dd0e      	ble.n	800432c <scalbn+0x7c>
 800430e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004312:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004316:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800431a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800431e:	4820      	ldr	r0, [pc, #128]	; (80043a0 <scalbn+0xf0>)
 8004320:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004324:	a31a      	add	r3, pc, #104	; (adr r3, 8004390 <scalbn+0xe0>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	e7d9      	b.n	80042e0 <scalbn+0x30>
 800432c:	2900      	cmp	r1, #0
 800432e:	dd08      	ble.n	8004342 <scalbn+0x92>
 8004330:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004334:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004338:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800433c:	4620      	mov	r0, r4
 800433e:	4629      	mov	r1, r5
 8004340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004342:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004346:	da12      	bge.n	800436e <scalbn+0xbe>
 8004348:	f24c 3350 	movw	r3, #50000	; 0xc350
 800434c:	429f      	cmp	r7, r3
 800434e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004352:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8004356:	dcdc      	bgt.n	8004312 <scalbn+0x62>
 8004358:	a30b      	add	r3, pc, #44	; (adr r3, 8004388 <scalbn+0xd8>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004362:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004366:	480f      	ldr	r0, [pc, #60]	; (80043a4 <scalbn+0xf4>)
 8004368:	f041 011f 	orr.w	r1, r1, #31
 800436c:	e7b8      	b.n	80042e0 <scalbn+0x30>
 800436e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004372:	3136      	adds	r1, #54	; 0x36
 8004374:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004378:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800437c:	4620      	mov	r0, r4
 800437e:	4629      	mov	r1, r5
 8004380:	2200      	movs	r2, #0
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <scalbn+0xf8>)
 8004384:	e7ac      	b.n	80042e0 <scalbn+0x30>
 8004386:	bf00      	nop
 8004388:	c2f8f359 	.word	0xc2f8f359
 800438c:	01a56e1f 	.word	0x01a56e1f
 8004390:	8800759c 	.word	0x8800759c
 8004394:	7e37e43c 	.word	0x7e37e43c
 8004398:	43500000 	.word	0x43500000
 800439c:	ffff3cb0 	.word	0xffff3cb0
 80043a0:	8800759c 	.word	0x8800759c
 80043a4:	c2f8f359 	.word	0xc2f8f359
 80043a8:	3c900000 	.word	0x3c900000

080043ac <abort>:
 80043ac:	2006      	movs	r0, #6
 80043ae:	b508      	push	{r3, lr}
 80043b0:	f000 f90a 	bl	80045c8 <raise>
 80043b4:	2001      	movs	r0, #1
 80043b6:	f7fd f94e 	bl	8001656 <_exit>
	...

080043bc <__errno>:
 80043bc:	4b01      	ldr	r3, [pc, #4]	; (80043c4 <__errno+0x8>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	2600      	movs	r6, #0
 80043cc:	4d0c      	ldr	r5, [pc, #48]	; (8004400 <__libc_init_array+0x38>)
 80043ce:	4c0d      	ldr	r4, [pc, #52]	; (8004404 <__libc_init_array+0x3c>)
 80043d0:	1b64      	subs	r4, r4, r5
 80043d2:	10a4      	asrs	r4, r4, #2
 80043d4:	42a6      	cmp	r6, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	f000 f920 	bl	800461c <_init>
 80043dc:	2600      	movs	r6, #0
 80043de:	4d0a      	ldr	r5, [pc, #40]	; (8004408 <__libc_init_array+0x40>)
 80043e0:	4c0a      	ldr	r4, [pc, #40]	; (800440c <__libc_init_array+0x44>)
 80043e2:	1b64      	subs	r4, r4, r5
 80043e4:	10a4      	asrs	r4, r4, #2
 80043e6:	42a6      	cmp	r6, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f0:	4798      	blx	r3
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fa:	4798      	blx	r3
 80043fc:	3601      	adds	r6, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	08004838 	.word	0x08004838
 8004404:	08004838 	.word	0x08004838
 8004408:	08004838 	.word	0x08004838
 800440c:	0800483c 	.word	0x0800483c

08004410 <malloc>:
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <malloc+0xc>)
 8004412:	4601      	mov	r1, r0
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	f000 b82b 	b.w	8004470 <_malloc_r>
 800441a:	bf00      	nop
 800441c:	2000000c 	.word	0x2000000c

08004420 <memset>:
 8004420:	4603      	mov	r3, r0
 8004422:	4402      	add	r2, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <sbrk_aligned>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	4e0e      	ldr	r6, [pc, #56]	; (800446c <sbrk_aligned+0x3c>)
 8004434:	460c      	mov	r4, r1
 8004436:	6831      	ldr	r1, [r6, #0]
 8004438:	4605      	mov	r5, r0
 800443a:	b911      	cbnz	r1, 8004442 <sbrk_aligned+0x12>
 800443c:	f000 f88c 	bl	8004558 <_sbrk_r>
 8004440:	6030      	str	r0, [r6, #0]
 8004442:	4621      	mov	r1, r4
 8004444:	4628      	mov	r0, r5
 8004446:	f000 f887 	bl	8004558 <_sbrk_r>
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	d00a      	beq.n	8004464 <sbrk_aligned+0x34>
 800444e:	1cc4      	adds	r4, r0, #3
 8004450:	f024 0403 	bic.w	r4, r4, #3
 8004454:	42a0      	cmp	r0, r4
 8004456:	d007      	beq.n	8004468 <sbrk_aligned+0x38>
 8004458:	1a21      	subs	r1, r4, r0
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f87c 	bl	8004558 <_sbrk_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d101      	bne.n	8004468 <sbrk_aligned+0x38>
 8004464:	f04f 34ff 	mov.w	r4, #4294967295
 8004468:	4620      	mov	r0, r4
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	20000128 	.word	0x20000128

08004470 <_malloc_r>:
 8004470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004474:	1ccd      	adds	r5, r1, #3
 8004476:	f025 0503 	bic.w	r5, r5, #3
 800447a:	3508      	adds	r5, #8
 800447c:	2d0c      	cmp	r5, #12
 800447e:	bf38      	it	cc
 8004480:	250c      	movcc	r5, #12
 8004482:	2d00      	cmp	r5, #0
 8004484:	4607      	mov	r7, r0
 8004486:	db01      	blt.n	800448c <_malloc_r+0x1c>
 8004488:	42a9      	cmp	r1, r5
 800448a:	d905      	bls.n	8004498 <_malloc_r+0x28>
 800448c:	230c      	movs	r3, #12
 800448e:	2600      	movs	r6, #0
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	4630      	mov	r0, r6
 8004494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004498:	4e2e      	ldr	r6, [pc, #184]	; (8004554 <_malloc_r+0xe4>)
 800449a:	f000 f8b1 	bl	8004600 <__malloc_lock>
 800449e:	6833      	ldr	r3, [r6, #0]
 80044a0:	461c      	mov	r4, r3
 80044a2:	bb34      	cbnz	r4, 80044f2 <_malloc_r+0x82>
 80044a4:	4629      	mov	r1, r5
 80044a6:	4638      	mov	r0, r7
 80044a8:	f7ff ffc2 	bl	8004430 <sbrk_aligned>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	4604      	mov	r4, r0
 80044b0:	d14d      	bne.n	800454e <_malloc_r+0xde>
 80044b2:	6834      	ldr	r4, [r6, #0]
 80044b4:	4626      	mov	r6, r4
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	d140      	bne.n	800453c <_malloc_r+0xcc>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	4631      	mov	r1, r6
 80044be:	4638      	mov	r0, r7
 80044c0:	eb04 0803 	add.w	r8, r4, r3
 80044c4:	f000 f848 	bl	8004558 <_sbrk_r>
 80044c8:	4580      	cmp	r8, r0
 80044ca:	d13a      	bne.n	8004542 <_malloc_r+0xd2>
 80044cc:	6821      	ldr	r1, [r4, #0]
 80044ce:	3503      	adds	r5, #3
 80044d0:	1a6d      	subs	r5, r5, r1
 80044d2:	f025 0503 	bic.w	r5, r5, #3
 80044d6:	3508      	adds	r5, #8
 80044d8:	2d0c      	cmp	r5, #12
 80044da:	bf38      	it	cc
 80044dc:	250c      	movcc	r5, #12
 80044de:	4638      	mov	r0, r7
 80044e0:	4629      	mov	r1, r5
 80044e2:	f7ff ffa5 	bl	8004430 <sbrk_aligned>
 80044e6:	3001      	adds	r0, #1
 80044e8:	d02b      	beq.n	8004542 <_malloc_r+0xd2>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	442b      	add	r3, r5
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	e00e      	b.n	8004510 <_malloc_r+0xa0>
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	1b52      	subs	r2, r2, r5
 80044f6:	d41e      	bmi.n	8004536 <_malloc_r+0xc6>
 80044f8:	2a0b      	cmp	r2, #11
 80044fa:	d916      	bls.n	800452a <_malloc_r+0xba>
 80044fc:	1961      	adds	r1, r4, r5
 80044fe:	42a3      	cmp	r3, r4
 8004500:	6025      	str	r5, [r4, #0]
 8004502:	bf18      	it	ne
 8004504:	6059      	strne	r1, [r3, #4]
 8004506:	6863      	ldr	r3, [r4, #4]
 8004508:	bf08      	it	eq
 800450a:	6031      	streq	r1, [r6, #0]
 800450c:	5162      	str	r2, [r4, r5]
 800450e:	604b      	str	r3, [r1, #4]
 8004510:	4638      	mov	r0, r7
 8004512:	f104 060b 	add.w	r6, r4, #11
 8004516:	f000 f879 	bl	800460c <__malloc_unlock>
 800451a:	f026 0607 	bic.w	r6, r6, #7
 800451e:	1d23      	adds	r3, r4, #4
 8004520:	1af2      	subs	r2, r6, r3
 8004522:	d0b6      	beq.n	8004492 <_malloc_r+0x22>
 8004524:	1b9b      	subs	r3, r3, r6
 8004526:	50a3      	str	r3, [r4, r2]
 8004528:	e7b3      	b.n	8004492 <_malloc_r+0x22>
 800452a:	6862      	ldr	r2, [r4, #4]
 800452c:	42a3      	cmp	r3, r4
 800452e:	bf0c      	ite	eq
 8004530:	6032      	streq	r2, [r6, #0]
 8004532:	605a      	strne	r2, [r3, #4]
 8004534:	e7ec      	b.n	8004510 <_malloc_r+0xa0>
 8004536:	4623      	mov	r3, r4
 8004538:	6864      	ldr	r4, [r4, #4]
 800453a:	e7b2      	b.n	80044a2 <_malloc_r+0x32>
 800453c:	4634      	mov	r4, r6
 800453e:	6876      	ldr	r6, [r6, #4]
 8004540:	e7b9      	b.n	80044b6 <_malloc_r+0x46>
 8004542:	230c      	movs	r3, #12
 8004544:	4638      	mov	r0, r7
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	f000 f860 	bl	800460c <__malloc_unlock>
 800454c:	e7a1      	b.n	8004492 <_malloc_r+0x22>
 800454e:	6025      	str	r5, [r4, #0]
 8004550:	e7de      	b.n	8004510 <_malloc_r+0xa0>
 8004552:	bf00      	nop
 8004554:	20000124 	.word	0x20000124

08004558 <_sbrk_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	2300      	movs	r3, #0
 800455c:	4d05      	ldr	r5, [pc, #20]	; (8004574 <_sbrk_r+0x1c>)
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	602b      	str	r3, [r5, #0]
 8004564:	f7fd f882 	bl	800166c <_sbrk>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_sbrk_r+0x1a>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_sbrk_r+0x1a>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	2000012c 	.word	0x2000012c

08004578 <_raise_r>:
 8004578:	291f      	cmp	r1, #31
 800457a:	b538      	push	{r3, r4, r5, lr}
 800457c:	4604      	mov	r4, r0
 800457e:	460d      	mov	r5, r1
 8004580:	d904      	bls.n	800458c <_raise_r+0x14>
 8004582:	2316      	movs	r3, #22
 8004584:	6003      	str	r3, [r0, #0]
 8004586:	f04f 30ff 	mov.w	r0, #4294967295
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800458e:	b112      	cbz	r2, 8004596 <_raise_r+0x1e>
 8004590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004594:	b94b      	cbnz	r3, 80045aa <_raise_r+0x32>
 8004596:	4620      	mov	r0, r4
 8004598:	f000 f830 	bl	80045fc <_getpid_r>
 800459c:	462a      	mov	r2, r5
 800459e:	4601      	mov	r1, r0
 80045a0:	4620      	mov	r0, r4
 80045a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045a6:	f000 b817 	b.w	80045d8 <_kill_r>
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d00a      	beq.n	80045c4 <_raise_r+0x4c>
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	d103      	bne.n	80045ba <_raise_r+0x42>
 80045b2:	2316      	movs	r3, #22
 80045b4:	6003      	str	r3, [r0, #0]
 80045b6:	2001      	movs	r0, #1
 80045b8:	e7e7      	b.n	800458a <_raise_r+0x12>
 80045ba:	2400      	movs	r4, #0
 80045bc:	4628      	mov	r0, r5
 80045be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80045c2:	4798      	blx	r3
 80045c4:	2000      	movs	r0, #0
 80045c6:	e7e0      	b.n	800458a <_raise_r+0x12>

080045c8 <raise>:
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <raise+0xc>)
 80045ca:	4601      	mov	r1, r0
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f7ff bfd3 	b.w	8004578 <_raise_r>
 80045d2:	bf00      	nop
 80045d4:	2000000c 	.word	0x2000000c

080045d8 <_kill_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	2300      	movs	r3, #0
 80045dc:	4d06      	ldr	r5, [pc, #24]	; (80045f8 <_kill_r+0x20>)
 80045de:	4604      	mov	r4, r0
 80045e0:	4608      	mov	r0, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	f7fd f826 	bl	8001636 <_kill>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	d102      	bne.n	80045f4 <_kill_r+0x1c>
 80045ee:	682b      	ldr	r3, [r5, #0]
 80045f0:	b103      	cbz	r3, 80045f4 <_kill_r+0x1c>
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	bd38      	pop	{r3, r4, r5, pc}
 80045f6:	bf00      	nop
 80045f8:	2000012c 	.word	0x2000012c

080045fc <_getpid_r>:
 80045fc:	f7fd b814 	b.w	8001628 <_getpid>

08004600 <__malloc_lock>:
 8004600:	4801      	ldr	r0, [pc, #4]	; (8004608 <__malloc_lock+0x8>)
 8004602:	f000 b809 	b.w	8004618 <__retarget_lock_acquire_recursive>
 8004606:	bf00      	nop
 8004608:	20000130 	.word	0x20000130

0800460c <__malloc_unlock>:
 800460c:	4801      	ldr	r0, [pc, #4]	; (8004614 <__malloc_unlock+0x8>)
 800460e:	f000 b804 	b.w	800461a <__retarget_lock_release_recursive>
 8004612:	bf00      	nop
 8004614:	20000130 	.word	0x20000130

08004618 <__retarget_lock_acquire_recursive>:
 8004618:	4770      	bx	lr

0800461a <__retarget_lock_release_recursive>:
 800461a:	4770      	bx	lr

0800461c <_init>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr

08004628 <_fini>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr
